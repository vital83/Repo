using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Data;
using System.Data.OleDb;
using System.ComponentModel;
using System.Threading;
using System.Collections;
using System.Net.Mail;
using System.Net.Mime;
using System.Xml;
using System.Diagnostics;


namespace InfoChange
{
    public struct OspOptions
    {
        public string Zajavitel; // заявитель = ОСП
        public string Z_adr; // Адрес заявителя
        public string Inn; // ИНН заявителя
        public string Bank; // Банк получателя
        public string Kpp; // КПП получателя
        public string Bik; // БИК получателя
        public string Ls; // Л.С. получателя
        public string Rs; // Р.С. получателя (просто счет Управления - общий)
        public string ShortOspName; // Краткое название заявителя
    }

    // функции по работе с файлами
    class File_funcs
    {
        // класс и номер  лога будет передаваться прямо в каждую из функций непосредственно
        // а если передан 0 - то лог пишется куда-то (пока никуда)

        public File_funcs()
        {
            // пока вобще не готов написать что это за класс будет
        }


        public DataTable ReadXML(string txtPath)
        {
            DataTable dtSberData = null;

            // прочитать данные из XML 
            XmlReader xmlFile;
            //XmlReaderSettings xmlSet = new XmlReaderSettings();

            xmlFile = XmlReader.Create(txtPath, new XmlReaderSettings());
            DataSet ds = new DataSet();
            ds.ReadXml(xmlFile);

            // дальше нужно обработать полученный DS
            // берем row из ds.Tables[0] и отправляем на запись как обычный ответ.

            if (ds.Tables.Count > 0)
            {
                dtSberData = ds.Tables[0];
            }
            return dtSberData;
        }

        // если в строке подключения есть старый пароль - заменить на новый
        // это нужно для того, чтобы не менять конфиг. файл
        public string ReplacePwdConString(string txtConString, string txtOldPwd, string txtNewPwd)
        {
            OleDbConnectionStringBuilder csb = new OleDbConnectionStringBuilder(txtConString);
            string txtPwd = "";
            if (csb.ContainsKey("Password"))
            {
                txtPwd = csb["Password"].ToString();
                if (txtPwd == txtOldPwd)
                {
                    txtPwd = txtNewPwd;
                    csb["Password"] = txtPwd;
                    txtConString = csb.ConnectionString;
                }
            }
            return txtConString;
        }


        // если в строке подключения есть <domen>.karelia.ssp то все что после <domen> надо убирать
        // варианты - сразу поменять на rdb
        // попробовать отрезать по маске и сделать то что идет первым, до имени домена
        // пробуем первый вариант Provider=LCPI.IBProvider.3;Data Source=rdb-petr1/3051;Persist Security Info=True;Password=ksv1193;User ID=SYSDBA;Location=rdb-petr1/3051:ncore-fssp;ctype=win1251
        public string RemoveDomainFromConString(string txtConString)
        {
            OleDbConnectionStringBuilder csb = new OleDbConnectionStringBuilder(txtConString);
            string txtSrc = "";
            if(csb.ContainsKey("Location")){
                txtSrc = csb["Location"].ToString();
                if (!txtSrc.Contains("/3051:")) txtSrc = txtSrc.Replace(":", "/3051:");
                if (txtSrc.Length > 0) {
                    string[] slashSplit = txtSrc.Split('/');
                    if (slashSplit.Length > 1) {
                        string[] dotBits = slashSplit[0].Split('.');
                        if (dotBits.Length > 1)
                        {
                            csb["Location"] = dotBits[0] + txtSrc.Substring(slashSplit[0].Length);
                            txtConString = csb.ConnectionString;
                        }
                    }
                }
            }
            return txtConString;
        }

        /*
        public void XMLFileEscape(string txtFilePathIn, string txtFilePathOut, Encoding enc)
        {

            string str = string.Empty;
            // using (System.IO.StreamReader reader = new System.IO.File.OpenText(@"D:\test.txt"))
            using (System.IO.StreamReader reader = new StreamReader(txtFilePathIn, enc))
            {
                str = reader.ReadToEnd();
            }
            // string encodedXml = System.Security.SecurityElement.Escape(str);
            FileStream fs = new FileStream(txtFilePathOut, FileMode.OpenOrCreate);
            using (XmlTextWriter xtw = new XmlTextWriter(fs, enc))
            {
                xtw.WriteString(str);
            }

            
            //using (System.IO.StreamWriter file = new StreamWriter(fs, enc))
            //{
            //    file.Write(encodedXml);
            //}
        }
        */


        public void FileStringReplace(string txtFilePathIn, string txtFilePathOut, string txtStringToFind, string txtReplacement, Encoding enc)
        {

            string str = string.Empty;
            // using (System.IO.StreamReader reader = new System.IO.File.OpenText(@"D:\test.txt"))
            using (System.IO.StreamReader reader = new StreamReader(txtFilePathIn, enc))
            {
                str = reader.ReadToEnd();
            }
            str = str.Replace(txtStringToFind,txtReplacement);
            FileStream fs = new FileStream(txtFilePathOut, FileMode.OpenOrCreate);
            using (System.IO.StreamWriter file = new StreamWriter(fs, enc))
            {
                file.Write(str);
            }
        }

        public string GetServerNameFromConStr(string constrRDB)
        {
            string txtRes = "";

            string txtFsServerName = "";

            if (constrRDB.Contains(";Location="))
            {
                txtFsServerName = constrRDB.Substring(constrRDB.IndexOf(";Location=") + 1);

                int nLastIndex = txtFsServerName.IndexOf("/");
                if (nLastIndex == 0) nLastIndex = txtFsServerName.Length;
                txtFsServerName = txtFsServerName.Substring(9, nLastIndex - 9);
            }
            txtRes = txtFsServerName;

            return txtRes;
        }

        // преобразование ФИО к Фамилия И.О.
        public string FamIO(string txtFIO)
        {
            string[] str = txtFIO.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
            if(str.Length == 2) return string.Format("{0} {1}.",str[0],str[1][0]);
            else if (str.Length >= 3) return string.Format("{0} {1}. {2}.",str[0],str[1][0],str[2][0]);
            else return txtFIO; // если там какой-то сбой - то вернуть то что на вход получили
        }

        public string getValuteByCod(string ls)
        {
            string txtRes = "";
            if (ls.Length >= 8)
            {
                string txtCod = ls.Trim().Substring(5, 3);
                switch (txtCod)
                {
                    case "810":
                        txtRes = "руб.";
                        break;

                    case "643":
                        txtRes = "руб.";
                        break;

                    case "840":
                        txtRes = "долл.";
                        break;

                    case "978":
                        txtRes = "евро";
                        break;

                    case "826":
                        txtRes = "фунт стерл.";
                        break;

                    case "392":
                        txtRes = "яп. иена";
                        break;

                    case "756":
                        txtRes = "швейц. франк";
                        break;

                    default:
                        txtRes = "валюта с кодом " + txtCod;
                        break;
                }
            }

            return txtRes;
        }

        public string CreatePathWithDateS(string txtPathWithoutDate)
        {
            string txtRes = "";
            string txtCurrDateFolder = DateTime.Today.Year.ToString() + DateTime.Today.Month.ToString().PadLeft(2, '0') + DateTime.Today.Day.ToString().PadLeft(2, '0');

            if (Directory.Exists(string.Format(@"{0}\{1}", txtPathWithoutDate, txtCurrDateFolder)))
            {
                // Нужно сделать новый путь с суффиксом _mmss для release_name
                DateTime dtFixNowDate = DateTime.Now;
                string suffix = "_" + dtFixNowDate.Hour.ToString().PadLeft(2, '0') + dtFixNowDate.Minute.ToString().PadLeft(2, '0') + dtFixNowDate.Second.ToString().PadLeft(2, '0');
                // DialogResult rv = MessageBox.Show("По пути " + string.Format(@"{0}\{1}", txtPathWithoutDate, txtCurrDateFolder) + ", указанном в конфигурационном файле, существует файл. Будет файл будет выгружен в папку " + txtCurrDateFolder + suffix, "Внимание", MessageBoxButtons.OK);
                txtCurrDateFolder += suffix;
            }
            Directory.CreateDirectory(string.Format(@"{0}\{1}", txtPathWithoutDate, txtCurrDateFolder));
            txtRes = string.Format(@"{0}\{1}", txtPathWithoutDate, txtCurrDateFolder);
            return txtRes;
        }

        public string makenewPersPensXMLFileName(decimal nOspNum, int nPensDeptCode, int nPensRegionCode, int nFileNum)
        {
            // SSP_yyyymmdd_ХХ_aaaaa_bbb_ccc_nnnNN.{XML/ZIP}, где:
            string txtRes = "SSP_";
            txtRes += DateTime.Today.Year.ToString("D4"); // yyyy
            txtRes += DateTime.Today.Month.ToString("D2").PadLeft(2, '0'); // mm
            txtRes += DateTime.Today.Day.ToString("D2").PadLeft(2, '0'); // dd
            txtRes += "_11_"; // XX - код ЭДО из справочника = 11
            txtRes += "100" + nOspNum.ToString().PadLeft(2, '0') + "_"; // aaaaa - код ВКСП
            txtRes += nPensDeptCode.ToString("D3").PadLeft(3, '0') + "_"; // bbb – код отделения ПФР (3 цифры);
            txtRes += nPensRegionCode.ToString("D3").PadLeft(3, '0') + "_"; // ccс – код территориального органа ПФР (3 цифры);
            txtRes += nFileNum.ToString("D5").PadLeft(5, '0');// nnnNN – порядковый номер электронного сообщения за указанный день (00001-99999).
            txtRes += ".XML";

            return txtRes;
        }

        public string makenewSberFileName2(decimal nOspNum)
        {
            // P<ОСПN>DDM.NSS
            string txtRes = "P10";
            // на самом деле код ОСП 4 знака из справочника, но мы справочник вести не хотим
            // и будем склеивать '10' и код ОСП из 2 цифр
            txtRes += Convert.ToInt32(nOspNum).ToString("D2"); // XX
            txtRes += DateTime.Today.Day.ToString("D2"); // DD
            txtRes += monthCode(DateTime.Today); // M
            return txtRes;
        }
        public string makenewSberFileName2(int iDiv, DateTime dtDate)
        {
            // P<ОСПN>DDM.NSS
            string txtRes = "P10";
            // на самом деле код ОСП 4 знака из справочника, но мы справочник вести не хотим
            // и будем склеивать '10' и код ОСП из 2 цифр
            txtRes += iDiv.ToString("D2"); // XX
            txtRes += dtDate.Day.ToString("D2"); // DD
            txtRes += monthCode(dtDate); // M
            return txtRes;
        }

        public string makenewSberFileName()
        {
            // RDDMFFFF
            string txtSberFilialCode = "8628";
            string txtRes = "R";
            txtRes += DateTime.Today.Day.ToString("D2"); // DD
            txtRes += monthCode(DateTime.Today); // M
            txtRes += txtSberFilialCode; // FFFF
            return txtRes;
        }

        public string makenewSberFileExt(int iFileNum, decimal nOspNum)
        {
            // .NXX
            //string txtRes = ".";
            string txtRes = "";
            txtRes += fileCode(iFileNum + 1); // N
            txtRes += Convert.ToInt32(nOspNum).ToString("D2"); // XX

            return txtRes;
        }

        public char monthCode(DateTime dtDate)
        {
            char[] monthCodes = new char[] { ' ', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C' };
            return monthCodes[dtDate.Month];
        }

        public int monthNumber(char Code)
        {   int res = -1;
            char[] monthCodes = new char[] { ' ', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C' };
            res = Array.IndexOf(monthCodes, Code);
            return res;
        }

        public char fileCode(int iNum)
        {
            char[] fileCodes = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };

            if (iNum > 35)
            {
                return '0';
            }
            else
            {
                return fileCodes[iNum];
            }

        }



        public ArrayList ReadPaths(string FromFilename, Encoding EncodingValue, Logger_ufssprk_tools lLogger)
        {
            ArrayList Filepaths = new ArrayList();
            try
            {

                using (StreamReader sr = new StreamReader(FromFilename, EncodingValue))
                {
                    String line;
                    while ((line = sr.ReadLine()) != null)
                    {
                        Filepaths.Add(line);
                    }
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка при попытке получить параметры из файла " + FromFilename + ". Message: " + ex.Message + "Exception: " + ex.ToString();
            }
            return Filepaths;
        }

        public bool isBinary(string path)
        {
            long length = new System.IO.FileInfo(path).Length;
            if (length == 0) return false;

            using (StreamReader stream = new StreamReader(path))
            {
                int ch;
                int iCounter = 0;
                while ((ch = stream.Read()) != -1)
                {
                    iCounter++;
                    if (isControlChar(ch))
                    {
                        return true;
                    }
                    if (iCounter > 200) return false;
                }
            }
            return false;
        }

        // проверка подписан ли XML файл ЭП
        public bool isXMLWithESign(string path, Encoding EncodingValue)
        {
            long length = new System.IO.FileInfo(path).Length;
            if (length == 0) return false;
            StreamReader stream = new StreamReader(path, EncodingValue);
            if (stream.ReadToEnd().TrimEnd().EndsWith(">"))
                return false;
            else return true;

            //return false;
        }

        public bool CheckXMLisSignedAndEmail(string path, Encoding EncodingValue, string txtEmail, string txtEmailFrom, string txtServerAdr)
        {
            if(isXMLWithESign(path, EncodingValue)){
                string txtMessage = "Ошибка! XML файл подписан ЭП и не может быть обработан: " + path;
                if (SendEmail(txtMessage, "Ошибка! XML файл подписан ЭП и не может быть обработан", txtEmail, txtEmailFrom, txtServerAdr, "") > 0)
                {
                    return true;
                }
            }
            
            return false;
        }

        

        public bool isControlChar(int ch)
        {
            return (ch > Chars.NUL && ch < Chars.BS)
                || (ch > Chars.CR && ch < Chars.SUB);
        }

        public class Chars
        {
            public static char NUL = (char)0; // Null char
            public static char BS = (char)8; // Back Space
            public static char CR = (char)13; // Carriage Return
            public static char SUB = (char)26; // Substitute
        }

        public bool WriteTofile(string txtText, string outfile)
        {
            using (StreamWriter sw = new StreamWriter(outfile, true))
            {
                sw.WriteLine(txtText);
                sw.Close();
            }
            return true;

        }

        public bool WriteTofile(string txtText, string outfile, Encoding enc)
        {
            using (StreamWriter sw = new StreamWriter(outfile, true, enc))
            {
                sw.WriteLine(txtText);
                sw.Close();
            }
            return true;

        }


        public int SendEmail(string txtContent, string txtSubj, string txtEmailTo, string txtEmailFrom, string txtSmtpAdr, string txtFileName)
        {
            try
            {
                //Авторизация на SMTP сервере
                SmtpClient Smtp = new SmtpClient(txtSmtpAdr, 25);
                //Smtp.Credentials = new NetworkCredential("login", "pass");
                //Smtp.EnableSsl = false;

                //Формирование письма
                MailMessage Message = new MailMessage();
                Message.From = new MailAddress(txtEmailFrom);
                Message.To.Add(new MailAddress(txtEmailTo));
                Message.Subject = txtSubj;
                Message.Body = txtContent;

                //Прикрепляем файл
                if (txtFileName.Trim() != "")
                {
                    Attachment attach = new Attachment(txtFileName, MediaTypeNames.Application.Octet);

                    // Добавляем информацию для файла
                    ContentDisposition disposition = attach.ContentDisposition;
                    disposition.CreationDate = System.IO.File.GetCreationTime(txtFileName);
                    disposition.ModificationDate = System.IO.File.GetLastWriteTime(txtFileName);
                    disposition.ReadDate = System.IO.File.GetLastAccessTime(txtFileName);

                    Message.Attachments.Add(attach);
                }

                // 20230830 - временно отключил т.к. нужно широфвание и авторизация 
                // Smtp.Send(Message);//отправка
            }
            catch (Exception ex)
            {
                return 0;
            }
            return 1;
        }


        public ArrayList DirSearch(string sDir, int nCycle, int nMax, Logger_ufssprk_tools lLogger)
        {
            ArrayList alFiles = new ArrayList();
            if (nCycle <= nMax)
            {
                try
                {
                    // почему-то не собираются файлы из первого запуска
                    foreach (string d in Directory.GetDirectories(sDir))
                    {
                        foreach (string f in Directory.GetFiles(d))
                        {
                            alFiles.Add(f);
                        }
                        //DirSearch(d);
                        alFiles.AddRange(DirSearch(d, nCycle + 1, nMax, lLogger));
                    }

                }
                catch (System.Exception excpt)
                {
                    //Console.WriteLine(excpt.Message);
                    lLogger.ErrMessage += excpt.Message;
                }
            }
            return alFiles;
        }

        // рекурсивная функция по получению списка файлов
        public ArrayList GetReestrs(string sDir, int nCycle, int nMax, Logger_ufssprk_tools lLogger)
        {
            ArrayList alFiles = new ArrayList();
            try
            {
                alFiles = DirSearch(sDir, nCycle, nMax, lLogger);
                foreach (string f in Directory.GetFiles(sDir))
                {
                    alFiles.Add(f);
                }

            }
            catch (System.Exception excpt)
            {
                // Console.WriteLine(excpt.Message);
                lLogger.ErrMessage += excpt.Message;
            }
            return alFiles;
        }


        public string Money_ToStr(decimal nMoney)
        {
            string txtResult = "";
            txtResult = nMoney.ToString("N2").Replace(".", " руб. ");
            txtResult = txtResult.Replace(",", " руб. ") + " коп.";

            return txtResult;
        }

        public string Money_ToStr(double nMoney)
        {
            string txtResult = "";
            txtResult = nMoney.ToString("N2").Replace(".", " руб. ");
            txtResult = txtResult.Replace(",", " руб. ") + " коп.";

            return txtResult;
        }

        public string ReplaceSudPrikazStartSymbol(string txtNomID, char cSymbol)
        {
            if ((txtNomID.ToUpper().StartsWith("СП")) && (txtNomID.Length > 2) && (!txtNomID[2].Equals(cSymbol)))
            {
                txtNomID = "СП" + cSymbol + txtNomID.Substring(2);
            }
            else
            {   // и наоборот - если пробел был, то попробовать его убрать
                if ((txtNomID.ToUpper().StartsWith("СП" + cSymbol)) && (txtNomID.Length > 3))
                {
                    txtNomID = "СП" + txtNomID.Substring(3);
                }
            }
            return txtNomID;
        }

        

        public string GetTablename(string txtPath, int nExtLength)
        {
            string res = "";
            if (txtPath.Length > nExtLength)
            {
                res = txtPath.Substring(0, txtPath.Length - nExtLength);
                res = res.Substring(res.LastIndexOf("\\") + 1).Trim();
            }
            
            return res;
        }

        public string GetFileDir(string txtPath, int nExtLength)
        {
            string res = "";

            if (txtPath.Length > nExtLength)
            {
                res = txtPath.Substring(0, txtPath.Length - nExtLength);
                res = res.Substring(res.LastIndexOf("\\") + 1).Trim();
                res = txtPath.Substring(0, txtPath.Length - res.Length - nExtLength).Trim();
            }
            return res;
        }

        public string RemoveDoubleSpaces(string txtString, int iMaxIter)
        {

            int i = 0;
            while (txtString.IndexOf("  ") != -1)
            {
                txtString = txtString.Replace("  ", " ");
                i++;
                if (i > iMaxIter)
                {
                    break;
                }
            }
            return txtString;
        }

        public string[] parseFIO(string txtFIO, out string txtErrMessage)
        {
            txtErrMessage = "";
            string[] Names;

            try
            {
                // надо вытащить из FIOVK отдельно Ф, И и О
                int i = 0;
                if (txtFIO.Trim() != "")
                {
                    txtFIO = RemoveDoubleSpaces(txtFIO, 200);
                    Names = txtFIO.Split(' ');
                }
                else
                {
                    Names = new string[] { "", "", "" };
                }
            }
            catch (Exception ex)
            {
                txtErrMessage += "Ошибка при попытке разбить строку ФИО на 3 части. Message: " + ex.Message + "Source: " + ex.Source;
                Names = new string[] { "", "", "" };
            }

            return Names;

        }



        public bool ChangeByte(string filename, byte Value, int position, Logger_ufssprk_tools lLogger)
        {
            BinaryReader dataOut;
            BinaryWriter dataIn;
            FileStream fs;
            try
            {
                fs = new FileStream(filename, FileMode.Open);
                dataOut = new BinaryReader(fs);
            }
            catch (FileNotFoundException exc)
            {
                lLogger.ErrMessage += "Ошибка приложения. Файл не найден! Message: " + exc.ToString();
                return false;
            }

            byte[] masBytes = dataOut.ReadBytes(Convert.ToInt32(fs.Length));
            dataOut.Close();
            fs.Close();
            fs.Dispose();

            if (masBytes[position - 1] != Value)
            {
                masBytes[position - 1] = Value;
                try
                {
                    fs = new FileStream(filename, FileMode.Create);
                    dataIn = new BinaryWriter(fs);
                }
                catch (FileNotFoundException exc)
                {
                    lLogger.ErrMessage += "Ошибка приложения. Файл не найден! Message: " + exc.ToString();
                    return false;
                }
                dataIn.Seek(0, SeekOrigin.Begin);
                dataIn.Write(masBytes);
                dataIn.Close();
                fs.Close();
                fs.Dispose();
                return true;

            }
            else return true;
        }

        public DateTime GetDateFromSberFormatName(string txtRevString, int nYear)
        {
            DateTime res;


            char[] monthCodes = new char[] {' ', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C' };
            Dictionary <char, int> dMonthCodes = new Dictionary<char,int>();
            for(int i = 1; i<monthCodes.Length; i++)
                dMonthCodes.Add(monthCodes[i], i);
            
            string txtDateIsh = "";
            if (txtRevString.Length >= 3) // первый символ - R
            {
                string txtMonthCode = "01";
                if(dMonthCodes.ContainsKey(txtRevString[2]))
                    txtMonthCode = Convert.ToString(dMonthCodes[txtRevString[2]]);

                txtDateIsh = txtRevString.Substring(0, 2) + '.' + txtMonthCode + '.' + nYear.ToString();
            }

            if (!DateTime.TryParse(txtDateIsh, out res))
            {
                res = DateTime.MinValue;
            }


            return res;
        }

        public DateTime GetDateFromReverseString(string txtRevString)
        {
            DateTime res;

            string txtDateIsh = "";
            if (txtRevString.Length >= 8) // первый символ - R
            {
                txtDateIsh = txtRevString.Substring(6, 2) + '.' + txtRevString.Substring(4, 2) + '.' + txtRevString.Substring(0, 4);
            }

            if (!DateTime.TryParse(txtDateIsh, out res))
            {
                res = DateTime.MinValue;
            }


            return res;
        }
    }

    // класс для работы с БД ПК ОСП и прикладных МВВ функций
    class PKOSP_mvv
    {
        // These are the Win32 error code for file not found or access denied.
        const int ERROR_FILE_NOT_FOUND = 2;
        const int ERROR_ACCESS_DENIED = 5;

        // класс и номер  лога будет передаваться прямо в каждую из функций непосредственно
        // а если передан 0 - то лог пишется куда-то (пока никуда)

        public PKOSP_mvv()
        {
            // пока вобще не готов написать что это за класс будет
        }


        public bool InsertPersPensXmlRow(XmlTextWriter xmlWriter, DataRow row, Logger_ufssprk_tools lLogger)
        {
            try
            {
                decimal nID = 0;
                string txtID = Convert.ToString(row["ext_request_id"]);
                if (!Decimal.TryParse(txtID, out nID))
                {
                    nID = -1;
                }

                decimal nIP_ID = 0;
                string txtIP_ID = Convert.ToString(row["ip_id"]);
                if (!Decimal.TryParse(txtIP_ID, out nIP_ID))
                {
                    nIP_ID = -1;
                }


                bool bGoodZaprDate = false;
                DateTime dtDate = DateTime.Today;
                string txtDatZapr = Convert.ToString(row["DATZAPR"]);
                if (DateTime.TryParse(txtDatZapr, out dtDate)) bGoodZaprDate = true;

                decimal nSpi = 0;
                string txtNomspi = Convert.ToString(row["spi_id"]).Trim();
                Decimal.TryParse(txtNomspi, out nSpi);

                string txtSpi = Convert.ToString(row["fio_spi"]).Trim();
                string txtHSpi = Convert.ToString(row["h_spi"]).Trim();
                string txtNomip = Convert.ToString(row["nomip"]).Trim();


                bool bGoodRiseDate = false;
                DateTime dtRiseDate = DateTime.Today;
                string txtRiseDate = Convert.ToString(row["ip_risedate"]);
                if (DateTime.TryParse(txtRiseDate, out dtRiseDate)) bGoodRiseDate = true;

                int nIdType = 0;
                string txtIdType = Convert.ToString(row["id_type"]);
                Int32.TryParse(txtIdType, out nIdType);

                string txtIdNumber = Convert.ToString(row["id_number"]);

                bool bGoodIdDate = false;
                DateTime dtIdDate = DateTime.Today;
                string txtIdDate = Convert.ToString(row["id_date"]);
                if (DateTime.TryParse(txtIdDate, out dtIdDate)) bGoodIdDate = true;

                string txtIdSubjectType = Convert.ToString(row["id_subject_type"]);

                double nIdSum = 0;
                string txtIdSum = Convert.ToString(row["id_sum"]).Trim();
                Double.TryParse(txtIdSum, out nIdSum);

                double nRestDebtSum = 0;
                string txtRestDebtSum = Convert.ToString(row["ip_rest_debtsum"]).Trim();
                Double.TryParse(txtRestDebtSum, out nRestDebtSum);

                string txtDebtorName = Convert.ToString(row["FIOVK"]);
                string txtDebtorAdr = Convert.ToString(row["ADDR"]);

                bool bGoodBordD = false;
                DateTime dtBornDate = DateTime.MaxValue;
                string txtBornDate = Convert.ToString(row["DATROZHD"]);
                if(DateTime.TryParse(txtBornDate, out dtBornDate)) bGoodBordD = true;
                else return false; // пока делаем так - т.к. не понятно как писать сведения о ДУЛ + Год рождения 

                bool bGoodBordYear = false;
                int nGod = 0;
                string txtGod = Convert.ToString(row["GOD"]);
                if(Int32.TryParse(txtGod, out nGod)) bGoodBordYear = true;

                string txtDebtorBirthPlace = Convert.ToString(row["debtor_birthplace"]);



                if ((nID > 0) && (nIP_ID > 0) && bGoodBordD && bGoodIdDate && bGoodRiseDate && bGoodZaprDate
                    && (txtIdNumber.Length > 0)
                     && (txtIdSubjectType.Length > 0)
                      && (txtDebtorName.Length > 0)
                       && (txtDebtorAdr.Length > 0)
                        && (txtDebtorBirthPlace.Length > 0)
                         && (nSpi > 0)
                          && (txtSpi.Length > 0)
                           && (txtHSpi.Length > 0)
                    )// проверяем что есть обязательные поля
                {
                    xmlWriter.WriteStartElement("Query");
                    xmlWriter.WriteAttributeString("Key", nID.ToString());
                    xmlWriter.WriteAttributeString("DocDate", dtDate.ToShortDateString());
                    xmlWriter.WriteAttributeString("SPI", nSpi.ToString());
                    xmlWriter.WriteAttributeString("SPIFio", cutEnd(txtSpi, 300));
                    xmlWriter.WriteAttributeString("SPIPost", "11-3-4-105"); // код должности СПИ 11-3-4-105
                    xmlWriter.WriteAttributeString("ChSPIFio", cutEnd(txtHSpi, 300));
                    xmlWriter.WriteAttributeString("ChSPIPost", "11-1-3-084"); // код должности ССП 11-1-3-084
                    xmlWriter.WriteAttributeString("AnsDate", dtDate.AddDays(7).ToShortDateString()); // срок ответа - 7 дней от запроса

                    // пишем внутрь Query контейнер ИП
                    xmlWriter.WriteStartElement("IP");
                    xmlWriter.WriteAttributeString("Key", nIP_ID.ToString());
                    xmlWriter.WriteAttributeString("IPNum", cutEnd(txtNomip, 30));
                    xmlWriter.WriteAttributeString("IPDate", dtRiseDate.ToShortDateString());
                    xmlWriter.WriteAttributeString("IPName", "Исполнительное производство");
                    xmlWriter.WriteAttributeString("IDNum", cutEnd(txtIdNumber, 30));
                    xmlWriter.WriteAttributeString("IDDate", dtIdDate.ToShortDateString());
                    xmlWriter.WriteAttributeString("IDSubjName", cutEnd(txtIdSubjectType, 300));
                    xmlWriter.WriteAttributeString("IDSum", nIdSum.ToString("F2").Replace(',', '.'));
                    xmlWriter.WriteAttributeString("IPDebt", nRestDebtSum.ToString("F2").Replace(',', '.'));
                    xmlWriter.WriteAttributeString("DebtorType", "2"); // Тип должника: ЮЛ=1/ ФЛ=2/ индивидуальный предприниматель=3
                    xmlWriter.WriteAttributeString("DebtorName", cutEnd(txtDebtorName, 1000));
                    xmlWriter.WriteAttributeString("DebtorAdr", cutEnd(txtDebtorAdr, 300));

                    // далее идет вилка по обязательной дате рождения
                    // но т.к. нет описания и примера по контейнеру Сведения со сведениями о ДУЛ, то такой вариант сейчас не будем программировать
                    // или если ее нет, то нужно год + ДУЛ
                    if (bGoodBordD)
                        xmlWriter.WriteAttributeString("DebtorBirthDate", dtBornDate.ToShortDateString()); // Является обязательным реквизитом  при отсутствии года рождения
                    else if (bGoodBordYear)
                    {
                        // Является обязательным реквизитом при отсутствии Даты Рождения. В этом случае в контейнере Сведения должны содержаться сведения о документе УДЛ

                        //xmlWriter.WriteAttributeString("DebtorBirthYear", nGod.ToString("D4"));

                        // дальше пишем ДУЛ


                        // данные о ДУЛ взять по аналогии со Сбером
                        return false; // пока делаем так
                    }
                    else return false;

                    xmlWriter.WriteAttributeString("DebtorBirthPlace", cutEnd(txtDebtorBirthPlace, 1000));
                    xmlWriter.WriteAttributeString("SPI", nSpi.ToString());
                    xmlWriter.WriteAttributeString("SPIFio", cutEnd(txtSpi, 300));
                    xmlWriter.WriteEndElement(); // end IP
                    xmlWriter.WriteEndElement(); // end Query
                }
                else
                {
                    
                    lLogger.ErrMessage += " .\n Ошибка. Запрос не был отправлен т.к. отсутствуют обязательные поля. nID = " + nID.ToString();
                    lLogger.WriteLLog(" .\n Ошибка. Запрос не был отправлен т.к. отсутствуют обязательные поля. nID = " + nID.ToString());
                    return false; // если нет обязательных полей
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                return false;
            }
            return true;
        }

        public bool InsertReqRowToSberXML(string constrGIBDD, DataRow row, decimal nOsp, string txtSberXMlFile, string txtXmlFullPath, XmlTextWriter writer, Logger_ufssprk_tools lLogger)
        {
            // TODO: доработать с серией и номером паспорта:
            // если номер пустой - то вобще ничего не писать про паспорт
            // если номер 10 символов, то первые 4 серия, остальные 6 - номер
            // если серия 2 цифры, а номер 8, то первые 2 из номера склеить с серией - это серия, остаток от номера - номер
            // если серия 4 номер 6 - все ок
            // все остальное... не вставлять, или что, а если советский паспорт?
            OleDbConnection conGIBDD;
            conGIBDD = new OleDbConnection(constrGIBDD);

            DateTime DatZapr = DateTime.Today;
            Decimal nLitzDolg = 2;
            DateTime dtDate, dtDatrozhd;
            Decimal nYear = 0;
            Double sum = 0;
            string txtDateBornD = "";

            int nAgreementID = Convert.ToInt32(row["AGREEMENT_ID"]); // тут будет только 10 (Сбербанк)
            // все они пригодятся только если сообщение об ошибке писать нужно будет
            string txtAgreementCode = "10";
            string txtAgentCode = "Б_СБЕР";
            string txtAgentDeptCode = "8628";



            bool bNoYearBorn = false;
            int nBirthYear = 0;

            File_funcs ff = new File_funcs();
            string txtErrMessage;


            try
            {
                // TODO: решить вопрос с годом
                if (!Int32.TryParse(Convert.ToString(row["GOD"]), out nBirthYear))
                {
                    nBirthYear = 0;
                }

                txtDateBornD = Convert.ToString(row["DATROZHD"]).Trim();
                dtDatrozhd = DateTime.MaxValue;

                // получить дату рождения и год рождения
                if (DateTime.TryParse(txtDateBornD, out dtDate))
                {
                    if (nBirthYear == 0) nBirthYear = dtDate.Year; // если не был установлен г.р., то берем из даты
                    dtDatrozhd = dtDate;
                }
                else
                {
                    dtDatrozhd = DateTime.MaxValue;
                    dtDate = DateTime.MaxValue;
                    if (nBirthYear == 0)
                    {
                        bNoYearBorn = true; // проблемы с годом рождения
                    }
                }


                if (!bNoYearBorn)// если нет косяков ни по ИНН ни по Году Рождения
                {

                    writer.WriteStartElement("Zapros");

                    // <File_Name>
                    writer.WriteStartElement("File_Name");
                    writer.WriteString(cutEnd(txtSberXMlFile, 12));
                    writer.WriteEndElement();

                    // <Req_ID>
                    writer.WriteStartElement("Req_ID");
                    writer.WriteString(cutEnd(Convert.ToString(row["ZAPROS"]).Trim(), 14));
                    writer.WriteEndElement();


                    // <User_ID>
                    writer.WriteStartElement("User_ID");
                    writer.WriteString(cutEnd(Convert.ToString(row["USER_ID"]).Trim(), 14));
                    writer.WriteEndElement();

                    // <Req_Date>
                    writer.WriteStartElement("Req_Date");
                    if (!(DateTime.TryParse(Convert.ToString(row["DATZAPR"]), out DatZapr)))
                    {
                        DatZapr = DateTime.Today;
                    }
                    writer.WriteString(DatZapr.ToShortDateString());
                    writer.WriteEndElement();

                    // <Req_Time>
                    writer.WriteStartElement("Req_Time");
                    writer.WriteString("00:00");
                    writer.WriteEndElement();

                    // <Req_Type>
                    writer.WriteStartElement("Req_Type");
                    writer.WriteString("1");
                    writer.WriteEndElement();

                    // <OSB_List>
                    writer.WriteStartElement("OSB_List");
                    writer.WriteString("ALL");
                    writer.WriteEndElement();

                    // <Prs_Dep>
                    writer.WriteStartElement("Prs_Dep");
                    writer.WriteString(cutEnd(Convert.ToString(row["PRS_DEP"]).Trim(), 5));
                    // string txtDiv = "100" + Convert.ToInt32(GetOSP_Num()).ToString("D2");
                    writer.WriteEndElement();

                    // <FIO_SPI>
                    writer.WriteStartElement("FIO_SPI");
                    writer.WriteString(cutEnd(Convert.ToString(row["FIO_SPI"]).Trim(), 100));
                    writer.WriteEndElement();

                    // <FIO_SSPI>
                    writer.WriteStartElement("FIO_SSPI");
                    writer.WriteString(cutEnd(Convert.ToString(row["FIO_SSPI"]).Trim(), 100));
                    writer.WriteEndElement();

                    // <Isp_Num>
                    writer.WriteStartElement("Isp_Num");
                    writer.WriteString(cutEnd(Convert.ToString(row["DOC_NUM"]).Trim(), 40));
                    writer.WriteEndElement();

                    // <Isp_Sum>
                    writer.WriteStartElement("Isp_Sum");
                    if (!(Double.TryParse(Convert.ToString(row["SUMMA"]), out sum)))
                    {
                        sum = 0;
                    }
                    writer.WriteString(sum.ToString("F2").Replace(',', '.'));
                    writer.WriteEndElement();

                    // <Isd_Num>
                    writer.WriteStartElement("Isd_Num");
                    writer.WriteString(cutEnd(Convert.ToString(row["ID_NUM"]).Trim(), 40));
                    writer.WriteEndElement();

                    // <Isd_Date>
                    writer.WriteStartElement("Isd_Date");
                    if (!(DateTime.TryParse(Convert.ToString(row["ID_DATE"]), out DatZapr)))
                    {
                        DatZapr = DateTime.Today;
                    }
                    writer.WriteString(DatZapr.ToShortDateString());
                    writer.WriteEndElement();

                    string txtFIO = Convert.ToString(row["FIOVK"]).Trim();
                    string[] Names;
                    Names = ff.parseFIO(txtFIO, out txtErrMessage);

                    // Dolg_Surname
                    writer.WriteStartElement("Dolg_Surname");
                    if (Names.Length > 0)
                        writer.WriteString(cutEnd(Convert.ToString(Names[0]), 30));
                    else writer.WriteString("");
                    writer.WriteEndElement();

                    // Dolg_Name
                    writer.WriteStartElement("Dolg_Name");
                    if (Names.Length > 1)
                        writer.WriteString(cutEnd(Convert.ToString(Names[1]), 30));
                    else writer.WriteString("");
                    writer.WriteEndElement();

                    // Dolg_Secondname
                    writer.WriteStartElement("Dolg_Secondname");
                    if (Names.Length > 2)
                    {
                        // все что осталось - отчетсво. склеиваем, обрезаем до 30 символов и в базу
                        string txtOt = "";

                        for (int j = 2; j < Names.Length; j++)
                        {
                            txtOt += Names[j] + ' ';
                        }

                        writer.WriteString(cutEnd(txtOt.Trim(), 30));


                    }
                    else writer.WriteString("");
                    writer.WriteEndElement();


                    // Dolg_Birth_Year
                    writer.WriteStartElement("Dolg_Birth_Year");
                    writer.WriteString(nBirthYear.ToString("D4"));
                    writer.WriteEndElement();

                    // Dolg_Addr
                    writer.WriteStartElement("Dolg_Addr");
                    string txtAddr = cutEnd(Convert.ToString(row["ADDR"]).Trim(), 200);
                    writer.WriteString(txtAddr);
                    writer.WriteEndElement();

                    // Dolg_Birth_Day
                    writer.WriteStartElement("Dolg_Birth_Day");
                    writer.WriteString(dtDatrozhd.ToShortDateString());
                    writer.WriteEndElement();


                    // Dolg_Place_Birth
                    writer.WriteStartElement("Dolg_Place_Birth");
                    writer.WriteString(cutEnd(Convert.ToString(row["debtor_birthplace"]).Trim(), 100));
                    writer.WriteEndElement();

                    // сведения о паспорте (проверить что они есть вообще)
                    string txtNumDoc = cutEnd(Convert.ToString(row["NumDoc"]).Trim(), 50);
                    string txtSerDoc = cutEnd(Convert.ToString(row["SerDoc"]).Trim(), 50);

                    string txtFioDoc = cutEnd(Convert.ToString(row["FioDoc"]).Trim(), 50);

                    DateTime dtDateDoc;
                    if (!(DateTime.TryParse(Convert.ToString(row["DateDoc"]), out dtDateDoc)))
                    {
                        dtDateDoc = Convert.ToDateTime("01.01.1900");
                    }

                    // записать паспортные данные только если они непустые обязательными полями
                    // 20150224 - Гусев сказал что дата выдачи необязательная - теперь можно писать пустую
                    //if (!dtDateDoc.Equals(Convert.ToDateTime("01.01.1900")) && txtNumDoc.Length > 0 && txtFioDoc.Length > 0)

                    // 20150225 на FIO_DOC тоже забъем, хватит серии и номера им
                    // if (txtNumDoc.Length > 0 && txtFioDoc.Length > 0)
                    if (txtNumDoc.Length > 0)

                    {
                        // проверить длину поля серия
                        if (txtSerDoc.Length.Equals(0))
                        {
                            // если номер 10 символов, то первые 4 серия, остальные 6 - номер
                            if (txtNumDoc.Length.Equals(10))
                            {
                                txtSerDoc = txtNumDoc.Substring(0, 4);
                                txtNumDoc = txtNumDoc.Substring(4);
                            }
                        }
                        else if (txtSerDoc.Length.Equals(2))
                        {
                            // если серия 2 цифры, а номер 8, то первые 2 из номера склеить с серией - это серия, остаток от номера - номер
                            if (txtNumDoc.Length.Equals(8))
                            {
                                txtSerDoc += txtNumDoc.Substring(0, 2);
                                txtNumDoc = txtNumDoc.Substring(2);
                            }
                        }

                        // если серия 4 номер 6 - все ок
                        // все остальное... не вставлять, или что, а если советский паспорт?
                        // как показывает практика - советские паспорта тоже как 4/6 вносятся в карточку ИП
                        if (txtSerDoc.Length.Equals(4) && txtNumDoc.Length.Equals(6))
                        {
                            // TypeDoc - О
                            writer.WriteStartElement("TypeDoc");
                            int nTypeDoc = 0;
                            string txtTypeDoc = Convert.ToString(row["TypeDoc"]).Trim();
                            Int32.TryParse(txtTypeDoc, out nTypeDoc);
                            writer.WriteString(nTypeDoc.ToString());
                            writer.WriteEndElement();

                            //SerDoc 50
                            writer.WriteStartElement("SerDoc");
                            writer.WriteString(cutEnd(txtSerDoc.Trim(), 50));
                            writer.WriteEndElement();

                            //NumDoc 50 - О
                            writer.WriteStartElement("NumDoc");
                            writer.WriteString(txtNumDoc);
                            writer.WriteEndElement();

                            //DateDoc 01.01.1900 - О
                            // 20150224 - Гусев сказал что дата выдачи необязательная - теперь можно писать пустую
                            writer.WriteStartElement("DateDoc");
                            if (!dtDateDoc.Equals(Convert.ToDateTime("01.01.1900")))
                            {
                                writer.WriteString(dtDateDoc.ToShortDateString());
                            }
                            writer.WriteEndElement();

                            //CodeDep
                            writer.WriteStartElement("CodeDep");
                            writer.WriteString(cutEnd(Convert.ToString(row["CodeDep"]).Trim(), 50));
                            writer.WriteEndElement();

                            // FioDoc - О
                            writer.WriteStartElement("FioDoc");
                            writer.WriteString(txtFioDoc);
                            writer.WriteEndElement();
                        }
                    }


                    writer.WriteEndElement();
                    return true;

                }
                else // если есть косяки по году рождения или ИНН
                {
                    if (bNoYearBorn)
                    {
                        string txtID = "";
                        if(row.Table.Columns.Contains("ZAPROS")){
                            txtID = Convert.ToString(row["ZAPROS"]);
                        }
                            
                        string txtMessage = "Запрос не был отправлен контрагентам, так как у должника - физ. лица не заполнены ни год ни дата рождения.";
                        if (txtID.Length > 0) txtMessage = txtID + ": " + txtMessage;
                        lLogger.WriteLLog(txtMessage);
                    }

                    //decimal nStatus = 15;
                    //string txtID = Convert.ToString(row["ZAPROS"]).Trim();
                    //Decimal nID = 0;
                    //if (!Decimal.TryParse(txtID, out nID))
                    //{
                    //    nID = -1;
                    //}

                    //txtResponse += " ZAPROS = " + txtID + "\n";
                    //// TODO: получить номер запроса по nID


                    //if (nID > 0)
                    //{
                    //    // вставляем ответ для каждого контрагента - то есть для всех банков
                    //    // foreach (string txtOrg_id in Legal_List)
                    //    // {
                    //        // по коду организации узнать номер согашения

                    //        //decimal nOrg_id = Convert.ToDecimal(txtOrg_id);
                    //        // получить Agreement_ID по номеру контрагента
                    //        decimal nAgr_id = nAgreementID;

                    //       //decimal nAgr_id = GetAgr_by_Org(nOrg_id);


                    //        // получить nAgent_id, nAgent_dept_id
                    //        decimal nAgent_id = GetAgent_ID(nAgr_id);
                    //        decimal nAgent_dept_id = GetAgentDept_ID(nAgr_id);

                    //        // Вставка ответа для кред. организации с сообщением об ошибке в интерфейсную таблицу

                    //        // вытащить параметры - пакет, agent_agreement, agent_dept_code, agent_code, enity_name
                    //        txtAgreementCode = GetAgreement_Code(nAgr_id);
                    //        txtAgentCode = GetAgent_Code(nAgr_id);
                    //        txtAgentDeptCode = GetAgentDept_Code(nAgr_id);


                    //        // если нового пакета еще не сделали - то делаем
                    //        if (nErrorPackID == 0)
                    //        {
                    //            //nErrorPackID = ID_CreateDX_PACK_I(con, 70, nAgent_id, nAgent_dept_id, nAgr_id, "", txtAgentCode, txtAgreementCode, txtAgentDeptCode);
                    //            //WritePackLog(con, nErrorPackID, "Этот пакет создан для входящих ответов, которые автоматически созданы при выгрузке некорректных запросов (нет даты рождения или ИНН).Пакет пустой и служит индикатором того, что после обработки интерфейсных таблиц должен появиться еще такой пакет на статусе новый.");
                    //            // TODO: вставить новый лог с ответами
                    //            nErrorPackID = CreateLLog(conGIBDD, 1, -1, txtAgreementCode, 0, "Этот пакет создан для входящих ответов, которые автоматически созданы при выгрузке некорректных запросов (нет даты рождения или ИНН).\n");
                    //        }

                    //        //string txtEntityName = GetLegal_Name(nOrg_id);
                    //        string txtEntityName = "Сбербанк России ОАО";


                    //        // тут вставляется ОТВЕТ - причем отрицательный

                    //        InsertResponseIntTable(con, nID, txtResponse, DateTime.Now, nStatus, nOrg_id, ref iRewriteState, nErrorPackID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName);

                    //        // пешем в лог что запрос не выгружен
                    //        WriteLLog(conGIBDD, nErrorPackID, txtResponse);
                    //        // сделать ++ для количества запросов в логе пакета
                    //        AppendLLogCount(conGIBDD, nErrorPackID, 1);

                    //        // теперь нужно не забыть поправить запрос, что он уже выгружен...
                    //        // но по факту обновление ведь идет потом, так что там нужно придумать особый порядок

                    //        // тут вставляется ОТВЕТ - причем отрицательный
                    //        //InsertZaprosTo_PK_OSP(con, nID, txtResponse, DateTime.Now, nStatus, nOrg_id, ref iRewriteState);
                    //    // }
                    //}

                    return false;

                }

            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                    lLogger.ErrMessage +=  "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
                return false;
            }
            catch (Exception ex)
            {
                //if (DBFcon != null) DBFcon.Close();
                // MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                return false;
            }

        }

        public void CreateToFind_DBF(bool bVFP, string m_fullpath, string tofind_name, Logger_ufssprk_tools lLogger)
        {
            OleDbConnection DBFcon = null;
            try
            {
                DBFcon = new OleDbConnection();
                string DBF_Table_Query = "";
                if (bVFP)
                {
                    DBFcon.ConnectionString = string.Format("Provider=VFPOLEDB.1;Data Source=" + m_fullpath + ";Mode=ReadWrite;Collating Sequence=RUSSIAN");
                    DBF_Table_Query = "CREATE TABLE " + tofind_name + " FREE CODEPAGE = 866 (NOMOSP numeric(1,0) NOT NULL,LITZDOLG numeric(0,0) NOT NULL,FIOVK char(50) NOT NULL,ZAPROS char(25) NOT NULL,GOD numeric(3,0) NOT NULL,NOMSPI numeric(2,0) NOT NULL,NOMIP numeric(9,0) NOT NULL,SUMMA numeric(12,2) NOT NULL,VIDVZISK char(100) NOT NULL,INNORG char(12) NOT NULL,DATZAPR date NOT NULL,ADDR char(120) NOT NULL,FLZPRSPI numeric(0,0) NOT NULL,DATZAPR1 date NOT NULL,DATZAPR2 date NOT NULL,FL_OKON numeric(0,0) NOT NULL,OSNOKON char(250) NOT NULL, DATROZHD date NOT NULL)";
                    //DBF_Table_Query = "CREATE TABLE " + tofind_name + " FREE CODEPAGE = 866 (NOMOSP numeric(1,0) NOT NULL,LITZDOLG numeric(0,0) NOT NULL,FIOVK char(254) NOT NULL,ZAPROS char(25) NOT NULL,GOD numeric(3,0) NOT NULL,NOMSPI numeric(13,0) NOT NULL,NOMIP numeric(9,0) NOT NULL,SUMMA numeric(16,2) NOT NULL,VIDVZISK char(254) NOT NULL,INNORG char(12) NOT NULL,DATZAPR date NOT NULL,ADDR char(254) NOT NULL,FLZPRSPI numeric(0,0) NOT NULL,DATZAPR1 date NOT NULL,DATZAPR2 date NOT NULL,FL_OKON numeric(0,0) NOT NULL,OSNOKON char(250) NOT NULL, DATROZHD date NOT NULL)";
                    //DBF_Table_Query = "CREATE TABLE " + tofind_name + " FREE CODEPAGE = 866 (NOMOSP numeric(1,0),LITZDOLG numeric(0,0),FIOVK char(50),ZAPROS char(25),GOD numeric(3,0),NOMSPI numeric(2,0),NOMIP numeric(9,0),SUMMA numeric(13,2),VIDVZISK char(100),INNORG char(12),DATZAPR date,ADDR char(120),FLZPRSPI numeric(0,0),DATZAPR1 date,DATZAPR2 date,FL_OKON numeric(0,0),OSNOKON char(250))";
                }
                else
                {
                    DBFcon.ConnectionString = string.Format("Provider=Microsoft.Jet.OLEDB.4.0;Extended Properties=dBASE IV;Data Source={0}", m_fullpath);
                    //DBFcon.ConnectionString = string.Format("Provider=Microsoft.Jet.OLEDB.4.0;Extended Properties=dBASE III;Data Source={0}", m_fullpath);
                    DBF_Table_Query = "CREATE TABLE " + tofind_name + " (NOMOSP numeric(2,0),LITZDOLG numeric(1,0),FIOVK char(50),ZAPROS char(25),GOD numeric(4,0),NOMSPI numeric(3,0),NOMIP numeric(10,0),SUMMA numeric(14,2),VIDVZISK char(100),INNORG char(12),DATZAPR date,ADDR char(120),FLZPRSPI numeric(1,0),DATZAPR1 date,DATZAPR2 date,FL_OKON numeric(1,0),OSNOKON char(250), DATROZHD date)";
                }
                DBFcon.Open();
                OleDbCommand cmd = new OleDbCommand(DBF_Table_Query, DBFcon);
                cmd.ExecuteNonQuery();
                cmd.Dispose();
                DBFcon.Close();
                DBFcon.Dispose();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage +="\nОшибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }

            if (DBFcon != null && DBFcon.State == System.Data.ConnectionState.Open)
            {
                DBFcon.Close();
                DBFcon.Dispose();
            }
        }

        // закомментировал т.к. 2 раза объявлено
        /*
        public string GetAgreement_Code(OleDbConnection con, Decimal nAgreementCode, Logger_ufssprk_tools lLogger)
        {
            string res = "";
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select first 1 AGREEMENT_CODE from mvv_agent_agreement agr where agr.id = " + nAgreementCode.ToString(), con, tran);
                res = Convert.ToString(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return res;
        }
        */ 
        public Decimal GetAgr_by_Org(OleDbConnection con, Decimal nOrgCode, Logger_ufssprk_tools lLogger)
        {
            Decimal res = -1;
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select outer_agreement_id from sendlist_dbt_request_type where sndl_contr_id = " + nOrgCode.ToString(), con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return res;
        }

        public decimal GetAgent_ID(OleDbConnection con, Decimal nCode, Logger_ufssprk_tools lLogger)
        {
            decimal res = 0;
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select first 1 AGENT_ID from mvv_agent_agreement agr join mvv_agent agent on agr.agent_id = agent.id where agr.id = " + nCode.ToString(), con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return res;
        }

        public decimal GetAgentDept_ID(OleDbConnection con,  Decimal nCode, Logger_ufssprk_tools lLogger)
        {
            decimal res = 0;
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select first 1 AGENT_DEPT_ID from mvv_agent_agreement agr join mvv_agent_dept agent on agr.agent_dept_id = agent.exad_id where agr.id = " + nCode.ToString(), con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return res;
        }


        public String GetAgreement_Code(OleDbConnection con, Decimal nAgreementCode, Logger_ufssprk_tools lLogger)
        {
            String res = "";
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select first 1 AGREEMENT_CODE from mvv_agent_agreement agr where agr.id = " + nAgreementCode.ToString(), con, tran);
                res = Convert.ToString(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return res;
        }

        public String GetAgent_Code(OleDbConnection con, Decimal nCode, Logger_ufssprk_tools lLogger)
        {
            String res = "";
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select first 1 ORGANIZATION_CODE from mvv_agent_agreement agr join mvv_agent agent on agr.agent_id = agent.id where agr.id = " + nCode.ToString(), con, tran);
                res = Convert.ToString(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return res;
        }

        public String GetAgentDept_Code(OleDbConnection con, Decimal nCode, Logger_ufssprk_tools lLogger)
        {
            String res = "";
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select first 1 DEPARTAMENT_CODE from mvv_agent_agreement agr join mvv_agent_dept agent on agr.agent_dept_id = agent.exad_id where agr.id = " + nCode.ToString(), con, tran);
                res = Convert.ToString(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return res;
        }

        // вставка строчки запроса в Крединую Организацию в DBF файл
        public bool InsertRowToDBF(OleDbConnection DBFcon, OleDbConnection con, DataRow row, decimal nOsp, decimal bOKON, decimal bZPRSPI, DateTime DatZapr1_param, DateTime DatZapr2_param, string tofind_name, bool bRegTable, ref decimal nErrorPackID, string[] Legal_List, Logger_ufssprk_tools lLogger, Logger_ufssprk_tools lErrLogger)
        {
            OleDbCommand m_cmd = null;
            DateTime DatZapr = DateTime.Today;
            Decimal nLitzDolg = 2;
            DateTime dtDate, dtDatrozhd;
            Decimal nYear = 0;
            Double sum = 0;
            string txtDateBornD = "";
            string txtLitzDolg, txtNameDolg, txtZapros, txtNomspi, txtNOMIP, txtNPP, txtVIDVZISK, txtInnOrg, txtAddr, txtOsnokon;

            int iRewriteState = 2;

            // int nAgreementID = Convert.ToInt32(row["AGREEMENT_ID"]); // тут будет только 30 (Возрождение) - надо потом из списка вытащить
            int nAgreementID = Convert.ToInt32(row["AGREEMENT_ID"]); // тут будет только 170 (Баренцбанк) - надо потом из списка вытащить
            // все они пригодятся только если сообщение об ошибке писать нужно будет
            string txtAgreementCode = "";
            string txtAgentCode = "";
            string txtAgentDeptCode = "";


            txtNomspi = "";
            int nNomspi = 0;
            bool bNoInnJur = false;
            bool bNoYearBorn = false;
            int nBirthYear = 0;

            if (DBFcon != null)
            {
                try
                {
                    dtDatrozhd = DateTime.MaxValue;
                    nLitzDolg = 1;// юр. лицо
                    txtLitzDolg = Convert.ToString(row["LITZDOLG"]).Trim();
                    if (!Decimal.TryParse(txtLitzDolg, out nLitzDolg))
                    {
                        nLitzDolg = 0;
                    }

                    txtInnOrg = Convert.ToString(row["INNORG"]).Trim();
                    if (nLitzDolg == 1)
                    {
                        if (txtInnOrg != "" && txtInnOrg.Length == 10)
                        {
                            txtInnOrg = "00" + txtInnOrg; // у юр. лиц слева добавляем 00, до 12 символов
                        }
                    }
                    txtInnOrg = cutEnd(txtInnOrg.Trim(), 12);

                    // вычислить vid_d и inn_d, если все плохо то не вставлять
                    if (bRegTable && (nLitzDolg == 1))
                    {

                        if (txtInnOrg.Length < 10)
                        {
                            bNoInnJur = true;
                        }
                        // TODO: проверить по маске что тут 10, 11, 12 цифр
                    }

                    if (nLitzDolg == 2)// если физ. лицо
                    {
                        // TODO: решить вопрос с годом
                        if (!Int32.TryParse(Convert.ToString(row["GOD"]), out nBirthYear))
                        {
                            nBirthYear = 0;
                        }

                        txtDateBornD = Convert.ToString(row["DATROZHD"]).Trim();
                        dtDatrozhd = DateTime.MaxValue;

                        // получить дату рождения и год рождения
                        if (DateTime.TryParse(txtDateBornD, out dtDate))
                        {
                            if (nBirthYear == 0) nBirthYear = dtDate.Year; // если не был установлен г.р., то берем из даты
                            dtDatrozhd = dtDate;
                        }
                        else
                        {
                            dtDatrozhd = DateTime.MaxValue;
                            dtDate = DateTime.MaxValue;
                            if (nBirthYear == 0)
                            {
                                bNoYearBorn = true; // проблемы с годом рождения
                            }
                        }


                    }

                    if (!bNoInnJur && !bNoYearBorn)// если нет косяков ни по ИНН ни по Году Рождения
                    {

                        m_cmd = new OleDbCommand();
                        m_cmd.Connection = DBFcon;

                        m_cmd.CommandText = "INSERT INTO " + tofind_name + " (NOMOSP, LITZDOLG, FIOVK, ZAPROS, GOD, NOMSPI, NOMIP, SUMMA, VIDVZISK, INNORG, DATZAPR, ADDR, FLZPRSPI, DATZAPR1, DATZAPR2, FL_OKON, OSNOKON, DATROZHD) VALUES (";

                        m_cmd.CommandText += Convert.ToString(nOsp);

                        m_cmd.CommandText += ", " + Convert.ToString(nLitzDolg);

                        txtNameDolg = cutEnd(Convert.ToString(row["FIOVK"]).Trim(), 50);
                        m_cmd.CommandText += ", '" + txtNameDolg + "'";

                        txtZapros = cutEnd(Convert.ToString(row["ZAPROS"]).Trim(), 25);
                        m_cmd.CommandText += ", '" + txtZapros + "'";

                        // TODO: тут надо брать из GOD
                        m_cmd.CommandText += ", " + Convert.ToString(nBirthYear);

                        txtNomspi = Convert.ToString(row["NOMSPI"]).Trim();
                        if (!Int32.TryParse(txtNomspi, out nNomspi))
                        {
                            nNomspi = 0;
                        }

                        m_cmd.CommandText += ", " + Convert.ToString(nNomspi);

                        txtNOMIP = Convert.ToString(row["IPNO_NUM"]).Trim(); // это номер ИП - десятичный (можно считать его порядковым)
                        Decimal nNOMIP = 0;
                        if (!Decimal.TryParse(txtNOMIP, out nNOMIP))
                        {
                            nNOMIP = 0;
                        }

                        txtNPP = Convert.ToInt32(nNOMIP).ToString();

                        m_cmd.CommandText += ", " + txtNPP;

                        if (!(Double.TryParse(Convert.ToString(row["SUMMA"]), out sum)))
                        {
                            sum = 0;
                        }

                        m_cmd.CommandText += ", " + sum.ToString("F2").Replace(',', '.');

                        txtVIDVZISK = cutEnd(Convert.ToString(row["VIDVZISK"]).Trim(), 100);
                        m_cmd.CommandText += ", '" + txtVIDVZISK + "'";

                        m_cmd.CommandText += ", '" + txtInnOrg + "'";

                        if (!(DateTime.TryParse(Convert.ToString(row["DATZAPR"]), out DatZapr)))
                        {
                            DatZapr = DateTime.Today;
                        }

                        m_cmd.Parameters.Add(new OleDbParameter("DATZAPR", OleDbType.DBDate, 0, System.Data.ParameterDirection.Input, false, ((System.Byte)(0)), ((System.Byte)(0)), "DATZAPR", System.Data.DataRowVersion.Original, DatZapr));
                        m_cmd.CommandText += ", ?";

                        txtAddr = cutEnd(Convert.ToString(row["ADDR"]).Trim(), 120);
                        m_cmd.CommandText += ", '" + txtAddr + "'";

                        m_cmd.CommandText += ", " + bZPRSPI.ToString();// FLZPRSPI

                        DatZapr1_param = DatZapr;
                        DatZapr2_param = DateTime.Today;

                        m_cmd.Parameters.Add(new OleDbParameter("DATZAPR1", OleDbType.DBDate, 0, System.Data.ParameterDirection.Input, false, ((System.Byte)(0)), ((System.Byte)(0)), "DATZAPR1", System.Data.DataRowVersion.Original, DatZapr1_param));
                        m_cmd.CommandText += ", ?";

                        m_cmd.Parameters.Add(new OleDbParameter("DATZAPR2", OleDbType.DBDate, 0, System.Data.ParameterDirection.Input, false, ((System.Byte)(0)), ((System.Byte)(0)), "DATZAPR2", System.Data.DataRowVersion.Original, DatZapr2_param));
                        m_cmd.CommandText += ", ?";

                        m_cmd.CommandText += ", " + bOKON.ToString();// Fl_OKON

                        //txtOsnokon = cutEnd(Convert.ToString(row["OSNOKON"]).Trim(), 250); - с конца 2010 года больше никакого основания окончания!!!
                        txtOsnokon = "";
                        m_cmd.CommandText += ", '" + txtOsnokon + "'";

                        m_cmd.Parameters.Add(new OleDbParameter("DATROZHD", OleDbType.DBDate, 0, System.Data.ParameterDirection.Input, false, ((System.Byte)(0)), ((System.Byte)(0)), "DATROZHD", System.Data.DataRowVersion.Original, dtDatrozhd));
                        m_cmd.CommandText += ", ?";

                        m_cmd.CommandText += ')';
                        m_cmd.ExecuteNonQuery();
                        m_cmd.Dispose();



                        //if (Convert.ToInt32(row["ID_DBTRCLS"]) == 95)
                        // если это ИП (ID_DBTRCLS = 95) - то вставить в DBF еще и запрос по Юр. лицу
                        if ((Convert.ToInt32(row["ID_DBTRCLS"]) == 95) && (txtInnOrg.Length >= 10) && (bOKON == 0))
                        {
                            m_cmd = new OleDbCommand();
                            m_cmd.Connection = DBFcon;

                            m_cmd.CommandText = "INSERT INTO " + tofind_name + " (NOMOSP, LITZDOLG, FIOVK, ZAPROS, GOD, NOMSPI, NOMIP, SUMMA, VIDVZISK, INNORG, DATZAPR, ADDR, FLZPRSPI, DATZAPR1, DATZAPR2, FL_OKON, OSNOKON, DATROZHD) VALUES (";

                            m_cmd.CommandText += Convert.ToString(nOsp);

                            nLitzDolg = 1;// юр. лицо
                            m_cmd.CommandText += ", " + Convert.ToString(nLitzDolg);

                            m_cmd.CommandText += ", '" + txtNameDolg + "'";

                            m_cmd.CommandText += ", '" + txtZapros + "'";

                            m_cmd.CommandText += ", " + Convert.ToString(nYear);

                            // m_cmd.CommandText += ", " + txtNomspi;  // нужно проверять что не пустой
                            m_cmd.CommandText += ", " + Convert.ToString(nNomspi);

                            // номип - число 5 знаков... =((
                            // придется анализировать строку и искать его

                            m_cmd.CommandText += ", " + txtNPP;

                            m_cmd.CommandText += ", " + sum.ToString("F2").Replace(',', '.');

                            m_cmd.CommandText += ", '" + txtVIDVZISK + "'";

                            m_cmd.CommandText += ", '" + txtInnOrg + "'";

                            m_cmd.Parameters.Add(new OleDbParameter("DATZAPR", OleDbType.DBDate, 0, System.Data.ParameterDirection.Input, false, ((System.Byte)(0)), ((System.Byte)(0)), "DATZAPR", System.Data.DataRowVersion.Original, DatZapr));
                            m_cmd.CommandText += ", ?";

                            m_cmd.CommandText += ", '" + txtAddr + "'";

                            m_cmd.CommandText += ", " + bZPRSPI.ToString();// FLZPRSPI

                            m_cmd.Parameters.Add(new OleDbParameter("DATZAPR1", OleDbType.DBDate, 0, System.Data.ParameterDirection.Input, false, ((System.Byte)(0)), ((System.Byte)(0)), "DATZAPR1", System.Data.DataRowVersion.Original, DatZapr1_param));
                            m_cmd.CommandText += ", ?";

                            m_cmd.Parameters.Add(new OleDbParameter("DATZAPR2", OleDbType.DBDate, 0, System.Data.ParameterDirection.Input, false, ((System.Byte)(0)), ((System.Byte)(0)), "DATZAPR2", System.Data.DataRowVersion.Original, DatZapr2_param));
                            m_cmd.CommandText += ", ?";

                            m_cmd.CommandText += ", " + bOKON.ToString();// Fl_OKON

                            m_cmd.CommandText += ", '" + txtOsnokon + "'";

                            m_cmd.Parameters.Add(new OleDbParameter("DATROZHD", OleDbType.DBDate, 0, System.Data.ParameterDirection.Input, false, ((System.Byte)(0)), ((System.Byte)(0)), "DATROZHD", System.Data.DataRowVersion.Original, dtDatrozhd));
                            m_cmd.CommandText += ", ?";

                            m_cmd.CommandText += ')';
                            m_cmd.ExecuteNonQuery();
                            m_cmd.Dispose();

                        }
                        // else - // тут надо будет менять статус запроса на Ошибка. Запрос не был отправлен (нет года рождения).
                        return true;

                    }
                    else // если есть косяки по году рождения или ИНН
                    {
                        string txtResponse = "";
                        if (bNoInnJur)
                        {
                            txtResponse += "Запрос не был отправлен контрагентам, так как некорректно заполнено поле ИНН для должника - юр. лица.";
                        }

                        if (bNoYearBorn)
                        {
                            txtResponse += "Запрос не был отправлен контрагентам, так как у должника - физ. лица не заполнены ни год ни дата рождения.";
                        }

                        decimal nStatus = 15;
                        string txtID = Convert.ToString(row["ZAPROS"]).Trim();
                        Decimal nID = 0;
                        if (!Decimal.TryParse(txtID, out nID))
                        {
                            nID = -1;
                        }

                        txtResponse += " ZAPROS = " + txtID + "\n";
                        // TODO: получить номер запроса по nID


                        if (nID > 0)
                        {
                            // вставляем ответ для каждого контрагента - то есть для всех банков
                            foreach (string txtOrg_id in Legal_List)
                            {
                                // по коду организации узнать номер согашения
                                decimal nOrg_id = Convert.ToDecimal(txtOrg_id);
                                // получить Agreement_ID по номеру контрагента
                                decimal nAgr_id = GetAgr_by_Org(con, nOrg_id, lLogger);

                                // получить nAgent_id, nAgent_dept_id
                                decimal nAgent_id = GetAgent_ID(con, nAgr_id, lLogger);
                                decimal nAgent_dept_id = GetAgentDept_ID(con, nAgr_id, lLogger);

                                // Вставка ответа для кред. организации с сообщением об ошибке в интерфейсную таблицу

                                // вытащить параметры - пакет, agent_agreement, agent_dept_code, agent_code, enity_name
                                txtAgreementCode = GetAgreement_Code(con, nAgr_id, lLogger);
                                txtAgentCode = GetAgent_Code(con, nAgr_id, lLogger);
                                txtAgentDeptCode = GetAgentDept_Code(con, nAgr_id, lLogger);


                                // если нового пакета еще не сделали - то делаем
                                 if (lErrLogger == null)
                                    {
                                        lErrLogger = new Logger_ufssprk_tools(lLogger.ConStr, 1, -1, txtAgreementCode, 0, lLogger.OspNum, "Этот пакет создан для входящих ответов, которые автоматически созданы при выгрузке некорректных запросов (нет даты рождения или ИНН).\n");
                                    }
                                    
                                    nStatus = 19; // ответ получен
                                    string txtAnswerType = "3"; // требуется уточнение
                                    string txtResp = "Запрос СПИ № " + nID.ToString() + " не был отправлен т.к. не указана дата рождения или ИНН. Информация помещена в ответ на запрос.";
                                    decimal nErrId = 0;
                                    
                                    string txtEntityName = GetLegal_Name(nOrg_id, con, lLogger);
                                    // тут вставляется ОТВЕТ - причем отрицательный

                                    nErrId = InsertResponseIntTable(con, nID, txtResp, DateTime.Today, nStatus, lErrLogger.logID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtAnswerType, lErrLogger);
                                    // тут вставляется ОТВЕТ - причем отрицательный
                                    // InsertResponseIntTable(con, nID, txtResponse, DateTime.Now, nStatus, nOrg_id, ref iRewriteState, nErrorPackID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, "2");
                                    if (nErrId > 0) // вставить сведения об ответе в ИТ
                                    {
                                        lErrLogger.MemoryLLog("\n0\tОшибка - запрос № " + nID.ToString() + " не выгружен выгружен файл.");
                                        lErrLogger.AppendLLogCount(1);
                                    }
                                                                                           

                                // пешем в лог что запрос не выгружен
                                // WriteLLog(conGIBDD, nErrorPackID, txtResponse);
                                // сделать ++ для количества запросов в логе пакета
                                // AppendLLogCount(conGIBDD, nErrorPackID, 1);

                                // теперь нужно не забыть поправить запрос, что он уже выгружен...
                                // но по факту обновление ведь идет потом, так что там нужно придумать особый порядок

                                // тут вставляется ОТВЕТ - причем отрицательный
                                //InsertZaprosTo_PK_OSP(con, nID, txtResponse, DateTime.Now, nStatus, nOrg_id, ref iRewriteState);
                            }
                        }

                        return false;

                    }

                }
                catch (OleDbException ole_ex)
                {
                    foreach (OleDbError err in ole_ex.Errors)
                    {
                        lLogger.ErrMessage +="Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    }
                    return false;
                }
                catch (Exception ex)
                {
                    //if (DBFcon != null) DBFcon.Close();
                    lLogger.ErrMessage +="Ошибка приложения. Message: " + ex.ToString();
                    return false;
                }
            }
            else return false;
        }

        
        public Int64 WriteToDBF(bool bVFP, string m_fullpath, string tofind_name, DateTime DatZapr1_param, DateTime DatZapr2_param, string release_name, string constrGIBDD, string constrPK_OSP, DataTable DT_doc_fiz, DataTable DT_doc_jur, String[] Legal_List, Logger_ufssprk_tools lLogger)
        {
            // Logger_ufssprk_tools lLogger = new Logger_ufssprk_tools(constrGIBDD, 1, 1, txtAgreementSber, 0, nOspNum, "Пакет запросов в БАНКИ.");

            string txtGoodLog = "";
            OleDbConnection conGIBDD = null;
            OleDbConnection conPK_OSP = null;
        

            Decimal LLogID = 0;

            Int64 iCnt = 0;
            Decimal nErrorPackID = 0;
            OleDbConnection DBFcon = null;

            try
            {
                conGIBDD = new OleDbConnection(constrGIBDD);
                conPK_OSP = new OleDbConnection(constrPK_OSP);

                //FolderExist(query_cred_org_path);

        
                if (File.Exists(string.Format(@"{0}\{1}", m_fullpath, tofind_name)))
                    File.Delete(string.Format(@"{0}\{1}", m_fullpath, tofind_name)); // удалить файл tofind - т.к. он все равно не итоговый

                if (File.Exists(string.Format(@"{0}\{1}", m_fullpath, release_name)))
                {
                    lLogger.ErrMessage += "\nПо пути " + string.Format(@"{0}\{1}", m_fullpath, release_name) + ", указанном в конфигурационном файле, существует файл. Выгрузка прекращена, очистите папку вручную, если это необходимо.";
                    lLogger.WriteLLog("\nПо пути " + string.Format(@"{0}\{1}", m_fullpath, release_name) + ", указанном в конфигурационном файле, существует файл. Выгрузка прекращена, очистите папку вручную, если это необходимо.");
                    return iCnt; // завершить программу выходом
                }

                CreateToFind_DBF(bVFP, m_fullpath, tofind_name, lLogger);
                
                DBFcon = new OleDbConnection();
                if (bVFP) DBFcon.ConnectionString = string.Format("Provider=VFPOLEDB.1;Data Source=" + m_fullpath + ";Mode=ReadWrite;Collating Sequence=RUSSIAN");
                else
                {
                    DBFcon.ConnectionString = string.Format("Provider=Microsoft.Jet.OLEDB.4.0;Extended Properties=dBASE IV;Data Source={0}", m_fullpath);
                }
                DBFcon.Open();

                //Decimal nOsp = GetOSP_Num();
                Decimal nOsp = lLogger.OspNum;

                // Если вдруг почему-то 0, то 1 - МОСП
                if (nOsp == 0) nOsp = 1;

                int iDocCnt = 0;
                if (DT_doc_jur != null) iDocCnt += DT_doc_jur.Rows.Count;
                if (DT_doc_fiz != null) iDocCnt += DT_doc_fiz.Rows.Count;

                decimal nPackID, nID;
                string txtPackID, txtID;

                int nAgreementID = 0;
                string txtAgreementCode = "";
                Logger_ufssprk_tools lLogger2 = null;
                Logger_ufssprk_tools lErrLogger = null;

                Int32 iRowsCount = 0;
                if ((DT_doc_fiz != null) && (DT_doc_fiz.Rows.Count > 0))  iRowsCount+= DT_doc_fiz.Rows.Count;
                if ((DT_doc_jur != null) && (DT_doc_jur.Rows.Count > 0))  iRowsCount+= DT_doc_jur.Rows.Count;

                if ((DT_doc_fiz != null) && (DT_doc_fiz.Rows.Count > 0))
                {
                    // получить код соглашения - в дальнейшем он вобще будет параметром как pens_id будет pens_agr_code.

                    // TODO: вот тут самое интересное - потому что логов должно быть много - по числу соглашений в списке!!!
                    nAgreementID = Convert.ToInt32(DT_doc_fiz.Rows[0]["AGREEMENT_ID"]);
                    txtAgreementCode = GetAgreement_Code(conPK_OSP,nAgreementID, lLogger);

                    //TODO: создать local_log LocalLogID
                    // 1 - cтатус Новый
                    // 1 - вид пакета Запрос
                    // новый лог
                    lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 1, 1, txtAgreementCode, 0, nOsp, "Пакет запросов в БАНКИ.");
                    
                    // LLogID = CreateLLog(conGIBDD, 1, 1, txtAgreementCode, 0, "Пакет запросов.");

                    // записать сколько всего строк в таблице, которую обрабатываем
                    lLogger2.WriteLLog("Всего подготовлено строк с запросами для выгрузки:  " + iRowsCount.ToString() + "\n");
                    

                    foreach (DataRow row in DT_doc_fiz.Select("ZAPROS > 0", "FIOVK"))// select только ради сортировки
                    {

                        nPackID = 0;
                        txtPackID = Convert.ToString(row["pack_id"]);
                        if (!Decimal.TryParse(txtPackID, out nPackID))
                        {
                            nPackID = -1;
                        }

                        nID = 0;
                        txtID = Convert.ToString(row["ext_request_id"]);
                        if (!Decimal.TryParse(txtID, out nID))
                        {
                            nID = -1;
                        }

                        if (InsertRowToDBF(DBFcon, conPK_OSP, row, nOsp, 0, 1, DatZapr1_param, DatZapr2_param, tofind_name, true, ref nErrorPackID, Legal_List, lLogger2, lErrLogger))
                        {
                            // отсчитать счетчиком
                            iCnt++;

                            // записать в лог - только для пакета с банка Возрождения
                            //WritePackLog(con, nPackID, "Обработан запрос # " + iCnt.ToString() + " ext_request_id = " + nID.ToString() + "\n");
                            lLogger2.MemoryLLog("Обработан запрос # " + iCnt.ToString() + " ext_request_id = " + nID.ToString() + "\n");
                            // txtGoodLog += "Обработан запрос # " + iCnt.ToString() + " ext_request_id = " + nID.ToString() + "\n";

                            // WriteLLog(conGIBDD, LLogID, "Обработан запрос # " + iCnt.ToString() + " ext_request_id = " + nID.ToString() + "\n");

                        }
                        else
                        {
                            // сначала записать положительный лог, если он есть
                            //if ((txtGoodLog.Length > 0) && (WriteLLog(conGIBDD, LLogID, txtGoodLog))) txtGoodLog = "";

                            // потом сообщение об ошибке
                            lLogger2.WriteLLog("Ошибка! запрос ext_request_id = " + nID.ToString() + " обработать не удалось.\n");
                            lLogger2.ErrMessage += "Ошибка! запрос ext_request_id = " + nID.ToString() + " обработать не удалось.\n";

                            // WriteLLog(conGIBDD, LLogID, "Ошибка! запрос ext_request_id = " + nID.ToString() + " обработать не удалось.\n");
                            row["GOD"] = -1; // если вставка была неудачной (нет года рождения) - то не надо потом менять статус на отправлен
                            // а вот и надо менять - чтобы они не копились там пачками...
                        }

                    }

                    // lLogger2.WriteLLog("\n Выгрузка закончена: " + iCnt.ToString());
                    // записать положительный лог, если он есть
                    // if ((txtGoodLog.Length > 0) && (WriteLLog(conGIBDD, LLogID, txtGoodLog))) txtGoodLog = "";

                    // записать количество в local_log (пишем сразу итого - вдруг физиков вобще нет
                    lLogger2.UpdateLLogCount(Convert.ToInt32(iCnt));
                    // UpdateLLogCount(conGIBDD, LLogID, Convert.ToInt32(iCnt)); // лог общий для всех и физ и юр.

                }



                if ((DT_doc_jur != null) && (DT_doc_jur.Rows.Count > 0))
                {
                    if(lLogger2 == null){
                        // получить код соглашения - в дальнейшем он вобще будет параметром как pens_id будет pens_agr_code.

                        // TODO: вот тут самое интересное - потому что логов должно быть много - по числу соглашений в списке!!!
                        nAgreementID = Convert.ToInt32(DT_doc_fiz.Rows[0]["AGREEMENT_ID"]);
                        txtAgreementCode = GetAgreement_Code(conPK_OSP,nAgreementID, lLogger);

                        //TODO: создать local_log LocalLogID
                        // 1 - cтатус Новый
                        // 1 - вид пакета Запрос
                        // новый лог
                        lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 1, 1, txtAgreementCode, 0, nOsp, "Пакет запросов в БАНКИ.");
                    
                        // LLogID = CreateLLog(conGIBDD, 1, 1, txtAgreementCode, 0, "Пакет запросов.");

                        // записать сколько всего строк в таблице, которую обрабатываем
                        lLogger2.WriteLLog("Всего подготовлено строк с запросами для выгрузки:  " + iRowsCount.ToString() + "\n");
                    }
                    

                    foreach (DataRow row in DT_doc_jur.Select("ZAPROS > 0", "FIOVK"))// select только ради сортировки
                    {
                        nPackID = 0;
                        txtPackID = Convert.ToString(row["pack_id"]);
                        if (!Decimal.TryParse(txtPackID, out nPackID))
                        {
                            nPackID = -1;
                        }

                        nID = 0;
                        txtID = Convert.ToString(row["ext_request_id"]);
                        if (!Decimal.TryParse(txtID, out nID))
                        {
                            nID = -1;
                        }

                        if (InsertRowToDBF(DBFcon, conPK_OSP, row, nOsp, 0, 1, DatZapr1_param, DatZapr2_param, tofind_name, true, ref nErrorPackID, Legal_List, lLogger2, lErrLogger))
                        {
                            // отсчитать счетчиком
                            iCnt++;

                            // записать в лог - только для пакета с банка Возрождения
                            // WritePackLog(con, nPackID, "Обработан запрос # " + iCnt.ToString() + " ext_request_id = " + nID.ToString() + "\n");

                            // txtGoodLog += "Обработан запрос на юр. лицо # " + iCnt.ToString() + " ext_request_id = " + nID.ToString() + "\n";
                            lLogger2.MemoryLLog("Обработан запрос на юр. лицо # " + iCnt.ToString() + " ext_request_id = " + nID.ToString() + "\n");
                            // WriteLLog(conGIBDD, LLogID, "Обработан запрос на юр. лицо # " + iCnt.ToString() + " ext_request_id = " + nID.ToString() + "\n");

                        }
                        else
                        {
                            // сначала записать положительный лог, если он есть
                            //if ((txtGoodLog.Length > 0) && (WriteLLog(conGIBDD, LLogID, txtGoodLog))) txtGoodLog = "";

                            // потом сообщение об ошибке
                            //WriteLLog(conGIBDD, LLogID, "Ошибка! запрос на юр. лицо ext_request_id = " + nID.ToString() + " обработать не удалось.\n");
                            lLogger2.WriteLLog("Ошибка! запрос на юр. лицо ext_request_id = " + nID.ToString() + " обработать не удалось.\n");
                            lLogger2.ErrMessage += "Ошибка! запрос ext_request_id = " + nID.ToString() + " обработать не удалось.\n";
                            row["GOD"] = -1; // если вставка была неудачной (нет года рождения) - то не надо потом менять статус на отправлен
                        }
                        
                    }

                    // записать положительный лог, если он есть
                    // if ((txtGoodLog.Length > 0) && (WriteLLog(conGIBDD, LLogID, txtGoodLog))) txtGoodLog = "";
                    lLogger2.UpdateLLogCount(Convert.ToInt32(iCnt));

                    // записать количество в local_log
                    // UpdateLLogCount(conGIBDD, LLogID, Convert.ToInt32(iCnt));
                }
                
                lLogger2.WriteLLog("\n" + DateTime.Now.ToShortDateString() + " " +  DateTime.Now.ToShortTimeString() + " Выгрузка закончена: " + iCnt.ToString());
                lLogger2.WriteLLog("\n Запускается конвертация файла: " + tofind_name);
                
                
                DBFcon.Close();
                DBFcon.Dispose();

                // вот тут надо будет перекодировать!!!
                Process proc = new Process();
                //string appPath = Path.GetDirectoryName(Application.ExecutablePath);
                string path = System.Reflection.Assembly.GetExecutingAssembly().CodeBase;
                string appPath =  System.IO.Path.GetDirectoryName(path);
                if (appPath.StartsWith("file:\\"))
                    appPath = appPath.Substring(6);

                proc.StartInfo.FileName = string.Format(@"{0}\{1}", appPath, "fox622.exe ");
                
                //proc.StartInfo.FileName = string.Format(@"{0}\{1}", "C:\\Program Files\\SSP\\InstallInfoChange", "fox622.exe ");

                proc.StartInfo.Arguments = string.Format(@"{0}\{1}", m_fullpath, tofind_name) + " " + string.Format(@"{0}\{1}", m_fullpath, release_name);
                //proc.StartInfo.WorkingDirectory = "C:\\Program Files\\SSP\\InstallInfoChange";
                proc.StartInfo.WorkingDirectory = appPath;
                proc.StartInfo.UseShellExecute = false;

                proc.StartInfo.WindowStyle = ProcessWindowStyle.Normal;
                proc.Start();
                proc.WaitForExit();

                System.Threading.Thread.Sleep(5000);// ждем 5 секунд чтобы гарантированно выполнилось преобразование.

                DateTime tm;
                tm = DateTime.Now;
                Int32 iCounter = 0;

                while ((!File.Exists(string.Format(@"{0}\{1}", m_fullpath, release_name))) || (File.GetLastWriteTime(string.Format(@"{0}\{1}", m_fullpath, release_name)).AddMilliseconds(100) > tm)) // пока не появился сконвертированный файл
                {
                    System.Threading.Thread.Sleep(1000);// ждем секунду чтобы гарантированно выполнилось преобразование.
                    tm = DateTime.Now;
                    iCounter++;
                    if (iCounter == 600)
                    {
                        // если прошло 10 минут
                        Exception ex = new Exception("Ошибка. Запросы не могут быть отправлены в Сбербанк. Слишком долго шла конвертация в формат Fox 2.x");
                        throw ex;
                    }
                }

                if (File.Exists(string.Format(@"{0}\{1}", m_fullpath, tofind_name)))
                    File.Delete(string.Format(@"{0}\{1}", m_fullpath, tofind_name));

                lLogger2.WriteLLog("\n" + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + " конвертация закончена - имя итогового файла: " + release_name);

                lLogger2.UpdateLLogFileName(string.Format(@"{0}\{1}", m_fullpath, release_name));

                // если все хорошо - то надо сделать UPDATE ЗАПРОСА в бд установить СТАТУС - ОТПРАВЛЕН (10)
                // поскольку через 1 запрос - Банк возрождение делаем запросы во все банки через tofind.dbf
                // то делаем для всех UPDATE

                // по уму надо сделать обновление так:
                // отсортировать список DT_doc_fiz.Rows по параметру пакет
                // обновлять пакеты и запросы, вести флаг статуса пакета и после всех запросов обновлять пакет.

                // если были запросы с ошибками - установить статус обработано для их лога
                if (lErrLogger != null)
                {
                    // 2 - обработано
                    lErrLogger.UpdateLLogStatus(2);
                    lErrLogger.WriteLLog(DateTime.Now.ToShortDateString() + " " +  DateTime.Now.ToShortTimeString() + " Выгрузка пакета запросов завершена.\n");
                    // WriteLLog(conGIBDD, nErrorPackID, DateTime.Now + " Выгрузка пакета запросов завершена.\n");
                }

                // установить статсу обработано для лога запросов обычных
                // 2 - обработано
                lLogger2.UpdateLLogStatus(2);
                // UpdateLLogStatus(conGIBDD, LLogID, 2);

                // записать положительный лог, если он есть
                // if ((txtGoodLog.Length > 0) && (WriteLLog(conGIBDD, LLogID, txtGoodLog))) txtGoodLog = "";
                lLogger2.WriteLLog("\n" + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + " пакет выгружен в файл: " + m_fullpath + "\\" + release_name + "\nВсего в файл выгружено запросов: " + iCnt.ToString() + "\n");
                // WriteLLog(conGIBDD, LLogID, DateTime.Now + " пакет выгружен в файл: " + m_fullpath + "\\" + tofind_name + "\nВсего в файл выгружено запросов: " + iCnt.ToString() + "\n");

                // теперь пакет логов для банка возрождение сформирован, и его тупо надо скопировать для всех остальных КР. ОРГОВ

                decimal nOrg_id;
                decimal nAgr_id;

                // вот какая проблема - не нужно копировать 30 (банк возрождение). Он - вроде как первый.
                txtAgreementCode = "";

                // здесь делаем цикл про списку контрагентов-кред.оргов и копируем запись с логом

                foreach (string txtOrg_id in Legal_List)
                {
                    // по коду организации узнать номер согашения
                    nOrg_id = Convert.ToDecimal(txtOrg_id);
                    // получить Agreement_ID по номеру контрагента
                    
                    nAgr_id = GetAgr_by_Org(conPK_OSP, nOrg_id, lLogger);
                    txtAgreementCode = GetAgreement_Code(conPK_OSP, nAgr_id, lLogger);

                    // теперь меняем Возрождение на Баренц-банк 30 на 170
                    // if(txtAgreementCode != "30") // сам 30 - Возрождение копировать не надо, т.к. он является эталонным.
                    if (txtAgreementCode != "190") // сам 170 - Баренц копировать не надо, т.к. он является эталонным.
                        CopyLLogParent(conGIBDD, lLogger2.logID, txtAgreementCode, lLogger);
                }

                // закомментировал потому что теперь пакеты внешние
                //// получить список пакетов
                //string[] cols = new string[] { "pack_id" };
                //DataTable PackList = SelectDistinct(DT_doc_fiz, cols);

                //decimal nRowPackID;
                //string txtRowPackID;


                //if (PackList != null)
                //{
                //    foreach (DataRow row in PackList.Rows)
                //    {
                //        nRowPackID = 0;
                //        txtRowPackID = Convert.ToString(row["pack_id"]);
                //        if (!Decimal.TryParse(txtRowPackID, out nRowPackID))
                //        {
                //            nRowPackID = -1;
                //        }
                //        WritePackLog(con, nRowPackID, DateTime.Now + " пакет выгружен в файл: " + m_fullpath + "\\" + tofind_name + "\n");
                //        WritePackLog(con, nRowPackID, "Всего в файл выгружено запросов: " + iCnt.ToString() + "\n");
                //    }
                //}


                if (DT_doc_fiz != null)
                {
                    foreach (DataRow row in DT_doc_fiz.Rows)// select только ради сортировки
                    {
                        //UpdatePackRequest(row);
                        //UpdateKredOrgRequest(row);

                        //UpdateExtRequestRow(row);
                        UpdateExtRequestThrowLegalList(conPK_OSP, row, Legal_List, lLogger);

                        //UpdateExtRequestRow(row);
                    }
                }

                // закомментировал - потому что теперь все логи во внешней таблице и не надо трогать пакеты ПК ОСП
                //// получить список пакетов
                //PackList = SelectDistinct(DT_doc_jur, cols);

                //if (PackList != null)
                //{
                //    foreach (DataRow row in PackList.Rows)
                //    {
                //        nRowPackID = 0;
                //        txtRowPackID = Convert.ToString(row["pack_id"]);
                //        if (!Decimal.TryParse(txtRowPackID, out nRowPackID))
                //        {
                //            nRowPackID = -1;
                //        }
                //        WritePackLog(con, nRowPackID, DateTime.Now + " пакет выгружен в файл: " + m_fullpath + "\\" + tofind_name + "\n");
                //        WritePackLog(con, nRowPackID, "Всего в файл выгружено запросов: " + iCnt.ToString() + "\n");
                //    }
                //}

                if (DT_doc_jur != null)
                {
                    foreach (DataRow row in DT_doc_jur.Rows)// select только ради сортировки
                    {
                        //UpdatePackRequest(row);
                        //UpdateKredOrgRequest(row);
                        // сделать обновления запросов в кредитные организации
                        // суть проблемы в том - что мы сделали выборку только по одному из банков - а обновлять надо по всем.
                        // возникает вопрос - как получить список всех? нужен sql или какой-то алгоритм
                        // есть поле ext_request.req_id = DBF.zapros
                        // есть ext_request.agreement_code = 

                        //UpdateExtRequestRow(row);
                        UpdateExtRequestThrowLegalList(conPK_OSP, row, Legal_List, lLogger);
                    }
                }
            }
            catch (OleDbException ole_ex)
            {
                //if (DBFcon.State == System.Data.ConnectionState.Open)
                //{
                //    DBFcon.Close();
                //    DBFcon.Dispose();
                //}
                DBFcon.Close();
                DBFcon.Dispose();
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    //MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                }
            }
            catch (Win32Exception e)
            {
                if (e.NativeErrorCode == ERROR_FILE_NOT_FOUND)
                {
                    lLogger.ErrMessage += "Ошибка приложения. Проверьте путь доступа к файлу: " + e.Message;
                    // MessageBox.Show("Ошибка приложения. Проверьте путь доступа к файлу: " + e.Message, "Внимание!", MessageBoxButtons.OK);
                }

                else if (e.NativeErrorCode == ERROR_ACCESS_DENIED)
                {
                    lLogger.ErrMessage += "Ошибка приложения. Доступ к файлу запрещен: " + e.Message;
                    // MessageBox.Show("Ошибка приложения. Доступ к файлу запрещен: " + e.Message, "Внимание!", MessageBoxButtons.OK);
                }
            }
            catch (Exception ex)
            {
                if ((DBFcon != null) && (DBFcon.State == System.Data.ConnectionState.Open))
                {
                    DBFcon.Close();
                    DBFcon.Dispose();
                }
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                // MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }


            return iCnt;

        }

        public bool UpdateExtRequestThrowLegalList(OleDbConnection con, DataRow row, string[] Legal_List, Logger_ufssprk_tools lLogger)
        {
            // обновить запрос из пакета
            decimal nID = 0;
            int iGod = 0;
            string txtGod, txtID, txtPackID, txtReq_id, txtAgreementCode;
            decimal nReq_id = 0;
            decimal nAgreement_code = 0;
            try{

                txtGod = Convert.ToString(row["GOD"]).Trim();

                // получить req_id
                txtReq_id = Convert.ToString(row["zapros"]).Trim();
                if (!Decimal.TryParse(txtReq_id, out nReq_id))
                {
                    nReq_id = 0;
                }

                if (!Int32.TryParse(txtGod, out iGod))
                {
                    iGod = 0;
                }

                // прогнать по списку все LegalList - получиьт mvv_agreement_code
                foreach (string txtOrg_id in Legal_List)
                {
                    decimal nOrg_id = Convert.ToDecimal(txtOrg_id);
                    nAgreement_code =  GetAgr_by_Org(con, nOrg_id, lLogger);
                    string txtAgrCode = GetAgreement_Code(con, nAgreement_code, lLogger);
                    
                    // обновить запись в ext_request по 2-м параметрам
                    
                    // теперь все обновляем - чтобы они не накапливались как невыгруженные, ведь мы вставили на них ответ
                    SetExtReqProcessed(con, nReq_id, txtAgrCode, 1, lLogger);
                    
                    //if (iGod == -1)
                    //{
                    //    SetExtReqProcessed(nReq_id, txtAgrCode, 0);
                    //}
                    //else
                    //{
                    //    SetExtReqProcessed(nReq_id, txtAgrCode, 1);
                    //}
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                // MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
                return false;
            }
            return true;
                        
        }

        public bool SetExtReqProcessed(OleDbConnection con, Decimal nID, string txtAgreementCode, int nProcessed, Logger_ufssprk_tools lLogger)
        {
            bool bUpdated = true;
            OleDbTransaction tran = null;
            OleDbCommand m_cmd = null;

            try
            {
                if (nID != 0)
                {
                    // UPDATE ext_request SET processed = nProcessed WHERE req_id = nID and mvv_agreement_code = txtAgreementCode

                    if (con != null && con.State != ConnectionState.Closed) con.Close();
                    con.Open();
                    tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                    m_cmd = new OleDbCommand();
                    m_cmd.Connection = con;
                    m_cmd.Transaction = tran;

                    m_cmd.CommandText = "UPDATE ext_request SET processed = :STATUS WHERE req_id = :ID and mvv_agreement_code = :AGREEMENT_CODE";


                    m_cmd.Parameters.Add(new OleDbParameter(":STATUS", nProcessed));
                    m_cmd.Parameters.Add(new OleDbParameter(":ID", nID));
                    m_cmd.Parameters.Add(new OleDbParameter(":AGREEMENT_CODE", txtAgreementCode));


                    if (m_cmd.ExecuteNonQuery() == -1)
                    {
                        bUpdated = false;
                    }

                    tran.Commit();
                    con.Close();

                    if (!bUpdated)
                    {
                        Exception ex = new Exception("Error Updating ext_request table id = " + nID.ToString() + "mvv_agreement_code = " + txtAgreementCode);
                        throw ex;
                    }
                }
                else
                {
                    // когда будет статус - ошибка - тут надо будет ставить запрос на статус ОШИБКА

                }

            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    //MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                }
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                return false;
            }
            catch (Exception ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                // MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
                return false;
            }
            return true;

        }

        public decimal CopyLLogParent(OleDbConnection gibdd_con, decimal nOldLLogID, string txtNewAgreementCode, Logger_ufssprk_tools lLogger)
        {
            bool bUpdated = true;
            decimal nID = 0;
            OleDbCommand cmd, cmdIns;
            OleDbTransaction tran = null;

            try
            {
                if (gibdd_con != null && gibdd_con.State != ConnectionState.Closed) gibdd_con.Close();
                gibdd_con.Open();
                tran = gibdd_con.BeginTransaction(IsolationLevel.ReadCommitted);

                // получить новый ключ
                cmd = new OleDbCommand("SELECT gen_id(GEN_LOCAL_LOG_ID, 1) FROM RDB$DATABASE", gibdd_con, tran);
                nID = Convert.ToDecimal(cmd.ExecuteScalar());

                if (nID * nOldLLogID != 0)
                {
                    cmdIns = new OleDbCommand();
                    cmdIns.Connection = gibdd_con;
                    cmdIns.Transaction = tran;
                    // cmdIns.CommandText = "insert into LOCAL_LOGS (ID, OSPNUM, PACKDATE, PACK_TYPE, CONV_CODE, PACK_STATUS, PACK_COUNT, PARENT_ID,LOG)                                             select :new_ID as ID, OSPNUM, PACKDATE, PACK_TYPE, :newAgrCode as CONV_CODE, PACK_STATUS, PACK_COUNT, PARENT_ID, LOG from LOCAL_LOGS WHERE ID = :old_ID";
                    cmdIns.CommandText = "INSERT INTO LOCAL_LOGS (ID, OSPNUM, PACKDATE, PACK_TYPE, CONV_CODE, PACK_STATUS, PACK_COUNT, PARENT_ID, LOG, FL_FIND, FL_NOFIND, FL_E_TOFIND, FILENAME) select :new_ID as ID, OSPNUM, PACKDATE, PACK_TYPE, :newAgrCode as CONV_CODE, PACK_STATUS, PACK_COUNT, PARENT_ID, LOG, FL_FIND, FL_NOFIND, FL_E_TOFIND, FILENAME from LOCAL_LOGS WHERE ID = :old_ID";
                    

                    cmdIns.Parameters.Add(new OleDbParameter(":new_ID", nID));
                    cmdIns.Parameters.Add(new OleDbParameter(":newAgrCode", txtNewAgreementCode));
                    cmdIns.Parameters.Add(new OleDbParameter(":old_ID", nOldLLogID));

                    if (cmdIns.ExecuteNonQuery() == -1)
                    {
                        bUpdated = false;
                    }
                }

                tran.Commit();
                gibdd_con.Close();

                if (!bUpdated)
                {
                    Exception ex = new Exception("Error. Can't copy doc_deposit id = " + nOldLLogID.ToString());
                    throw ex;
                }
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    //MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (gibdd_con != null)
                {
                    gibdd_con.Close();
                }
            }
            catch (Exception ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (gibdd_con != null)
                {
                    gibdd_con.Close();
                }
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return nID;

        }

        //WritePotdToXML(fullpath, txtFileName, nPackNum, DT_potd_doc, lLogger)
        public Int64 WritePotdToXML(string fullpath, string txtSberXmlFileName, DataTable DT_doc_fiz_sber, decimal nOsp, string txtToCode, string txtDivAMD, string txtOrgAMD, Logger_ufssprk_tools lLogger)
        {
            Int64 iCnt = 0;
            Int64 iECnt = 0;
            string txtXmlFullPath = "";
            try
            {
                // File_funcs ff = new File_funcs();
                txtXmlFullPath = string.Format(@"{0}\{1}", fullpath, txtSberXmlFileName);
                if (File.Exists(txtXmlFullPath))
                {
                    return 0;
                }
                XmlTextWriter xmlWriter = new XmlTextWriter(txtXmlFullPath, System.Text.Encoding.GetEncoding(1251));
                xmlWriter.WriteStartDocument(true);
                xmlWriter.Formatting = Formatting.Indented;
                xmlWriter.Indentation = 2;
                xmlWriter.WriteStartElement("DataBlock");
                xmlWriter.WriteAttributeString("Key", cutEnd(lLogger.logID.ToString(), 50));
                xmlWriter.WriteAttributeString("FsspTo", cutEnd(txtToCode, 50));
                xmlWriter.WriteAttributeString("FsspOsp", txtToCode + nOsp.ToString().PadLeft(3, '0'));
                xmlWriter.WriteAttributeString("OrgAMD", cutEnd(txtOrgAMD, 50));
                xmlWriter.WriteAttributeString("DivAMD", cutEnd(txtDivAMD, 50));

                string txtID = "";
                string txtIP_ID = "";

                // пишем <Query>, внутри пишем <IP>
                foreach (DataRow row in DT_doc_fiz_sber.Rows)
                {
                    try
                    {
                        decimal nID = 0; // если писать сюда ext_request_id, то потом придется его неадекватно менять на req_id
                        //string txtID = Convert.ToString(row["ext_request_id"]);
                        txtID = Convert.ToString(row["zapros"]);
                        if (!Decimal.TryParse(txtID, out nID))
                        {
                            nID = -1;
                        }

                        decimal nIP_ID = 0;
                        txtIP_ID = Convert.ToString(row["ip_id"]);
                        if (!Decimal.TryParse(txtIP_ID, out nIP_ID))
                        {
                            nIP_ID = -1;
                        }


                        bool bGoodZaprDate = false;
                        DateTime dtDate = DateTime.Today;
                        string txtDatZapr = Convert.ToString(row["DATZAPR"]);
                        if (DateTime.TryParse(txtDatZapr, out dtDate)) bGoodZaprDate = true;

                        decimal nSpi = 0;
                        string txtNomspi = Convert.ToString(row["spi_id"]).Trim();
                        Decimal.TryParse(txtNomspi, out nSpi);

                        string txtSpi = Convert.ToString(row["fio_spi"]).Trim();
                        string txtHSpi = Convert.ToString(row["h_spi"]).Trim();
                        string txtNomip = Convert.ToString(row["nomip"]).Trim();


                        bool bGoodRiseDate = false;
                        DateTime dtRiseDate = DateTime.Today;
                        string txtRiseDate = Convert.ToString(row["ip_risedate"]);
                        if (DateTime.TryParse(txtRiseDate, out dtRiseDate)) bGoodRiseDate = true;

                        int nIdType = 0;
                        string txtIdType = Convert.ToString(row["id_type"]);
                        Int32.TryParse(txtIdType, out nIdType);

                        string txtIdNumber = Convert.ToString(row["id_number"]);

                        bool bGoodIdDate = false;
                        DateTime dtIdDate = DateTime.Today;
                        string txtIdDate = Convert.ToString(row["id_date"]);
                        if (DateTime.TryParse(txtIdDate, out dtIdDate)) bGoodIdDate = true;

                        string txtIdSubjectType = Convert.ToString(row["id_subject_type"]);

                        double nIdSum = 0;
                        string txtIdSum = Convert.ToString(row["id_sum"]).Trim();
                        Double.TryParse(txtIdSum, out nIdSum);

                        double nRestDebtSum = 0;
                        string txtRestDebtSum = Convert.ToString(row["ip_rest_debtsum"]).Trim();
                        Double.TryParse(txtRestDebtSum, out nRestDebtSum);

                        string txtDebtorName = Convert.ToString(row["FIOVK"]);
                        string txtDebtorAdr = Convert.ToString(row["ADDR"]);
                        if (txtDebtorAdr.Length == 0) txtDebtorAdr = "РЕСПУБЛИКА КАРЕЛИЯ"; // если нет адреса - пусть будет республика карелия

                        bool bGoodBordD = false;
                        DateTime dtBornDate = DateTime.MaxValue;
                        string txtBornDate = Convert.ToString(row["DATROZHD"]);
                        if (DateTime.TryParse(txtBornDate, out dtBornDate)) bGoodBordD = true;
                        else {
                            //return false; // пока делаем так - т.к. не понятно как писать сведения о ДУЛ + Год рождения 
                            continue;
                        }

                        bool bGoodBordYear = false;
                        int nGod = 0;
                        string txtGod = Convert.ToString(row["GOD"]);
                        if (Int32.TryParse(txtGod, out nGod)) bGoodBordYear = true;

                        string txtDebtorBirthPlace = Convert.ToString(row["debtor_birthplace"]);



                        if ((nID > 0) && (nIP_ID > 0) && bGoodBordD && bGoodIdDate && bGoodRiseDate && bGoodZaprDate
                            //&& (txtIdNumber.Length > 0)
                            && (txtNomip.Length > 0)
                             && (txtIdSubjectType.Length > 0)
                              && (txtDebtorName.Length > 0)
                               && (txtDebtorAdr.Length > 0)
                                //&& (txtDebtorBirthPlace.Length > 0) - судя по тестовому файлу, требование обязательности по полю Место Рождения - блеф
                                 && (nSpi > 0)
                                  && (txtSpi.Length > 0)
                                   && (txtHSpi.Length > 0)
                            )// проверяем что есть обязательные поля
                        {
                            xmlWriter.WriteStartElement("Query");
                            xmlWriter.WriteAttributeString("Key", nID.ToString());
                            xmlWriter.WriteAttributeString("DocDate", dtDate.ToShortDateString());
                            xmlWriter.WriteAttributeString("SPI", nSpi.ToString());
                            xmlWriter.WriteAttributeString("SPIFio", cutEnd(txtSpi, 300));
                            xmlWriter.WriteAttributeString("SPIPost", "11-3-4-105"); // код должности СПИ 11-3-4-105
                            xmlWriter.WriteAttributeString("ChSPIFio", cutEnd(txtHSpi, 300));
                            xmlWriter.WriteAttributeString("ChSPIPost", "11-1-3-084"); // код должности ССП 11-1-3-084
                            xmlWriter.WriteAttributeString("AnsDate", dtDate.AddDays(7).ToShortDateString()); // срок ответа - 7 дней от запроса

                            // пишем внутрь Query контейнер ИП
                            xmlWriter.WriteStartElement("IP");
                            xmlWriter.WriteAttributeString("Key", nIP_ID.ToString());
                            xmlWriter.WriteAttributeString("IPNum", cutEnd(txtNomip, 30));
                            xmlWriter.WriteAttributeString("IPDate", dtRiseDate.ToShortDateString());
                            xmlWriter.WriteAttributeString("IPName", "Исполнительное производство");
                            if (txtIdNumber.Length > 0)
                            {
                                xmlWriter.WriteAttributeString("IDNum", cutEnd(txtIdNumber, 30));
                            }
                            else
                            {
                                xmlWriter.WriteAttributeString("IDNum", cutEnd(txtNomip, 30));
                            }
                            xmlWriter.WriteAttributeString("IDDate", dtIdDate.ToShortDateString());
                            xmlWriter.WriteAttributeString("IDSubjName", cutEnd(txtIdSubjectType, 300));
                            xmlWriter.WriteAttributeString("IDSum", nIdSum.ToString("F2").Replace(',', '.'));
                            xmlWriter.WriteAttributeString("IPDebt", nRestDebtSum.ToString("F2").Replace(',', '.'));
                            xmlWriter.WriteAttributeString("DebtorType", "2"); // Тип должника: ЮЛ=1/ ФЛ=2/ индивидуальный предприниматель=3
                            xmlWriter.WriteAttributeString("DebtorName", cutEnd(txtDebtorName, 1000));
                            xmlWriter.WriteAttributeString("DebtorAdr", cutEnd(txtDebtorAdr, 300));

                            // далее идет вилка по обязательной дате рождения
                            // но т.к. нет описания и примера по контейнеру Сведения со сведениями о ДУЛ, то такой вариант сейчас не будем программировать
                            // или если ее нет, то нужно год + ДУЛ
                            if (bGoodBordD)
                                xmlWriter.WriteAttributeString("DebtorBirthDate", dtBornDate.ToShortDateString()); // Является обязательным реквизитом  при отсутствии года рождения
                            else if (bGoodBordYear)
                            {
                                // Является обязательным реквизитом при отсутствии Даты Рождения. В этом случае в контейнере Сведения должны содержаться сведения о документе УДЛ

                                //xmlWriter.WriteAttributeString("DebtorBirthYear", nGod.ToString("D4"));

                                // дальше пишем ДУЛ


                                // данные о ДУЛ взять по аналогии со Сбером
                                
                            //return false; // пока делаем так - т.к. не понятно как писать сведения о ДУЛ + Год рождения 
                            continue;
                            }
                            else {
                            //return false; // пока делаем так - т.к. не понятно как писать сведения о ДУЛ + Год рождения 
                            continue;
                            }
                            
                            // если нет - не будем заполнять. в тесте оно у них не заполнено, хоть и в форматах написано что обязательное
                            if (txtDebtorBirthPlace.Length > 0)
                            {
                                xmlWriter.WriteAttributeString("DebtorBirthPlace", cutEnd(txtDebtorBirthPlace, 1000));
                            }
                            xmlWriter.WriteAttributeString("SPI", nSpi.ToString());
                            xmlWriter.WriteAttributeString("SPIFio", cutEnd(txtSpi, 300));
                            xmlWriter.WriteEndElement(); // end IP
                            xmlWriter.WriteEndElement(); // end Query
                            iCnt++;
                            lLogger.MemoryLLog("\n" + iCnt.ToString() + "\tВыгружен запрос ID = " + nID.ToString());
                        }
                        else
                        {

                            lLogger.ErrMessage += " .\n Ошибка. Запрос не был отправлен т.к. отсутствуют обязательные поля. nID = " + nID.ToString();
                            lLogger.WriteLLog(" .\n Ошибка. Запрос не был отправлен т.к. отсутствуют обязательные поля. ИП № " + txtNomip + " (ID = " + nID.ToString() + ")");
                            iECnt++;
                            row["GOD"] = -1; // пометить строку как невыгруженную
                            
                            //return false; // если нет обязательных полей
                            continue;
                            
                        }
                    }
                    catch (Exception ex)
                    {
                        lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                        //return false;
                        continue;
                    }
                    //return true;
                }

                xmlWriter.WriteEndElement(); // DataBlock
                xmlWriter.WriteEndDocument();
                xmlWriter.Close();
                    

            }
            catch (Exception ex)
            {
                // MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }

            lLogger.WriteLLog("\n" + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + "\tВыгрузка запросов окончена. Выгружено запросов: " + iCnt.ToString() + ". Ошибок выгрузки: " + iECnt.ToString());

            return iCnt;
        }

        public Int64 WriteToXML(string constrGIBDD, string constrPKOSP, string fullpath, string txtSberXmlFileName, DataTable DT_doc_fiz_sber, decimal nOsp, Logger_ufssprk_tools lLogger)
        {
            OleDbConnection conGIBDD;
            OleDbConnection conPKOSP;
            
            conGIBDD = new OleDbConnection(constrGIBDD);
            conPKOSP = new OleDbConnection(constrPKOSP);
            Decimal LLogID = 0;
            string txtXmlFullPath = "";

            Int64 iCnt = 0;
            //Decimal nErrorPackID = 0;
            try
            {
                // сделать XML
                txtXmlFullPath = string.Format(@"{0}\{1}", fullpath, txtSberXmlFileName);

                if (File.Exists(txtXmlFullPath))
                {
                    return 0;
                }

                XmlTextWriter xmlWriter = new XmlTextWriter(txtXmlFullPath, System.Text.Encoding.GetEncoding(1251));
                xmlWriter.WriteStartDocument(true);
                xmlWriter.Formatting = Formatting.Indented;
                xmlWriter.Indentation = 2;
                xmlWriter.WriteStartElement("Request");

                // Decimal nOsp = GetOSP_Num();

                // Если вдруг почему-то 0, то 1 - МОСП (почему-то  был глюк там был 0, пришлось костыль ставить)
                if (nOsp == 0) nOsp = 1;

                //prbWritingDBF.Value = 0;

                int iDocCnt = 0;
                if (DT_doc_fiz_sber != null) iDocCnt += DT_doc_fiz_sber.Rows.Count;
                //prbWritingDBF.Maximum = iDocCnt * 2; // + iOkonCnt 
                //prbWritingDBF.Step = 1;

                decimal nPackID, nID;
                string txtPackID, txtID;

                //int nAgreementID = 0;
                string txtAgreementCode = "";

                if ((DT_doc_fiz_sber != null) && (DT_doc_fiz_sber.Rows.Count > 0))
                {
                    txtAgreementCode = "10";

                    //TODO: создать local_log LocalLogID
                    // 1 - cтатус Новый
                    // 1 - вид пакета Запрос
                    //LLogID = CreateLLog(conGIBDD, 1, 1, txtAgreementCode, 0, "Пакет запросов.");

                    // записать сколько всего строк в таблице, которую обрабатываем
                    lLogger.WriteLLog("Всего подготовлено строк с запросами для выгрузки:  " + DT_doc_fiz_sber.Rows.Count.ToString() + "\n");
                    //WriteLLog(conGIBDD, LLogID, "Всего подготовлено строк с запросами для выгрузки:  " + DT_doc_fiz_sber.Rows.Count.ToString() + "\n");

                    foreach (DataRow row in DT_doc_fiz_sber.Select("ZAPROS > 0", "FIOVK"))// select только ради сортировки
                    {

                        nPackID = 0;
                        txtPackID = Convert.ToString(row["pack_id"]);
                        if (!Decimal.TryParse(txtPackID, out nPackID))
                        {
                            nPackID = -1;
                        }

                        nID = 0;
                        txtID = Convert.ToString(row["ext_request_id"]);
                        if (!Decimal.TryParse(txtID, out nID))
                        {
                            nID = -1;
                        }

                        // возникает резонный вопрос - а как вобще правильно писать в XML?
                        // может, сначала его сформировать, а потом записать?
                        // сразу добавлять или записывать по 1 строчке?
                        // пока по 1 строчке - дальше посмотрим
                        // if (InsertRowToDBF(row, nOsp, 0, 1, DatZapr1_param, DatZapr2_param, tofind_name, true, ref nErrorPackID))
                        if (InsertReqRowToSberXML(constrGIBDD, row, nOsp, txtSberXmlFileName, txtXmlFullPath, xmlWriter, lLogger))
                        {
                            // отсчитать счетчиком
                            iCnt++;

                            // записать в лог - только для пакета с банка Возрождения
                            //WritePackLog(con, nPackID, "Обработан запрос # " + iCnt.ToString() + " ext_request_id = " + nID.ToString() + "\n");
                            //WriteLLog(conGIBDD, LLogID, "Обработан запрос # " + iCnt.ToString() + " ext_request_id = " + nID.ToString() + "\n");
                            lLogger.WriteLLog("Обработан запрос # " + iCnt.ToString() + " ext_request_id = " + nID.ToString() + "\n");

                        }
                        else
                        {
                            //WritePackLog(con, nPackID, 
                            // WriteLLog(conGIBDD, LLogID, "Ошибка! запрос ext_request_id = " + nID.ToString() + " обработать не удалось.\n");
                            lLogger.WriteLLog("Ошибка! запрос ext_request_id = " + nID.ToString() + " обработать не удалось.\n");
                            row["GOD"] = -1; // если вставка была неудачной (нет года рождения) - то не надо потом менять статус на отправлен
                            // а вот и надо менять - чтобы они не копились там пачками...
                        }

                        // prbWritingDBF.PerformStep();
                        // prbWritingDBF.Refresh();
                        // System.Windows.Forms.Application.DoEvents();
                    }
                    // закрыть XML документ
                    xmlWriter.WriteEndElement();
                    xmlWriter.WriteEndDocument();
                    xmlWriter.Close();
                    // записать количество в local_log (пишем сразу итого - вдруг физиков вобще нет
                    // UpdateLLogCount(conGIBDD, LLogID, Convert.ToInt32(iCnt)); // лог общий для всех и физ и юр.
                    lLogger.UpdateLLogCount(Convert.ToInt32(iCnt));
                    // записать имя файла
                    lLogger.UpdateLLogFileName(txtSberXmlFileName);

                    // MessageBox.Show("Выгружено запросов в Сбербанк (XML): " + iCnt.ToString(), "Внимание!", MessageBoxButtons.OK);


                }

                // prbWritingDBF.PerformStep();
                //DBFcon.Close();
                //DBFcon.Dispose();



                // TODO: арихивирование сделать
                // Архивируем - вряд-ли это вобще актуально..
                //archive_folder_tofind = archive_cred_org_path;

                //if (!Directory.Exists(archive_folder_tofind))
                //{
                //    MessageBox.Show("По указанному пути в конфигурационном файле отсутствует директория для ведения архива. Файл с запросами в Сбербанк (XML) сохранён в архив не будет.", "Внимание", MessageBoxButtons.OK);
                //    archive_folder_tofind = "";
                //}
                //if (!archive_folder_tofind.Equals(""))
                //{
                //    Copy(txtXmlFullPath, archive_folder_tofind);
                //}

                // если были запросы с ошибками - установить статус обработано для их лога
                // это теперь, как я понимаю, нереально и такого лога нет
                //if (nErrorPackID > 0)
                //{
                //    // 2 - обработано
                //    UpdateLLogStatus(conGIBDD, nErrorPackID, 2);
                //    WriteLLog(conGIBDD, nErrorPackID, DateTime.Now + " Выгрузка пакета запросов завершена.\n");
                //}

                // установить статсу обработано для лога запросов обычных
                // 2 - обработано
                // UpdateLLogStatus(conGIBDD, LLogID, 2);
                lLogger.UpdateLLogStatus(2);                
                //WriteLLog(conGIBDD, LLogID, DateTime.Now + " пакет выгружен в файл: " + txtXmlFullPath + "\nВсего в файл выгружено запросов: " + iCnt.ToString() + "\n");
                lLogger.WriteLLog(DateTime.Now + " пакет выгружен в файл: " + txtXmlFullPath + "\nВсего в файл выгружено запросов: " + iCnt.ToString() + "\n");

                lLogger.UpdateLLogCount(Convert.ToInt32(iCnt));

                // здесь делаем цикл про списку контрагентов-кред.оргов и копируем запись с логом
                // теперь никакого цикла - только Сбер

                if (DT_doc_fiz_sber != null)
                {
                    foreach (DataRow row in DT_doc_fiz_sber.Rows)// select только ради сортировки
                    {
                        //UpdatePackRequest(row);
                        //UpdateKredOrgRequest(row);

                        UpdateExtRequestRow(conPKOSP, row, lLogger);
                        //UpdateExtRequestThrowLegalList(row);

                        //UpdateExtRequestRow(row);
                        //prbWritingDBF.PerformStep();
                        //prbWritingDBF.Refresh();
                        //System.Windows.Forms.Application.DoEvents();
                    }
                }


            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Win32Exception e)
            {
                if (e.NativeErrorCode == ERROR_FILE_NOT_FOUND)
                {
                    // MessageBox.Show("Ошибка приложения. Проверьте путь доступа к файлу: " + e.Message, "Внимание!", MessageBoxButtons.OK);
                    lLogger.ErrMessage += "Ошибка приложения. Проверьте путь доступа к файлу: " + e.Message;
                }

                else if (e.NativeErrorCode == ERROR_ACCESS_DENIED)
                {
                    // MessageBox.Show("Ошибка приложения. Доступ к файлу запрещен: " + e.Message, "Внимание!", MessageBoxButtons.OK);
                    lLogger.ErrMessage += "Ошибка приложения. Доступ к файлу запрещен: " + e.Message;
                }
            }
            catch (Exception ex)
            {
                // MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }

            return iCnt;

        }


        public  bool UpdateRestrictionRow(OleDbConnection con, DataRow row, Logger_ufssprk_tools lLogger)
        {
            // обновить 
            decimal nID = 0;
            decimal nDocID = 0;
            string txtID, txtDocID;

            txtID = Convert.ToString(row["acc_id"]).Trim();
            txtDocID = Convert.ToString(row["id"]).Trim();


            if (!Decimal.TryParse(txtID, out nID))
            {
                nID = 0;
            }

            if (!Decimal.TryParse(txtDocID, out nDocID))
            {
                nDocID = 0;
            }
            // теперь все обновляем как выгруженные, ведь мы вставляем ответ и если оставить его - то он будет копиться
            return SetExtRestrProcessed(con, nDocID, 1, lLogger);
        }


        public bool UpdateExtRequestRow(OleDbConnection con, DataRow row, Logger_ufssprk_tools lLogger)
        {
            // обновить запрос из пакета
            decimal nID = 0;
            decimal nReqID = 0;
            int iGod = 0;
            string txtGod, txtID, txtPackID, txtReqID;

            txtGod = Convert.ToString(row["GOD"]).Trim();
            txtID = Convert.ToString(row["ext_request_id"]).Trim();
            txtReqID = Convert.ToString(row["zapros"]).Trim();

            // надо будет не только этот пакет, row["pack_id"], но и аналогичные...
            // логика такова, что мне нужен не только этот sendlist и это этот пакет,
            // но и все остальные sendlist по этому запросу ID, которые отправлены контрагентам из LegalList
            // и все пакеты, в которые включены эти самые sendlist
            // то есть входными данными является req.id и Legal_list
            // 

            if (!Int32.TryParse(txtGod, out iGod))
            {
                iGod = 0;
            }

            if (!Decimal.TryParse(txtID, out nID))
            {
                nID = 0;
            }

            if (!Decimal.TryParse(txtReqID, out nReqID))
            {
                nReqID = 0;
            }

            if (iGod == -1)
            {
                // 15 - выгружено с ошибкой
                SetDocumentStatus(con, nReqID, 15, lLogger);
            }
            //else
            //{
            //    return SetExtReqProcessed(nID, 1);
            //}


            // теперь все обновляем как выгруженные, ведь мы вставляем ответ и если оставить его - то он будет копиться
            return SetExtReqProcessed(con, nID, 1, lLogger);
        }

        private bool SetExtRestrProcessed(OleDbConnection con, Decimal nID, int nProcessed, Logger_ufssprk_tools lLogger)
        {
            bool bUpdated = true;
            OleDbTransaction tran = null;
            OleDbCommand m_cmd;

            try
            {

                if (nID != 0)
                {
                    // UPDATE EXT_RESTRICTION SET proceed = nProcessed WHERE id = nID 

                    if (con != null && con.State != ConnectionState.Closed) con.Close();
                    con.Open();
                    tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                    m_cmd = new OleDbCommand();
                    m_cmd.Connection = con;
                    m_cmd.Transaction = tran;

                    m_cmd.CommandText = "UPDATE EXT_RESTRICTION SET proceed  = :STATUS WHERE id = :ID ";


                    m_cmd.Parameters.Add(new OleDbParameter(":STATUS", nProcessed));
                    m_cmd.Parameters.Add(new OleDbParameter(":ID", nID));

                    if (m_cmd.ExecuteNonQuery() == -1)
                    {
                        bUpdated = false;
                    }

                    tran.Commit();
                    con.Close();

                    if (!bUpdated)
                    {
                        Exception ex = new Exception("Error Updating EXT_RESTRICTION table id = " + nID.ToString());
                        throw ex;
                    }
                }
                else
                {
                    // когда будет статус - ошибка - тут надо будет ставить запрос на статус ОШИБКА

                }

            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                return false;
            }
            catch (Exception ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                return false;
            }
            return true;

        }


        public bool SetExtReqProcessed(OleDbConnection con, Decimal nID, int nProcessed, Logger_ufssprk_tools lLogger)
        {
            bool bUpdated = true;
            OleDbTransaction tran = null;
            OleDbCommand m_cmd;

            try
            {
                if (nID != 0)
                {
                    // UPDATE ext_request SET processed = nProcessed WHERE ext_request_id = nID 

                    if (con != null && con.State != ConnectionState.Closed) con.Close();
                    con.Open();
                    tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                    m_cmd = new OleDbCommand();
                    m_cmd.Connection = con;
                    m_cmd.Transaction = tran;

                    m_cmd.CommandText = "UPDATE ext_request SET processed = :STATUS WHERE ext_request_id = :ID ";


                    m_cmd.Parameters.Add(new OleDbParameter(":STATUS", nProcessed));
                    m_cmd.Parameters.Add(new OleDbParameter(":ID", nID));

                    if (m_cmd.ExecuteNonQuery() == -1)
                    {
                        bUpdated = false;
                    }

                    tran.Commit();
                    con.Close();

                    if (!bUpdated)
                    {
                        Exception ex = new Exception("Error Updating ext_request table id = " + nID.ToString());
                        throw ex;
                    }
                }
                else
                {
                    // когда будет статус - ошибка - тут надо будет ставить запрос на статус ОШИБКА

                }

            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    //MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                return false;
            }
            catch (Exception ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                // MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                return false;
            }
            return true;

        }


        private bool SetDocumentStatus(OleDbConnection con, Decimal nID, int nStatus, Logger_ufssprk_tools lLogger)
        {
            OleDbCommand m_cmd;
            bool bUpdated = true;
            OleDbTransaction tran = null;

            try
            {

                if (nID != 0)
                {
                    // UPDATE DOCUMENT SET docstatusid = nStatus WHERE id = nID 


                    if (con != null && con.State != ConnectionState.Closed) con.Close();
                    con.Open();
                    tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                    m_cmd = new OleDbCommand();
                    m_cmd.Connection = con;
                    m_cmd.Transaction = tran;
                    m_cmd.CommandText = "UPDATE DOCUMENT SET docstatusid = :STATUS WHERE id = :ID ";


                    m_cmd.Parameters.Add(new OleDbParameter(":STATUS", nStatus));
                    m_cmd.Parameters.Add(new OleDbParameter(":ID", nID));

                    if (m_cmd.ExecuteNonQuery() == -1)
                    {
                        bUpdated = false;
                    }

                    tran.Commit();
                    con.Close();

                    if (!bUpdated)
                    {
                        Exception ex = new Exception("Error Updating document table id = " + nID.ToString());
                        throw ex;
                    }
                }
                else
                {
                    // когда будет статус - ошибка - тут надо будет ставить запрос на статус ОШИБКА

                }

            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                return false;
            }
            catch (Exception ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                // MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                return false;
            }
            return true;

        }


        public DataTable ReadSber_1SS_File(string txtFileFullPath, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;

            try
            {
                // прочитать все строки из XLS файла
                //Strings = ReadPaths(openFileDialog1.FileName, Encoding.UTF8);

                // string txtFileDir = openFileDialog1.FileName.Substring(0, openFileDialog1.FileName.Length - tablename.Length - 4);
                OleDbConnection XLScon = new OleDbConnection();
                XLScon.ConnectionString = string.Format("Provider =Microsoft.Jet.OLEDB.4.0; Data Source =" + txtFileFullPath + "; Extended Properties =\"Excel 8.0;HDR=NO\";");
                XLScon.Open();

                // Получаем список листов в файле
                DataTable schemaTable = XLScon.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, new object[] { null, null, null, "TABLE" });
                string sheet1 = "Лист 1";
                if (schemaTable != null)
                {
                    if (schemaTable.Rows.Count > 0) sheet1 = Convert.ToString(schemaTable.Rows[0]["TABLE_NAME"]);
                }

                OleDbCommand m_cmd = new OleDbCommand();
                m_cmd.Connection = XLScon;
                //m_cmd.CommandText = "SELECT * from [" + sheet1 + "]";
                m_cmd.CommandText = "SELECT F2 as id, F3 as execProcNumber, F8 as debtorFirstName, F7 as debtorLastName, F9 as debtorSecondName, F12 as accountNumber, F11 as summ, 'Принят к исполнению – постановление передано на обработку' as ProcNumberState, 0 as Status from [" + sheet1 + "] WHERE F1 > 0 ORDER BY F1";

                DataSet ds = new DataSet();
                dtRes = ds.Tables.Add("otvet");
                using (OleDbDataReader rdr = m_cmd.ExecuteReader(CommandBehavior.Default))
                {
                    ds.Load(rdr, LoadOption.OverwriteChanges, dtRes);
                    rdr.Close();
                }
                XLScon.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных из XLS (ReadSber_1SS_File).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных их XLS (ReadSber_1SS_File).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }


        public DataTable ReadSberSSSFile(string txtFileFullPath, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;

            try
            {
                // прочитать все строки из XLS файла
                //Strings = ReadPaths(openFileDialog1.FileName, Encoding.UTF8);

                // string txtFileDir = openFileDialog1.FileName.Substring(0, openFileDialog1.FileName.Length - tablename.Length - 4);
                OleDbConnection XLScon = new OleDbConnection();
                XLScon.ConnectionString = string.Format("Provider =Microsoft.Jet.OLEDB.4.0; Data Source =" + txtFileFullPath + "; Extended Properties =\"Excel 8.0;HDR=NO\";");
                XLScon.Open();

                // Получаем список листов в файле
                DataTable schemaTable = XLScon.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, new object[] { null, null, null, "TABLE" });
                string sheet1 = "Лист 1";
                if (schemaTable != null)
                {
                    if (schemaTable.Rows.Count > 0) sheet1 = Convert.ToString(schemaTable.Rows[0]["TABLE_NAME"]);
                }

                OleDbCommand m_cmd = new OleDbCommand();
                m_cmd.Connection = XLScon;
                m_cmd.CommandText = "SELECT * from [" + sheet1 + "]";

                DataSet ds = new DataSet();
                dtRes = ds.Tables.Add("otvet");
                using (OleDbDataReader rdr = m_cmd.ExecuteReader(CommandBehavior.Default))
                {
                    ds.Load(rdr, LoadOption.OverwriteChanges, dtRes);
                    rdr.Close();
                }
                XLScon.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных их XLS (ReadSberSSSFile).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных их XLS (ReadSberSSSFile).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
        
            return dtRes;
        }

        public DataTable GetSberSpecPensTable()
        {
            //
            // Here we create a DataTable with four columns.
            //
            DataTable table = new DataTable();
            table.Columns.Add("ROSPI", typeof(string));
            table.Columns.Add("NSP", typeof(string));
            table.Columns.Add("FD", typeof(string));
            table.Columns.Add("ID", typeof(string));
            table.Columns.Add("OD", typeof(string));
            table.Columns.Add("DATE_R", typeof(DateTime));

            return table;
        }

        public DataTable GetEgrulDataTable()
        {
            
            DataTable table = new DataTable();
            table.Columns.Add("name", typeof(string));
            table.Columns.Add("adr", typeof(string));

            return table;
        }



        public DataTable GetSberReportTable()
        {
            //
            // создать табличку для ответов
            //
            DataTable table = new DataTable();
            table.Columns.Add("RESTRICTION_ID", typeof(decimal)); //ID постновления
            table.Columns.Add("ACC_ID", typeof(decimal)); //acc id 
            table.Columns.Add("ACC", typeof(string)); //acc текст
            table.Columns.Add("IP_ID", typeof(decimal)); //ID ИП
            table.Columns.Add("DOC_DATE", typeof(DateTime)); //Дата формирования ответа? Дата загрузки? Дата чего?
            table.Columns.Add("ANSWER_TYPE", typeof(string)); // Тип ответа из справочника MVV_RESPONSE_ANSWER_TYPE
            table.Columns.Add("DESCRIPTION", typeof(string)); // Текст ответа (из справочника MVV_RESPONSE_ANSWER_TYPE)?
            table.Columns.Add("LEGAL_IMPOSSIBILITY", typeof(string)); // Причина неисполнения
            table.Columns.Add("INSIDE_INFORMATION", typeof(string)); // Служебная информация
            table.Columns.Add("COMMENT", typeof(string)); // дополнительный комментарий (возможно пригодится чтобы показать СПИ)

            /*
            table.Columns.Add("execProcNumber", typeof(string)); // Номер ИП
            table.Columns.Add("debtorFirstName", typeof(string)); // Имя
            table.Columns.Add("debtorLastName", typeof(string)); // Фамилия
            table.Columns.Add("debtorSecondName", typeof(string)); // Отчество
            table.Columns.Add("accountNumber", typeof(string)); // Номер счета платильщика
            table.Columns.Add("summ", typeof(decimal)); // сумма операции
            table.Columns.Add("ProcNumberState", typeof(string)); // Примечание
            table.Columns.Add("Status", typeof(int)); // код примечания
             */
            return table;
        }

        public DataTable GetPfr2017OtvetTable()
        {
            //
            // создать табличку для ответов
            //
            DataTable table = new DataTable();
            table.Columns.Add("id", typeof(decimal)); //номер запроса
            table.Columns["id"].SetOrdinal(0);

            /*
            table.Columns.Add("IND_DOC", typeof(string)); // Номер ИП
            table.Columns["IND_DOC"].SetOrdinal(1);
            */

            table.Columns.Add("SNILS", typeof(string));
            table.Columns["SNILS"].SetOrdinal(1);

            table.Columns.Add("FAM", typeof(string)); // Имя
            table.Columns["FAM"].SetOrdinal(2);
            
            table.Columns.Add("NAM", typeof(string)); // Фамилия
            table.Columns["NAM"].SetOrdinal(3);

            table.Columns.Add("PTR", typeof(string)); // Отчество
            table.Columns["PTR"].SetOrdinal(4);
            
            table.Columns.Add("DTRG", typeof(string)); // Дата рождения
            table.Columns["DTRG"].SetOrdinal(5);
            
            table.Columns.Add("INNZL", typeof(string)); // ИНН застрахованного лица
            table.Columns["INNZL"].SetOrdinal(6);
            
            table.Columns.Add("ENTNUM", typeof(string)); // Номер 
            table.Columns["ENTNUM"].SetOrdinal(7);
            
            table.Columns.Add("OTCHPRDY", typeof(string)); // Год отчетного периода
            table.Columns["OTCHPRDY"].SetOrdinal(8);

            table.Columns.Add("OTCHPRDM", typeof(string)); // Месяц отчетного периода
            table.Columns["OTCHPRDM"].SetOrdinal(9);
            
            table.Columns.Add("INN", typeof(string)); // Инн страхователя
            table.Columns["INN"].SetOrdinal(10);

            table.Columns.Add("KPP", typeof(string)); // КПП страхователя
            table.Columns["KPP"].SetOrdinal(11);

            table.Columns.Add("NAMFUL", typeof(string)); // Наименование страхователя
            table.Columns["NAMFUL"].SetOrdinal(12);

            table.Columns.Add("SNILS14", typeof(string)); // СНИЛС застрахованного
            table.Columns["SNILS14"].SetOrdinal(13);

            table.Columns.Add("TEMP", typeof(string)); // в конец добавил запасной столбец
            table.Columns["TEMP"].SetOrdinal(14);


            return table;
        }


        public DataTable GetSberKvitTable()
        {
            //
            // создать табличку для ответов
            //
            DataTable table = new DataTable();
            table.Columns.Add("id", typeof(decimal)); //номер запроса
            table.Columns.Add("execProcNumber", typeof(string)); // Номер ИП
            table.Columns.Add("debtorFirstName", typeof(string)); // Имя
            table.Columns.Add("debtorLastName", typeof(string)); // Фамилия
            table.Columns.Add("debtorSecondName", typeof(string)); // Отчество
            table.Columns.Add("accountNumber", typeof(string)); // Номер счета платильщика
            table.Columns.Add("summ", typeof(decimal)); // сумма операции
            table.Columns.Add("ProcNumberState", typeof(string)); // Примечание
            table.Columns.Add("Status", typeof(int)); // код примечания
            return table;
        }

        // select first 1 coalesce(o_ip.ip_id, 0) ip_id from o_ip where id = 86011087137020
        // получить номер ип по id постановления
        public decimal GetIP_ID_ByActID(OleDbConnection con, Decimal nActId, Logger_ufssprk_tools lLogger)
        {
            Decimal res = 0;
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select first 1 coalesce(o_ip.ip_id, 0) ip_id from o_ip where id = " + nActId.ToString(), con, tran);
                //OleDbCommand cmd = new OleDbCommand("select first 1 restr.act_id from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key  where acc.id = " + nAccId.ToString(), con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными (GetIP_ID_ByActID). Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения (GetIP_ID_ByActID). Message: " + ex.ToString();
            }
            return res;
        }

        public decimal GetActIdByAccIpNoFedMvv(OleDbConnection con, string txtIpNo, string txtAcc, Logger_ufssprk_tools lLogger)
        {
            Decimal res = 0;
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select first 1 D2.ID from DOCUMENT D join O_IP on O_IP.IP_ID = D.ID join O on O.ID = O_IP.ID join DOCUMENT D2 on D2.ID = O_IP.ID join datum_link_oip dlip on dlip.doc_id = d2.id join MVV_DATUM DAT on DAT.id = dlip.datum_id join MVV_DATUM_ACCOUNT ACC on ACC.ID = DAT.ID join o_ip_act_arrest_money aa on aa.id = d2.id where D.DOCSTATUSID > 1 and D.DOCUMENTCLASSID = 2 and D2.METAOBJECTNAME in ('O_IP_ACT_ENDGACCOUNT_MONEY') and D2.DOCSTATUSID > 1 and O.DOC_ELECTRON = 1 and aa.bank_agent_code = 'СБЕР' and D.DOC_NUMBER = '" + txtIpNo + "' and ACC.ACC = '" + txtAcc + "' order by D2.DOC_DATE desc", con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными (GetActIdByAccIpNo). Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения (GetActIdByAccIpNo). Message: " + ex.ToString();
            }
            return res;
        }

        public decimal GetActIdByAccIpNo(OleDbConnection con, string txtIpNo, string txtAcc, Logger_ufssprk_tools lLogger)
        {
            Decimal res = 0;
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select first 1 d2.id from document d join o_ip on o_ip.ip_id = d.id join o on o.id = o_ip.id join document d2 on d2.id = o_ip.id join mvv_datum dat on dat.document_id = o_ip.id join mvv_datum_account acc on acc.id = dat.id where  d.docstatusid > 1 and d.documentclassid = 2 and d2.metaobjectname in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY') and  d2.docstatusid > 1 and o.doc_electron = 1  and o.contr_name = 'Центр сопровождения клиентских операций \"Волга-Сити\" ОАО \"Сбербанк России\"' and d.doc_number = '" + txtIpNo + "' and acc.acc = '" + txtAcc + "' order by d2.doc_date desc", con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными (GetActIdByAccIpNo). Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения (GetActIdByAccIpNo). Message: " + ex.ToString();
            }
            return res;
        }

        public decimal GetActIdByAccID(OleDbConnection con, Decimal nAccId, Logger_ufssprk_tools lLogger)
        {
            Decimal res = 0;
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select first 1 restr.act_id from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id  join EXT_RESTRICTION restr on CAST(COALESCE(inf.document_key, 0) as bigint) = restr.id  where acc.id = " + nAccId.ToString(), con, tran);
                //OleDbCommand cmd = new OleDbCommand("select first 1 restr.act_id from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key  where acc.id = " + nAccId.ToString(), con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными (GetActIdByAccID). Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения (GetActIdByAccID). Message: " + ex.ToString();
            }
            return res;
        }

        public decimal FindIP_ID_EXT_INFO_ID(OleDbConnection con, decimal nExtInfId, Logger_ufssprk_tools lLogger)
        {
            decimal res = 0;
            try
            {

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                //OleDbCommand cmd = new OleDbCommand("select sl.ip_id from ext_information inf join ext_restriction r  on CAST(COALESCE(r.id, 0) as varchar(60)) = inf.document_key join  mvv_sendlist sl  on r.act_id = sl.id where inf.id = '" + nExtInfId.ToString() + "'", con, tran);
                OleDbCommand cmd = new OleDbCommand("select first 1 r.ip_id from ext_information inf join ext_restriction r on CAST(COALESCE(r.id, 0) as varchar(60)) = inf.document_key  where inf.id =  '" + nExtInfId.ToString() + "'", con, tran);
                
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return res;
        }


        public decimal FindIP_ID_BY_OIP_ID(OleDbConnection con, decimal nOipId, Logger_ufssprk_tools lLogger)
        {
            decimal res = 0;
            try
            {

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                //OleDbCommand cmd = new OleDbCommand("select sl.ip_id from ext_information inf join ext_restriction r  on CAST(COALESCE(r.id, 0) as varchar(60)) = inf.document_key join  mvv_sendlist sl  on r.act_id = sl.id where inf.id = '" + nExtInfId.ToString() + "'", con, tran);
                OleDbCommand cmd = new OleDbCommand("select first 1 oip.ip_id from o_ip oip where oip.id =  '" + nOipId.ToString() + "'", con, tran);

                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return res;
        }

        public string FindIpNoByIP_ID(OleDbConnection con, decimal ip_id, Logger_ufssprk_tools lLogger)
        {
            string res = "";
            try
            {

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select first 1 d.doc_number from document d where d.id = " + ip_id.ToString(), con, tran);
                res = Convert.ToString(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return res;
        }

        public decimal FindIP_IDbyNum_AllStatusValid(OleDbConnection con, string txtIPNO, Logger_ufssprk_tools lLogger)
        {
            decimal res = 0;
            try
            {

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select d.id from document d where d.docstatusid > 1 and d.documentclassid = 2 and d.doc_number = '" + txtIPNO + "'", con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return res;
        }



        public DataTable MakeExtKvitTable(OleDbConnection con, DataTable dtTableFrom_1SS, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;
            try
            {

                dtRes = GetSberKvitTable();
                // string tablename = openFileDialog1.FileName.Substring(0, openFileDialog1.FileName.Length - 4);
                // tablename = tablename.Substring(tablename.LastIndexOf("\\") + 1);


                foreach (DataRow tbl_row in dtTableFrom_1SS.Rows)
                {
                    DataRow row = dtRes.NewRow();
                    row["id"] = Convert.ToDecimal(tbl_row["id"]);
                    row["execProcNumber"] = Convert.ToString(tbl_row["execProcNumber"]);
                    row["debtorFirstName"] = Convert.ToString(tbl_row["debtorFirstName"]);
                    row["debtorLastName"] = Convert.ToString(tbl_row["debtorLastName"]);
                    row["debtorSecondName"] = Convert.ToString(tbl_row["debtorSecondName"]);
                    row["accountNumber"] = Convert.ToString(tbl_row["accountNumber"]);
                    row["summ"] = Convert.ToDecimal(Convert.ToString(tbl_row["summ"]).Replace('.', ','));
                    row["ProcNumberState"] = Convert.ToString(tbl_row["ProcNumberState"]);
                    row["Status"] = Convert.ToInt32(tbl_row["Status"]);

                    // добавить собранную строчку в таблицу
                    dtRes.Rows.Add(row);
                }
                
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при конвертации данных их XLS в параметры EXT_KVIT (MakeExtKvitTable).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при конвертации данных их XLS в параметры EXT_KVIT (MakeExtKvitTable).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }

        // эта функция для нового варианта XLS (SSS) отчетов Сбербанка - 20151003
        public DataTable MakeExtReportTable3(OleDbConnection con, DataTable dtTableFromSSS, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;
            try
            {

                dtRes = GetSberReportTable();


                // попробуем взять кол-во колонок и отнять 2 с конца.
                // проверить первую строку, если она 1 символ и TryParse Int32 - то ок
                // иначе по тому же критерию пробуем 3-ю колонку с конца

                // проверить что таблица содержит строки и 12 столбцов
                if ((dtTableFromSSS.Rows.Count == 0) || (dtTableFromSSS.Columns.Count < 12)) // сначала было 12, на втором тесте добавили еще 13-й столбец номер постановления 
                {
                    return dtRes; // если что-то не так, то просто вернем пустую таблицу
                }
                
                foreach (DataRow tbl_row in dtTableFromSSS.Rows)
                {
                    // проверить что первая строка - это заголовок и пропустить ее
                    if (!(Convert.ToString(tbl_row["F1"]).Trim().ToUpper().Equals("№")
&& Convert.ToString(tbl_row["F12"]).Trim().ToUpper().Equals("УНИКАЛЬНЫЙ ИДЕНТИФИКАТОР ПОСТАНОВЛЕНИЯ"))
&& !(Convert.ToString(tbl_row["F1"]).Trim().ToUpper().StartsWith("ДАТА ФОРМИРОВАНИЯ"))
                        )
                    {
                        DataRow row = dtRes.NewRow();

                        row["ACC_ID"] = 0; // в отчете нет acc_id - поэтому оставим 0

                        string txtACC = "";
                        txtACC = Convert.ToString(tbl_row["F7"]).Trim();
                        row["ACC"] = txtACC;

                        decimal nAct_id = -1;

                        string txtActId = Convert.ToString(tbl_row["F12"]).Trim();
                        if (txtActId.Length > 0)
                        {
                            Decimal.TryParse(txtActId, out nAct_id);
                        }

                        row["RESTRICTION_ID"] = nAct_id;

                        decimal IP_ID = 0;
                        if (nAct_id > 0)
                            IP_ID = GetIP_ID_ByActID(con, nAct_id, lLogger);

                        // если не нашли по ID счета (ext_information), искать будем по номеру ИП
                        if (IP_ID == 0)
                        {
                            string txtIpNo = Convert.ToString(tbl_row["F4"]).Trim();
                            txtIpNo = txtIpNo.Trim('.');
                            if (txtIpNo.Length > 0) IP_ID = FindIP_IDbyNum_AllStatusValid(con, txtIpNo, lLogger);

                        }
                        row["IP_ID"] = IP_ID;

                        row["DOC_DATE"] = DateTime.Today;



                        string txtAnswType = "0";
                        if (dtTableFromSSS.Columns.Contains("F11"))
                            txtAnswType = Convert.ToString(tbl_row["F11"]).Trim();

                        string txtPkOspAnswCode = "";
                        string txtDescr = "";
                        /*
                        RESTRICTION_ANSWER_TYPE
                        Частично исполнен: 4 — Постановление исполнено частично,
                        Исполнен: 3 — Постановление исполнено в полном объеме,
                         */
                        switch (txtAnswType)
                        {
                            case ("Исполнен"): txtPkOspAnswCode = "3"; txtDescr = "постановление исполнено в полном объеме;"; break;
                            case ("Частично исполнен"): txtPkOspAnswCode = "4"; txtDescr = "постановление исполнено частично;"; break;
                            /*
                            case ("3"): txtPkOspAnswCode = "2"; txtDescr = "повтор (отказано в исполнении);"; break;
                            case ("4"): txtPkOspAnswCode = "11"; txtDescr = "в картотеку заведено;"; break;
                            */
                        }
                        row["INSIDE_INFORMATION"] = txtDescr;
                        row["ANSWER_TYPE"] = txtPkOspAnswCode;

                        row["DESCRIPTION"] = txtDescr;

                        string txtSum = Convert.ToString(tbl_row["F10"]).Trim();
                        string txtSumID = Convert.ToString(tbl_row["F9"]).Trim();
                        // нужно обязательно добавить номер Л\C в сообщение
                        row["INSIDE_INFORMATION"] = cutEnd("(Л\\С № " + txtACC + ") - " + txtDescr + " со счета писана сумма = " + txtSum + " (из " + txtSumID + ")" , 512);
                        row["COMMENT"] = "Вид постановления: " + Convert.ToString(tbl_row["F3"]).Trim() + "; ";
                        row["COMMENT"] += "Дата постановления: " + Convert.ToDateTime(tbl_row["F2"]).ToShortDateString() + "; ";
                        row["COMMENT"] += "№ л.с.: " + txtACC + "; ";
                        row["COMMENT"] += "Списано : " + txtSum;
                        row["COMMENT"] += " (из " + txtSumID + "); ";
                        row["COMMENT"] += " на р.с. получателя :" + Convert.ToString(tbl_row["F8"]).Trim() + "); ";
                        row["COMMENT"] += "Результат : " + txtAnswType + "; ";
                        

                        /*
                        string txtReason = "";
                        if (dtTableFromSSS.Columns.Contains(txtColF19))
                            txtReason = Convert.ToString(tbl_row[txtColF19]).Trim();
                        row["LEGAL_IMPOSSIBILITY"] = txtReason;
                        */
                        // добавить собранную строчку в таблицу
                        dtRes.Rows.Add(row);
                    }
                }
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при конвертации данных их XLS в параметры EXT_REPORT (MakeExtReportTable).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при конвертации данных их XLS в параметры EXT_REPORT (MakeExtReportTable).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }


        /* для загрузки отчетов ПФР о взятии в обработку постановлений на первом этапе пробуем использовать уже существующий функционал */
        
         /*
            table.Columns.Add("RESTRICTION_ID", typeof(decimal)); //ID постновления
            table.Columns.Add("ACC_ID", typeof(decimal)); //acc id 
            table.Columns.Add("ACC", typeof(string)); //acc текст
            table.Columns.Add("IP_ID", typeof(decimal)); //ID ИП
            table.Columns.Add("DOC_DATE", typeof(DateTime)); //Дата формирования ответа? Дата загрузки? Дата чего?
            table.Columns.Add("ANSWER_TYPE", typeof(string)); // Тип ответа из справочника MVV_RESPONSE_ANSWER_TYPE
            table.Columns.Add("DESCRIPTION", typeof(string)); // Текст ответа (из справочника MVV_RESPONSE_ANSWER_TYPE)?
            table.Columns.Add("LEGAL_IMPOSSIBILITY", typeof(string)); // Причина неисполнения
            table.Columns.Add("INSIDE_INFORMATION", typeof(string)); // Служебная информация
            table.Columns.Add("COMMENT", typeof(string)); // дополнительный комментарий (возможно пригодится чтобы показать СПИ)
        */


        public DataTable MakeExtReportTable3(OleDbConnection con, DataTable dtTableFrom_XML, out decimal nCancelRows, Logger_ufssprk_tools lLogger)
        {
            /* dtTableFrom_XML - таблица, полученная после чтения XML */

            DataTable dtRes = null;
            nCancelRows = 0;
            try
            {
                // ReadPfrReportXML(string txtPath)
                dtRes = GetSberReportTable();
                foreach (DataRow tbl_row in dtTableFrom_XML.Rows)
                {
                    DataRow row = dtRes.NewRow();
                    decimal nR_id = Convert.ToDecimal(tbl_row["id"]);
                    row["ACC_ID"] = nR_id;

                    string txtACC = "";
                    txtACC = Convert.ToString(tbl_row["accountNumber"]);
                    row["ACC"] = txtACC;

                    // в строке скорее всего не restriction _id а acc_id
                    // поэтому нужно будет провести конвертацию
                    decimal nAct_id = GetActIdByAccID(con, nR_id, lLogger);
                    string txtIpNo = Convert.ToString(tbl_row["execProcNumber"]).Trim();

                    // если не нащли ничего (такое может быть если почистили ИТ)
                    // то нужно искать по номеру ИП по последнему постановлению и номеру счета где был такой счет
                    if (nAct_id == 0)
                    {
                        nAct_id = GetActIdByAccIpNo(con, txtIpNo, txtACC, lLogger);
                    }
                    row["RESTRICTION_ID"] = nAct_id;

                    decimal IP_ID = 0;
                    if (nR_id > 0)
                        IP_ID = FindIP_ID_EXT_INFO_ID(con, nR_id, lLogger);

                    // если не нашли по ID счета (ext_information), искать будем по номеру ИП
                    if (IP_ID == 0)
                    {
                        if (txtIpNo.Length > 0) IP_ID = FindIP_IDbyNum_AllStatusValid(con, txtIpNo, lLogger);

                    }
                    row["IP_ID"] = IP_ID;

                    row["DOC_DATE"] = DateTime.Today;



                    string txtAnswType = "0";
                    txtAnswType = Convert.ToString(tbl_row["Status"]).Trim();

                    string txtPkOspAnswCode = "";
                    string txtDescr = Convert.ToString(tbl_row["ProcNumberState"]).Trim();


                    // ЛТП 2 № 122586. Добавление типа статуса в ИТ
                    // Для указания данной информации в EXT_REPORT было добавлено поле INSIDE_INFORMATION.
                    // Данное поле служит для указания промежуточных статусов, которые явно не указывают на факт исполнения постановлений.
                    // При заполнении указанного поля не заполняется поле RESTRICTION_ANSWER_TYPE.

                    // на основании этого делаю вывод - для квитанций не загружаем тип ответа - только текст в INSIDE_INFORMATION
                    // дополнение - а если это реальный отказ, то тут нужно делать
                    // поэтому статусы для возврата - это обязательно


                    /*
                    0 - нет в картотеке = 2
                    1 - исполнено полностью = 1
                    2 - исполнено частично = 1
                    3 - отказ (повтор или счет не найден или счет закрыт) = 13
                    4 - в картотеку заведено = 1
                     */
                    switch (txtAnswType)
                    {
                        // Код примечания	Примечание(ProcNumberState)
                        //0 - Принят к исполнению – постановление передано на обработку
                        //1 - Принят к исполнению – постановление передано на обработку
                        //2 - Возврат - отсутствуют, либо не корректны  обязательные реквизиты - постановление не принято к исполнению
                        //3 - Возврат – дубликат ИД - постановление не принято к исполнению
                        //4 - Возврат – счет закрыт - постановление не принято к исполнению
                        //5 - Возврат – счет не найден - постановление не принято к исполнению
                        //7 - Возврат – несоответствие персональных данных – постановление не принято к исполнению
                        //8 - Принят к исполнению – постановление передано на обработку
                        //10 - Принят к исполнению – постановление передано на обработку


                        case ("0"): txtPkOspAnswCode = "11"; txtDescr = "Постановление поставлено в картотеку;"; break;
                        case ("1"): txtPkOspAnswCode = "11"; txtDescr = "Постановление поставлено в картотеку;"; break;
                        case ("8"): txtPkOspAnswCode = "11"; txtDescr = "Постановление поставлено в картотеку;"; break;
                        case ("10"): txtPkOspAnswCode = "11"; txtDescr = "Постановление поставлено в картотеку;"; break;

                        case ("2"): txtPkOspAnswCode = "5"; txtDescr = "Постановление не принято к исполнению в связи с отсутствием обязательных реквизитов постановления;"; break;
                        case ("3"): txtPkOspAnswCode = "8"; txtDescr = "Постановление было принято и обработано ранее;"; break;
                        case ("4"): txtPkOspAnswCode = "6"; txtDescr = "Постановление не исполнено, т.к. арест не найден или счета закрыты;"; break;
                        case ("5"): txtPkOspAnswCode = "2"; txtDescr = "Постановление не может быть исполнено;"; break;
                        case ("7"): txtPkOspAnswCode = "2"; txtDescr = "Постановление не может быть исполнено;"; break;
                    }
                    // нужно обязательно добавить номер Л\C в сообщение
                    row["INSIDE_INFORMATION"] = cutEnd("(Л\\С № " + txtACC + ") - " + Convert.ToString(tbl_row["ProcNumberState"]).Trim(), 512);

                    // заполнять только если это ОТКАЗ, то есть не 11
                    if (txtPkOspAnswCode != "11")
                    {
                        row["DESCRIPTION"] = cutEnd(txtDescr, 1000);
                        row["ANSWER_TYPE"] = txtPkOspAnswCode;
                        // строку добавлять только если это отказ - иначе не нужно - обойдемся обычной квитанцией
                        nCancelRows += 1;
                    }
                    dtRes.Rows.Add(row);


                }
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при конвертации данных их XLS в параметры EXT_REPORT (MakeExtReportTable).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при конвертации данных их XLS в параметры EXT_REPORT (MakeExtReportTable).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }



        public DataTable MakeExtReportTable2(OleDbConnection con, DataTable dtTableFrom_1SS, out decimal nCancelRows, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;
            nCancelRows = 0;
            try
            {

                dtRes = GetSberReportTable();
                foreach (DataRow tbl_row in dtTableFrom_1SS.Rows)
                {
                    DataRow row = dtRes.NewRow();
                    decimal nR_id = Convert.ToDecimal(tbl_row["id"]);
                    row["ACC_ID"] = nR_id;

                    string txtACC = "";
                    txtACC = Convert.ToString(tbl_row["accountNumber"]);
                    row["ACC"] = txtACC;

                    // в строке скорее всего не restriction _id а acc_id
                    // поэтому нужно будет провести конвертацию
                    decimal nAct_id = GetActIdByAccID(con, nR_id, lLogger);
                    string txtIpNo = Convert.ToString(tbl_row["execProcNumber"]).Trim();

                    // если не нащли ничего (такое может быть если почистили ИТ)
                    // то нужно искать по номеру ИП по последнему постановлению и номеру счета где был такой счет
                    if (nAct_id == 0)
                    {
                        nAct_id = GetActIdByAccIpNo(con, txtIpNo, txtACC, lLogger);
                    }

                    if (nAct_id == 0)
                    {
                        nAct_id = GetActIdByAccIpNoFedMvv(con, txtIpNo, txtACC, lLogger);
                    }

                    

                    // для нашего случая, когда act_id известен и не нужно ничего преобразовывать нужна просто проверка что act-id
                    // верный

                    row["RESTRICTION_ID"] = nAct_id;

                    decimal IP_ID = 0;
                    if (nR_id > 0)
                        IP_ID = FindIP_ID_EXT_INFO_ID(con, nR_id, lLogger);

                    // если не нашли по ID счета (ext_information), искать будем по номеру ИП
                    if (IP_ID == 0)
                    {
                        if (txtIpNo.Length > 0) IP_ID = FindIP_IDbyNum_AllStatusValid(con, txtIpNo, lLogger);

                    }
                    row["IP_ID"] = IP_ID;

                    row["DOC_DATE"] = DateTime.Today;



                    string txtAnswType = "0";
                    txtAnswType = Convert.ToString(tbl_row["Status"]).Trim();

                    string txtPkOspAnswCode = "";
                    string txtDescr = Convert.ToString(tbl_row["ProcNumberState"]).Trim();


                    // ЛТП 2 № 122586. Добавление типа статуса в ИТ
                    // Для указания данной информации в EXT_REPORT было добавлено поле INSIDE_INFORMATION.
                    // Данное поле служит для указания промежуточных статусов, которые явно не указывают на факт исполнения постановлений.
                    // При заполнении указанного поля не заполняется поле RESTRICTION_ANSWER_TYPE.

                    // на основании этого делаю вывод - для квитанций не загружаем тип ответа - только текст в INSIDE_INFORMATION
                    // дополнение - а если это реальный отказ, то тут нужно делать
                    // поэтому статусы для возврата - это обязательно


                    /*
                    0 - нет в картотеке = 2
                    1 - исполнено полностью = 1
                    2 - исполнено частично = 1
                    3 - отказ (повтор или счет не найден или счет закрыт) = 13
                    4 - в картотеку заведено = 1
                     */
                    switch (txtAnswType)
                    {
                        // Код примечания	Примечание(ProcNumberState)
                        //0 - Принят к исполнению – постановление передано на обработку
                        //1 - Принят к исполнению – постановление передано на обработку
                        //2 - Возврат - отсутствуют, либо не корректны  обязательные реквизиты - постановление не принято к исполнению
                        //3 - Возврат – дубликат ИД - постановление не принято к исполнению
                        //4 - Возврат – счет закрыт - постановление не принято к исполнению
                        //5 - Возврат – счет не найден - постановление не принято к исполнению
                        //7 - Возврат – несоответствие персональных данных – постановление не принято к исполнению
                        //8 - Принят к исполнению – постановление передано на обработку
                        //10 - Принят к исполнению – постановление передано на обработку


                        case ("0"): txtPkOspAnswCode = "11"; txtDescr = "Постановление поставлено в картотеку;"; break;
                        case ("1"): txtPkOspAnswCode = "11"; txtDescr = "Постановление поставлено в картотеку;"; break;
                        case ("8"): txtPkOspAnswCode = "11"; txtDescr = "Постановление поставлено в картотеку;"; break;
                        case ("10"): txtPkOspAnswCode = "11"; txtDescr = "Постановление поставлено в картотеку;"; break;

                        case ("2"): txtPkOspAnswCode = "5"; txtDescr = "Постановление не принято к исполнению в связи с отсутствием обязательных реквизитов постановления;"; break;
                        case ("3"): txtPkOspAnswCode = "8"; txtDescr = "Постановление было принято и обработано ранее;"; break;
                        case ("4"): txtPkOspAnswCode = "6"; txtDescr = "Постановление не исполнено, т.к. арест не найден или счета закрыты;"; break;
                        case ("5"): txtPkOspAnswCode = "2"; txtDescr = "Постановление не может быть исполнено;"; break;
                        case ("7"): txtPkOspAnswCode = "2"; txtDescr = "Постановление не может быть исполнено;"; break;
                    }
                    // нужно обязательно добавить номер Л\C в сообщение
                    row["INSIDE_INFORMATION"] = cutEnd("(Л\\С № " + txtACC + ") - " + Convert.ToString(tbl_row["ProcNumberState"]).Trim(), 512);
                    
                    // заполнять только если это ОТКАЗ, то есть не 11
                    if (txtPkOspAnswCode != "11")
                    {
                        row["DESCRIPTION"] = cutEnd(txtDescr, 1000);
                        row["ANSWER_TYPE"] = txtPkOspAnswCode;
                        // строку добавлять только если это отказ - иначе не нужно - обойдемся обычной квитанцией
                        nCancelRows += 1;
                    }
                    dtRes.Rows.Add(row);
                    
                    
                }
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при конвертации данных их XLS в параметры EXT_REPORT (MakeExtReportTable).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при конвертации данных их XLS в параметры EXT_REPORT (MakeExtReportTable).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }

        // эта функция для старого варианта XLS (SSS) отчетов Сбербанка
        public DataTable MakeExtReportTable(OleDbConnection con, DataTable dtTableFromSSS, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;
            try
            {

                dtRes = GetSberReportTable();
                
                //нужно разобраться на каких позициях находятся колонки код, текст и примечание
                string txtColF17 = ""; // код 1 символ целое число
                string txtColF18 = ""; // текст
                string txtColF19 = ""; // примечание, может и не быть

                // попробуем взять кол-во колонок и отнять 2 с конца.
                // проверить первую строку, если она 1 символ и TryParse Int32 - то ок
                // иначе по тому же критерию пробуем 3-ю колонку с конца
                
                // проверить что таблица содержит строки и хотя бы 4 столбца
                if ((dtTableFromSSS.Rows.Count > 0) && (dtTableFromSSS.Columns.Count > 3))
                {
                    DataRow firstRow = dtTableFromSSS.Rows[0];
                    // попробуем взять кол-во колонок и отнять 2 с конца.
                    int CodeColumn = dtTableFromSSS.Columns.Count - 1;
                    string txtCodeColumn = "F" + CodeColumn.ToString();
                    string txtValue = Convert.ToString(firstRow[txtCodeColumn]).Trim();
                    int nCode = -1;
                    // проверить колонку, если она 1 символ и TryParse Int32 - то ок
                    if ((txtValue.Length == 1) && Int32.TryParse(txtValue, out nCode))
                    {
                        txtColF17 = "F" + CodeColumn.ToString();
                        txtColF18 = "F" + (CodeColumn + 1).ToString();
                        txtColF19 = "F" + (CodeColumn + 2).ToString();
                    }
                    else // иначе по тому же критерию пробуем 3-ю колонку с конца
                    {
                        CodeColumn = dtTableFromSSS.Columns.Count - 2;
                        txtCodeColumn = "F" + CodeColumn.ToString();
                        txtValue = Convert.ToString(firstRow[txtCodeColumn]).Trim();
                        nCode = -1;
                        
                        if ((txtValue.Length == 1) && Int32.TryParse(txtValue, out nCode))
                        {
                            txtColF17 = "F" + CodeColumn.ToString();
                            txtColF18 = "F" + (CodeColumn + 1).ToString();
                            txtColF19 = "F" + (CodeColumn + 2).ToString();
                        }
                    }
                }
                else return dtRes; // если анализировать нечего - вернем пустую таблицу

                // если не нашли откуда брать результат - то ничего и делать не будем
                if (txtColF17.Length == 0) return dtRes; // если анализировать нечего - вернем пустую таблицу

                foreach (DataRow tbl_row in dtTableFromSSS.Rows)
                {
                    // проверить что первая строка - это заголовок и пропустить ее
                    if (!Convert.ToString(tbl_row["F1"]).Trim().ToUpper().Equals("ИДЕНТИФИКАТОР СТРОКИ"))
                    {
                        DataRow row = dtRes.NewRow();
                        decimal nR_id = Convert.ToDecimal(tbl_row["F1"]);
                        row["ACC_ID"] = nR_id;

                        string txtACC = "";
                        txtACC = Convert.ToString(tbl_row["F5"]);
                        row["ACC"] = txtACC;

                        // в строке скорее всего не restriction _id а acc_id
                        // поэтому нужно будет провести конвертацию
                        decimal nAct_id = GetActIdByAccID(con, nR_id, lLogger);
                        row["RESTRICTION_ID"] = nAct_id; 

                        decimal IP_ID = 0;
                        if (nR_id > 0)
                            IP_ID = FindIP_ID_EXT_INFO_ID(con, nR_id, lLogger);

                        // если не нашли по ID счета (ext_information), искать будем по номеру ИП
                        if (IP_ID == 0)
                        {
                            string txtIpNo = Convert.ToString(tbl_row["F2"]).Trim();
                            if (txtIpNo.Length > 0) IP_ID = FindIP_IDbyNum_AllStatusValid(con, txtIpNo, lLogger);

                        }
                        row["IP_ID"] = IP_ID;

                        row["DOC_DATE"] = DateTime.Today;

                        

                        string txtAnswType = "0";
                        if (dtTableFromSSS.Columns.Contains(txtColF17))
                            txtAnswType = Convert.ToString(tbl_row[txtColF17]).Trim();

                        string txtPkOspAnswCode = "";
                        string txtDescr = "";
                        /*
                        0 - нет в картотеке = 2
                        1 - исполнено полностью = 1
                        2 - исполнено частично = 1
                        3 - отказ (повтор или счет не найден или счет закрыт) = 13
                        4 - в картотеку заведено = 1
                         */
                        switch (txtAnswType)
                        {
                            case ("0"): txtPkOspAnswCode = "6"; txtDescr = "нет в картотеке;"; break;
                            case ("1"): txtPkOspAnswCode = "3"; txtDescr = "постановление исполнено;"; break;
                            case ("2"): txtPkOspAnswCode = "4"; txtDescr = "постановление исполнено частично;"; break;
                            case ("3"): txtPkOspAnswCode = "2"; txtDescr = "повтор (отказано в исполнении);"; break;
                            case ("4"): txtPkOspAnswCode = "11"; txtDescr = "в картотеку заведено;"; break;
                        }
                        row["INSIDE_INFORMATION"] = txtDescr;
                        row["ANSWER_TYPE"] = txtPkOspAnswCode;


                        if (dtTableFromSSS.Columns.Contains(txtColF18))
                        {
                            string txtCol18 = Convert.ToString(tbl_row[txtColF18]).Trim();
                            if (txtCol18.Length > 0) txtDescr += " " + txtCol18;
                        }

                        row["DESCRIPTION"] = txtDescr;

                        string txtReason = "";
                        if (dtTableFromSSS.Columns.Contains(txtColF19))
                            txtReason = Convert.ToString(tbl_row[txtColF19]).Trim();

                        row["LEGAL_IMPOSSIBILITY"] = txtReason;

                        // добавить собранную строчку в таблицу
                        dtRes.Rows.Add(row);
                    }
                }
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при конвертации данных их XLS в параметры EXT_REPORT (MakeExtReportTable).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при конвертации данных их XLS в параметры EXT_REPORT (MakeExtReportTable).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }

        public int WriteExtReport (OleDbConnection con, DataTable dtExtReport, Logger_ufssprk_tools lLogger)
        {
            return WriteExtReport (con, dtExtReport, "СБЕР_ЭДО_10", "Б_СБЕР_10", "8628_ЭДО", lLogger);
        }

        public int WriteExtReport(OleDbConnection con, DataTable dtExtReport, string txtAgreementCodeParam, string txtAgentCodeParam, string txtAgentDeptCodeParam, Logger_ufssprk_tools lLogger)
        {
            int iCnt = 0;
            int iErrCnt = 0;
            int nMaxCount = dtExtReport.Rows.Count;
            
                            
            // код контрагента - Б_СБЕР_10
            // неплохо бы сделать контрагента какого-то в базе для этих целей
            // и прописать его в конфиге или в options.txt
            string txtAgreementCode = txtAgreementCodeParam;
            string txtAgentCode = txtAgentCodeParam;
            string txtAgentDeptCode = txtAgentDeptCodeParam;
            decimal nID = 0;
            decimal newID = 0;
            String txtID = "";

            if (dtExtReport.Rows.Count > 0)
            {

                // ничего показывать не будем - никакого выбора файлов
                // просто загрузим отчет
                // 1 - EXT_INPUT_HEADER
                // 2 - EXT_REPORT
                
                //decimal nFirstID = 0;
                //получить ID
                //nFirstID = Convert.ToDecimal(dtData.Rows[0]["id"]);

                // дальше нужно двигаться по списку, например foreach

                // string txtEntityName = GetLegal_Name(potd_id);
                //string txtEntityName = "Сбербанк России";
                
                foreach (DataRow row in dtExtReport.Rows)
                {
                    newID = 0; // для хранения id вставленной записи в ИТ
                    
                    // если отчет привязан к ИП
                    // и к постановлению об ограничении
                    if (Convert.ToDecimal(row["IP_ID"]) > 0 && Convert.ToDecimal(row["RESTRICTION_ID"]) > 0)
                    {
                        // значить начинаем вставлять в базу структуры данных ответа
                        try
                        {
                            // взять все параметры из row
                            // ID входящего пакета берем как lLogger.logID

                            //string txtAcc = "";
                            //txtAcc = FindTxtAcc(con, nID, lLogger);


                            newID = InsertReportIntTable(con, row, lLogger.logID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, lLogger);
                            if (newID > 0)
                            {
                                iCnt++;
                                //lLogger.WriteLLog("Обработан отчет об обработке Сбербанком постановления # " + nID.ToString() + "\n");
                                lLogger.MemoryLLog("В ИТ загружен отчет об обработке постановления # " + nID.ToString() + "\n");
                            }
                            else
                            {
                                iErrCnt++;
                                lLogger.WriteLLog("Ошибка при загрузке в ИТ отчета об обработке постановления # " + nID.ToString() + "\n");
                            }
                        }
                        catch (Exception ex)
                        {
                            lLogger.ErrMessage += ("Ошибка приложения. Message: " + ex.ToString());
                            
                            lLogger.WriteLLog("Ошибка! Загрузка в ИТ отчетов об обработке постановлений экстренно прервалась.\n");
                            lLogger.WriteLLog("Значение счетчика = " + iCnt.ToString() + "\n");
                            lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                            
                            iErrCnt++;
                        }
                    }
                    else
                    {
                        iErrCnt++;
                        lLogger.WriteLLog("Ошибка (не найдено постановление СПИ) при загрузке отчета об обработке постановления # " + nID.ToString() + "\n");
                    }
                }
                lLogger.MemoryLLog("+++++++++++++++++++++++++++++++++++++++\n");
                lLogger.MemoryLLog(DateTime.Now + " завершение загрузки в ИТ отчетов об обработке постановлений.\n");
                lLogger.MemoryLLog("Успешно обработано записей: " + iCnt.ToString() + "\n");
                // записать итог и MemoryLLog
                lLogger.WriteLLog("Ошибок загрузки записей: " + iErrCnt.ToString() + "\n");

                // установить количество обработанных запросов
                lLogger.UpdateLLogCount(iCnt);
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(2);
            }

            return iCnt;
        }

        public int WriteSudRozRespSimple(OleDbConnection con, DataTable dtData, decimal nContrID, Logger_ufssprk_tools lLogger)
        {
            int iCnt = 0;
            int iErrCnt = 0;
            int nMaxCount = dtData.Rows.Count;



            decimal nID = 0;
            decimal newID = 0;
            String txtID = "";
            string txtAnswerText = "";

            if (dtData.Rows.Count > 0)
            {
                foreach (DataRow row in dtData.Rows)
                {
                    nID = 0;
                    txtAnswerText = "";
                    newID = 0; // для хранения id вставленной записи в ИТ
                    if (row.Table.Columns.Count > 0)
                    {
                        nID = Convert.ToDecimal(row[0]);
                    }

                    // если отчет привязан к ИП
                    if (nID > 0) // 2-я колонка это внешний
                    {
                        // значить начинаем вставлять в базу структуры данных ответа
                        try
                        {
                            if (row.Table.Columns.Count > 1)
                            {
                                txtAnswerText = Convert.ToString(row[1]);
                            }
                            newID = InsertI_Qry_Answer(con, nID, lLogger, DateTime.Today, DateTime.Today, "б/н", nContrID, 1, txtAnswerText);

                            if (newID > 0)
                            {
                                iCnt++;
                                //lLogger.WriteLLog("Обработан отчет об обработке Сбербанком постановления # " + nID.ToString() + "\n");
                                lLogger.MemoryLLog("Обработан ответ на запрос о наличии судимости постановления в рамках РД # " + nID.ToString() + "\n");
                            }
                            else
                            {
                                iErrCnt++;
                                lLogger.WriteLLog("Ошибка при загрузке ответа на запрос о наличии судимости постановления в рамках РД # " + nID.ToString() + "\n");
                            }
                        }
                        catch (Exception ex)
                        {
                            lLogger.ErrMessage += ("Ошибка приложения. Message: " + ex.ToString());

                            lLogger.WriteLLog("Ошибка! Загрузка пакета ответов на запросы о наличии судимости в рамках РД экстренно прервалась.\n");
                            lLogger.WriteLLog("Значение счетчика = " + iCnt.ToString() + "\n");
                            lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                            iErrCnt++;

                            //// обновить статус лога-ответа
                            lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
                        }
                    }
                    else
                    {
                        iErrCnt++;
                        lLogger.WriteLLog("Ошибка (не найдено постановление СПИ) при загрузке отчета об обработке постановления # " + nID.ToString() + "\n");
                    }
                }
                lLogger.MemoryLLog("+++++++++++++++++++++++++++++++++++++++\n");
                lLogger.MemoryLLog(DateTime.Now + " завершение обработки пакета ответов из МВД о наличии судимости.\n");
                lLogger.MemoryLLog("Успешно обработано записей: " + iCnt.ToString() + "\n");
                // записать итог и MemoryLLog
                lLogger.WriteLLog("Ошибок загрузки записей: " + iErrCnt.ToString() + "\n");

                // установить количество обработанных запросов
                lLogger.UpdateLLogCount(iCnt);
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(2);
            }

            return iCnt;
        }


        public int WriteSudRozResp(OleDbConnection con, DataTable dtXLS, decimal nContrID, Logger_ufssprk_tools lLogger)
        {
            int iCnt = 0;
            int iErrCnt = 0;
            int nMaxCount = dtXLS.Rows.Count;



            decimal nID = 0;
            decimal newID = 0;
            String txtID = "";

            if (dtXLS.Rows.Count > 0)
            {
                foreach (DataRow row in dtXLS.Rows)
                {
                    newID = 0; // для хранения id вставленной записи в ИТ
                    nID = Convert.ToDecimal(row[1]);

                    // если отчет привязан к ИП
                    if (nID > 0) // 2-я колонка это внешний
                    {
                        // значить начинаем вставлять в базу структуры данных ответа
                        try
                        {
                            // взять все параметры из row
                            // ID входящего пакета берем как lLogger.logID

                            string txtAnswerText = "";
                            if (row.Table.Columns.Contains("F8"))
                            {
                                txtAnswerText = Convert.ToString(row["F8"]);
                            }
                            newID = InsertI_Qry_Answer(con, row, lLogger, DateTime.Today, DateTime.Today, "б/н", nContrID, 1, txtAnswerText);

                            if (newID > 0)
                            {
                                iCnt++;
                                //lLogger.WriteLLog("Обработан отчет об обработке Сбербанком постановления # " + nID.ToString() + "\n");
                                lLogger.MemoryLLog("Обработан ответ на запрос о наличии судимости постановления в рамках РД # " + nID.ToString() + "\n");
                            }
                            else
                            {
                                iErrCnt++;
                                lLogger.WriteLLog("Ошибка при загрузке ответа на запрос о наличии судимости постановления в рамках РД # " + nID.ToString() + "\n");
                            }
                        }
                        catch (Exception ex)
                        {
                            lLogger.ErrMessage += ("Ошибка приложения. Message: " + ex.ToString());

                            lLogger.WriteLLog("Ошибка! Загрузка пакета ответов на запросы о наличии судимости постановления в рамках РД экстренно прервалась.\n");
                            lLogger.WriteLLog("Значение счетчика = " + iCnt.ToString() + "\n");
                            lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");

                            iErrCnt++;
                        }
                    }
                    else
                    {
                        iErrCnt++;
                        lLogger.WriteLLog("Ошибка (не найдено постановление СПИ) при загрузке отчета об обработке постановления # " + nID.ToString() + "\n");
                    }
                }
                lLogger.MemoryLLog("+++++++++++++++++++++++++++++++++++++++\n");
                lLogger.MemoryLLog(DateTime.Now + " завершение обработки пакета отчетов об обработке из Сбербанка.\n");
                lLogger.MemoryLLog("Успешно обработано записей: " + iCnt.ToString() + "\n");
                // записать итог и MemoryLLog
                lLogger.WriteLLog("Ошибок загрузки записей: " + iErrCnt.ToString() + "\n");

                // установить количество обработанных запросов
                lLogger.UpdateLLogCount(iCnt);
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(2);
            }

            return iCnt;
        }


        

        public string FindTxtAcc(OleDbConnection con, Decimal nID, Logger_ufssprk_tools lLogger)
        {
            String res = "";
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select first 1 acc from ext_availability_acc_data where id = " + nID.ToString(), con, tran);
                res = Convert.ToString(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();

            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными (FindTxtAcc). Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения (FindTxtAcc). Message: " + ex.ToString();
            }

            return res;
        }


        private string GetDocCodeByAccID(OleDbConnection con, Decimal nAccId, Logger_ufssprk_tools lLogger)
        {
            String txtRes = "";
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select first 1 restr.doc_code from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on restr.id = inf.document_key where acc.id = " + nAccId.ToString(), con, tran);
                txtRes = Convert.ToString(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными (GetDocCodeByAccID). Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения (GetDocCodeByAccID). Message: " + ex.ToString();
            }
            return txtRes;
        }

        public int GetSberDocsPKOSP_Count(string constrPKOSP, DateTime dtStart, DateTime dtEnd, Logger_ufssprk_tools lLogger)
        {
            OleDbConnection con;
            con = new OleDbConnection(constrPKOSP);
            int res = 0;
            try
            {
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                //OleDbCommand cmd = new OleDbCommand("select count(*) as cnt from O_IP O_IP JOIN O ON O_IP.ID=O.ID JOIN DOCUMENT ON O.ID=DOCUMENT.ID WHERE DOCUMENT.DOCSTATUSID>0 and DOCUMENT.metaobjectname in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY') and (DOCUMENT.docstatusid = 2 or (DOCUMENT.docstatusid > 9)) and exists( select mvv.id from mvv_sendlist mvv join sendlist sl on mvv.id = sl.id  join document sl_d on sl_d.id = mvv.id where sl.sendlist_o_id = DOCUMENT.id and sl_d.docstatusid in (70, 52) and mvv.agreement_code = 'СБЕР_ЭДО_10') and O.doc_electron = 1 and exists(select acc.id from Mvv_Datum_Availability_Acc acc join mvv_datum dat on acc.id = dat.id where dat.document_id = DOCUMENT.id and dat.restriction_result != 0)  and (o_ip.id_dbtrcls = 2  or (o_ip.id_dbtrcls in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and O.out_doc_date >='"+ dtEnd.ToShortDateString() +"' and O.out_doc_date <='" + dtEnd.ToShortDateString() +"'", con, tran);
                OleDbCommand cmd = new OleDbCommand("select count(*) as cnt from O_IP O_IP JOIN O ON O_IP.ID=O.ID JOIN DOCUMENT ON O.ID=DOCUMENT.ID WHERE DOCUMENT.DOCSTATUSID>0 and DOCUMENT.metaobjectname in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY') and (DOCUMENT.docstatusid = 2 or (DOCUMENT.docstatusid > 9)) and exists( select mvv.id from mvv_sendlist mvv join sendlist sl on mvv.id = sl.id  join document sl_d on sl_d.id = mvv.id where sl.sendlist_o_id = DOCUMENT.id and sl_d.docstatusid in (70, 52) and mvv.agreement_code = 'СБЕР_ЭДО_10') and O.doc_electron = 1 and exists(select acc.id from Mvv_Datum_Availability_Acc acc join mvv_datum dat on acc.id = dat.id where dat.document_id = DOCUMENT.id and dat.restriction_result != 0)  and (o_ip.id_dbtrcls = 2  or (o_ip.id_dbtrcls in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and O.out_doc_date >='" + dtStart.ToShortDateString() + "' and O.out_doc_date <='" + dtEnd.ToShortDateString() + "'", con, tran);
                res = Convert.ToInt32(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными (GetSberDocsInfObmenCount). Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения (GetSberDocsInfObmenCount). Message: " + ex.ToString();
            }
            return res;
        }

        public DataTable GetSberDocsInfObmenData(string constrPKOSP, DateTime dtStart, DateTime dtEnd, Logger_ufssprk_tools lLogger)
        {
            /* в Инф.обмене больше чем в ПКОСП  */
            // doc_number, ip_info, spi_fio
            DataTable dtRes = null;

            OleDbConnection con;
            con = new OleDbConnection(constrPKOSP);
            
            try
            {
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select r.doc_number, r.ip_number as ip_info, r.spi_fio from ext_restriction r where r.proceed = 1 and r.pack_id in (select pack_d.id from dx_pack_o p_o join dx_pack p on p_o.id = p.id join document pack_d on pack_d.id = p_o.id  where pack_d.create_date >='" + dtStart.ToShortDateString() + "' and pack_d.create_date <'" + dtEnd.AddDays(1).ToShortDateString() + "'  and pack_d.docstatusid in(20, 70) and p.agreement_code = 'СБЕР_ЭДО_10') and not exists (select document.doc_number from O_IP O_IP JOIN O ON O_IP.ID=O.ID JOIN DOCUMENT ON O.ID=DOCUMENT.ID WHERE DOCUMENT.DOCSTATUSID>0 and DOCUMENT.metaobjectname in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY') and (DOCUMENT.docstatusid = 2 or (DOCUMENT.docstatusid > 9)) and exists( select mvv.id from mvv_sendlist mvv join sendlist sl on mvv.id = sl.id  join document sl_d on sl_d.id = mvv.id where sl.sendlist_o_id = DOCUMENT.id and sl_d.docstatusid in (70, 52) and mvv.agreement_code = 'СБЕР_ЭДО_10') and O.doc_electron = 1 and exists(select acc.id from Mvv_Datum_Availability_Acc acc join mvv_datum dat on acc.id = dat.id where dat.document_id = DOCUMENT.id and dat.restriction_result != 0)  and (o_ip.id_dbtrcls = 2  or (o_ip.id_dbtrcls in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and O.out_doc_date >='" + dtStart.ToShortDateString() + "' and O.out_doc_date <='" + dtEnd.ToShortDateString() + "' and document.id = r.act_id)", con, tran);
                DataSet ds = new DataSet();
                dtRes = ds.Tables.Add("otvet");
                using (OleDbDataReader rdr = cmd.ExecuteReader(CommandBehavior.Default))
                {
                    ds.Load(rdr, LoadOption.OverwriteChanges, dtRes);
                    rdr.Close();
                }
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными (GetSberDocsInfObmenCount). Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения (GetSberDocsInfObmenCount). Message: " + ex.ToString();
            }
            return dtRes;
        }

        public DataTable GetSberDocsPKOSP_Data(string constrPKOSP, DateTime dtStart, DateTime dtEnd, Logger_ufssprk_tools lLogger)
        {
            /* в ПКОСП больше чем в Инф.обмене */
            // doc_number, ip_info, spi_fio
            DataTable dtRes = null;

            OleDbConnection con;
            con = new OleDbConnection(constrPKOSP);
            try
            {
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                //OleDbCommand cmd = new OleDbCommand("select document.doc_number, document.parent_info as ip_info, document.suser_fio_change as spi_fio from O_IP O_IP JOIN O ON O_IP.ID=O.ID JOIN DOCUMENT ON O.ID=DOCUMENT.ID WHERE DOCUMENT.DOCSTATUSID>0 and DOCUMENT.metaobjectname in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY') and (DOCUMENT.docstatusid = 2 or (DOCUMENT.docstatusid > 9)) and exists( select mvv.id from mvv_sendlist mvv join sendlist sl on mvv.id = sl.id  join document sl_d on sl_d.id = mvv.id where sl.sendlist_o_id = DOCUMENT.id and sl_d.docstatusid in (70, 52) and mvv.agreement_code = 'СБЕР_ЭДО_10') and O.doc_electron = 1 and exists(select acc.id from Mvv_Datum_Availability_Acc acc join mvv_datum dat on acc.id = dat.id where dat.document_id = DOCUMENT.id and dat.restriction_result != 0)  and (o_ip.id_dbtrcls = 2  or (o_ip.id_dbtrcls in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and O.out_doc_date >='" + dtEnd.ToShortDateString() + "' and O.out_doc_date <='" + dtEnd.ToShortDateString() + "' and not exists(select r.act_id from ext_restriction r where r.act_id = document.id and r.proceed = 1 and r.pack_id in (select pack_d.id from dx_pack_o p_o join dx_pack p on p_o.id = p.id join document pack_d on pack_d.id = p_o.id where pack_d.create_date >='" + dtStart.ToShortDateString() + "' and pack_d.create_date <'" + dtEnd.AddDays(1).ToShortDateString() + "' and pack_d.docstatusid in(20, 70) and p.agreement_code = 'СБЕР_ЭДО_10' ) )" , con, tran);
                OleDbCommand cmd = new OleDbCommand("select document.doc_number, document.parent_info as ip_info, document.suser_fio_change as spi_fio from O_IP O_IP JOIN O ON O_IP.ID=O.ID JOIN DOCUMENT ON O.ID=DOCUMENT.ID WHERE DOCUMENT.DOCSTATUSID>0 and DOCUMENT.metaobjectname in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY') and (DOCUMENT.docstatusid = 2 or (DOCUMENT.docstatusid > 9)) and exists( select mvv.id from mvv_sendlist mvv join sendlist sl on mvv.id = sl.id  join document sl_d on sl_d.id = mvv.id where sl.sendlist_o_id = DOCUMENT.id and sl_d.docstatusid in (70, 52) and mvv.agreement_code = 'СБЕР_ЭДО_10') and O.doc_electron = 1 and exists(select acc.id from Mvv_Datum_Availability_Acc acc join mvv_datum dat on acc.id = dat.id where dat.document_id = DOCUMENT.id and dat.restriction_result != 0)  and (o_ip.id_dbtrcls = 2  or (o_ip.id_dbtrcls in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and O.out_doc_date >='" + dtStart.ToShortDateString() + "' and O.out_doc_date <='" + dtEnd.ToShortDateString() + "' and not exists(select r.act_id from ext_restriction r where r.act_id = document.id and r.proceed = 1 and r.pack_id in (select pack_d.id from dx_pack_o p_o join dx_pack p on p_o.id = p.id join document pack_d on pack_d.id = p_o.id where pack_d.create_date >='" + dtStart.ToShortDateString() + "' and pack_d.create_date <'" + dtEnd.AddDays(1).ToShortDateString() + "' and pack_d.docstatusid in(20, 70) and p.agreement_code = 'СБЕР_ЭДО_10' ) )", con, tran);
                DataSet ds = new DataSet();
                dtRes = ds.Tables.Add("otvet");
                using (OleDbDataReader rdr = cmd.ExecuteReader(CommandBehavior.Default))
                {
                    ds.Load(rdr, LoadOption.OverwriteChanges, dtRes);
                    rdr.Close();
                }
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными (GetSberDocsPKOSP_Count). Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения (GetSberDocsPKOSP_Count). Message: " + ex.ToString();
            }
            return dtRes;
        }


        public int GetSberDocsInfObmenCount(string constrPKOSP, DateTime dtStart, DateTime dtEnd, Logger_ufssprk_tools lLogger)
        {
            OleDbConnection con;
            con = new OleDbConnection(constrPKOSP);
            int res = 0;
            try
            {
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select count(*) as cnt from ext_restriction r where r.proceed = 1 and r.pack_id in (select pack_d.id from dx_pack_o p_o join dx_pack p on p_o.id = p.id join document pack_d on pack_d.id = p_o.id  where pack_d.create_date >='"+dtStart.ToShortDateString()+"' and pack_d.create_date <'"+dtEnd.AddDays(1).ToShortDateString()+"'  and pack_d.docstatusid in(20, 70) and p.agreement_code = 'СБЕР_ЭДО_10')", con, tran);
                res = Convert.ToInt32(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными (GetSberDocsPKOSP_Count). Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения (GetSberDocsPKOSP_Count). Message: " + ex.ToString();
            }
            return res;
        }


        public int GetDayPackCount(string constrGIBDD, int PackType, string txtCode, DateTime dtTheDay, Logger_ufssprk_tools lLogger)
        {
            OleDbConnection conGibdd;
            conGibdd = new OleDbConnection(constrGIBDD);
            int res = 0;
            try
            {
                conGibdd.Open();
                OleDbTransaction tran = conGibdd.BeginTransaction(IsolationLevel.ReadCommitted);
                // > 1 - то есть только успешно выгруженные пакеты считаем
                OleDbCommand cmd = new OleDbCommand("select count(id) from local_logs where conv_code = '" + txtCode + "' and pack_type = " + PackType.ToString() + " and pack_status > 1 and packdate >= '" + dtTheDay.ToShortDateString() + "'" + "and packdate < '" + dtTheDay.AddDays(1).ToShortDateString() + "'", conGibdd, tran);
                res = Convert.ToInt32(cmd.ExecuteScalar());
                tran.Rollback();
                conGibdd.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return res;
        }



        public string GetCredOrgPath(string constrGIBDD, string txtCode,Logger_ufssprk_tools lLogger)
        {
            OleDbConnection conGibdd;
            conGibdd = new OleDbConnection(constrGIBDD);
            string res = "";
            try
            {
                conGibdd.Open();
                OleDbTransaction tran = conGibdd.BeginTransaction(IsolationLevel.ReadCommitted);
                // > 1 - то есть только успешно выгруженные пакеты считаем
                OleDbCommand cmd = new OleDbCommand("select first 1 ANS_PATH from AGREEMENTS where AGREEMENT_CODE = '" + txtCode + "'", conGibdd, tran);
                res = Convert.ToString(cmd.ExecuteScalar());
                tran.Rollback();
                conGibdd.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return res;
        }

        public int WriteExtKvit(OleDbConnection con, DataTable dtExtKvit, Logger_ufssprk_tools lLogger)
        {
            int iCnt = 0;
            int iLCnt = 0;
            int iErrCnt = 0;
            int nMaxCount = dtExtKvit.Rows.Count;


            // код контрагента - Б_СБЕР_10
            // неплохо бы сделать контрагента какого-то в базе для этих целей
            // и прописать его в конфиге или в options.txt
            string txtAgreementCode = "СБЕР_ЭДО_10";
            string txtAgentCode = "Б_СБЕР_10";
            string txtAgentDeptCode = "8628_ЭДО";
            decimal nID = 0;
            decimal newID = 0;
            String txtID = "";

            if (dtExtKvit.Rows.Count > 0)
            {

                // ничего показывать не будем - никакого выбора файлов
                // просто загрузим квитанции
                // 1 - EXT_INPUT_HEADER
                // 2 - EXT_KVIT

                foreach (DataRow row in dtExtKvit.Rows)
                {
                    iCnt++;
                    newID = 0; // для хранения id вставленной записи в ИТ
                    nID = Convert.ToDecimal(row["id"]);
                    string txtAcc = "";
                    txtAcc = FindTxtAcc(con, nID, lLogger);

                    if (txtAcc.Length > 0)
                    {
                        // значить начинаем вставлять в базу структуры данных ответа
                        try
                        {
                            decimal nAct_id = GetActIdByAccID(con, nID, lLogger);
                            string txtMessage = Convert.ToString(row["ProcNumberState"]).Trim();
                            int nStatus = Convert.ToInt32(row["Status"]);
                            // вобщем-то статусы все не проходят
                            // коллизия в том, что например: 10 не проходит, а 1 - проходит
                            // как бы выяснить, какие статусы плохие?
                            // select count(*), kvit.message_code  from receipt_mvv kvit where kvit.original_document_id is null and kvit.type_doc = 'O_IP_ACT_GACCOUNT_MONEY' group by kvit.message_code 
                            
                            // ставим заглушку
                            if (nStatus == 10) nStatus = 1;

                            // получить текст соответствующий статусу уведомления
                            // все закомментировал, т.к. текст в txtMessage совпадает с текстом из справочника
                            //string txtStatusCaption = "";
                            //if(Status_dict.ContainsKey(nStatus)){
                            //    txtStatusCaption = Status_dict[nStatus];
                            //}else{
                            //    txtStatusCaption = "Код примечания: " + nStatus.ToString();
                            //}
                            //// собрать сообщение в 1 строчку
                            //txtMessage += cutEnd("(" + txtStatusCaption + ").", 300);
                            string txtDocCode = GetDocCodeByAccID(con, nID, lLogger);

                            txtMessage += " (л\\с № " + txtAcc + ")";

                            // взять все параметры
                            newID = InsertKvitIntTable(con, nAct_id, txtMessage, nStatus, txtDocCode, lLogger.logID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, lLogger);
                            if (newID > 0)
                            {
                                iLCnt++;
                                //lLogger.WriteLLog("Обработано уведомление о приеме в обработку постановления # " + nID.ToString() + "\n");
                                lLogger.MemoryLLog("\n" + iCnt.ToString() + "\tОбработано уведомление о приеме в обработку постановления # " + nID.ToString() + "\n");
                            }
                            else
                            {
                                iErrCnt++;
                                lLogger.MemoryLLog("\n" + iCnt.ToString() + "\tОшибка при загрузке уведомления о приеме в обработку постановления # " + nID.ToString() + "\n");
                            }
                            //prbWritingDBF.PerformStep();
                            //prbWritingDBF.Refresh();
                            //System.Windows.Forms.Application.DoEvents();

                        }
                        catch (Exception ex)
                        {
                            lLogger.ErrMessage += "Ошибка приложения (WriteExtKvit). Message: " + ex.ToString();

                            lLogger.WriteLLog("Ошибка! Загрузка пакета уведомлений экстренно прервалась.\n");
                            lLogger.WriteLLog("Значение счетчика = " + iCnt.ToString() + "\n");
                            lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                            
                            iErrCnt++;
                        }
                    }
                    else
                    {
                        iErrCnt++;
                        lLogger.MemoryLLog("\n" + iCnt.ToString() + "\tОшибка (не найдено постановление СПИ) при загрузке уведомления о приеме в обработку постановления  # " + nID.ToString() + "\n");
                    }

                }

                lLogger.WriteLLog("+++++++++++++++++++++++++++++++++++++++\n");
                lLogger.WriteLLog(DateTime.Now + " завершение обработки пакета отчетов об обработке из Сбербанка.\n");
                lLogger.WriteLLog("Успешно обработано записей: " + iLCnt.ToString() + " (из " + iCnt.ToString() + ").\n");

                // автоматически при WriteLLog пройдет отложенная запись MemoryLLog
                lLogger.WriteLLog("Ошибок загрузки записей: " + iErrCnt.ToString() + "\n");

                // установить количество обработанных запросов
                lLogger.UpdateLLogCount(iLCnt);
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(2);
            }

            return iLCnt;
        }

        public static String cutEnd(string txtStr, int iLen)
        {
            if (txtStr.Length > iLen) txtStr = txtStr.Substring(0, iLen - 1);

            string[] StrColl = txtStr.Split(new char[] { '\n', '\t', '\b', '\r' });

            int StrCollLength = StrColl.Length;

            txtStr = "";

            for (int i = 0; i < StrCollLength; i++)
            {
                txtStr += StrColl[i];
            }

            return txtStr;
        }

        private decimal InsertKvitIntTable(OleDbConnection con, decimal nAct_id, string txtMessage, int nMessCode, string txtTypeDoc, decimal nDX_PACK_ID, string txtAgentCode, string txtAgentDeptCode, string txtAgentAgreementCode, Logger_ufssprk_tools lLogger)
        {
            // что такое entt_id - похоже что это код ПФ из справочника Legal
            // вставить EXT_INPUT_HEADER < - > EXT_RESPONSE (связь один к одному)
            OleDbCommand cmd, cmdEXT_INPUT_HEADER, cmdEXT_RECEIPT;
            Decimal newID;
            OleDbTransaction tran = null;
            decimal res = 0;
            try
            {
                newID = 0;

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // получить новый ключ
                // cmd = new OleDbCommand("SELECT gen_id(seq_document, 1) FROM RDB$DATABASE", con, tran);
                // newID = Convert.ToDecimal(cmd.ExecuteScalar());


                cmd = new OleDbCommand("SELECT gen_id(seq_ext_input_header, 1) FROM RDB$DATABASE", con, tran);
                newID = Convert.ToDecimal(cmd.ExecuteScalar());


                // вставить DOCUMENT
                cmdEXT_INPUT_HEADER = new OleDbCommand();
                cmdEXT_INPUT_HEADER.Connection = con;
                cmdEXT_INPUT_HEADER.Transaction = tran;
                cmdEXT_INPUT_HEADER.CommandText = "insert into EXT_INPUT_HEADER (ID, METAOBJECTNAME, PROCEED, PACK_NUMBER, EXTERNAL_KEY, AGENT_CODE, AGENT_DEPT_CODE, AGENT_AGREEMENT_CODE, DATE_IMPORT)";
                cmdEXT_INPUT_HEADER.CommandText += " VALUES (:ID ,'EXT_RECEIPT', 0, :PACK_NUMBER, :EXTERNAL_KEY, :AGENT_CODE, :AGENT_DEPT_CODE, :AGENT_AGREEMENT_CODE, :DATE_IMPORT)";
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":PACK_NUMBER", nDX_PACK_ID));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":EXTERNAL_KEY", Convert.ToString(nAct_id))); // связь с постановлением ext_key = act_id
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_CODE", txtAgentCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_DEPT_CODE", txtAgentDeptCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_AGREEMENT_CODE", txtAgentAgreementCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":DATE_IMPORT", DateTime.Today));

                if (cmdEXT_INPUT_HEADER.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to EXT_INPUT_HEADER table act_id = " + nAct_id.ToString());
                    throw ex;
                }

                // к txtMessage нужно добавить # счета, на который пришла квитанция



                // вставить MVV_REСEIPT
                cmdEXT_RECEIPT = new OleDbCommand();
                cmdEXT_RECEIPT.Connection = con;
                cmdEXT_RECEIPT.Transaction = tran;
                cmdEXT_RECEIPT.CommandText = "insert into EXT_RECEIPT (ID, MESSAGE_CODE, TYPE_DOC, MESSAGE)";
                cmdEXT_RECEIPT.CommandText += "  VALUES (:ID , :MESSAGE_CODE, :TYPE_DOC, :MESSAGE)";
                cmdEXT_RECEIPT.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdEXT_RECEIPT.Parameters.Add(new OleDbParameter(":MESSAGE_CODE", nMessCode));
                cmdEXT_RECEIPT.Parameters.Add(new OleDbParameter(":TYPE_DOC", txtTypeDoc));
                cmdEXT_RECEIPT.Parameters.Add(new OleDbParameter(":MESSAGE", cutEnd(txtMessage, 300)));

                if (cmdEXT_RECEIPT.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to EXT_RECEIPT table act_id = " + nAct_id.ToString());
                    throw ex;
                }
                else
                {
                    res = newID;// если все удачно вставили - то вернуть newID 
                }

                tran.Commit();
                con.Close();

                return res;

            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными (InsertKvitIntTable). Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения (InsertKvitIntTable). Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }

            // проверить подключение - а то может статься что не закрыли
            if (con != null && con.State != ConnectionState.Closed) con.Close();

            return -1;
        }


        private decimal InsertIntTableSvedRab(OleDbConnection con, DateTime dtActDate, string txtEntityName, string txtExtKey, string txtDocumentKey, string txtAdres, string txtNaimOrg, string txtInn, string txtKpp, Logger_ufssprk_tools lLogger)
        {
            OleDbCommand cmd, cmdDatum, cmdSvedRab;
            OleDbTransaction tran = null;
            decimal newID = 0;

            try
            {
                if ((con == null) || (con.State.Equals(ConnectionState.Closed)))
                {
                    con.Open();
                }
                                           
                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // получить новый ключ - посмотреть генератор в EXT_INFORMATION gen_id(ext_information, 1)
                cmd = new OleDbCommand("SELECT gen_id(ext_information, 1) FROM RDB$DATABASE", con, tran);
                newID = Convert.ToDecimal(cmd.ExecuteScalar());


                cmdDatum = new OleDbCommand();
                cmdDatum.Connection = con;
                cmdDatum.Transaction = tran;
                cmdDatum.CommandText = "INSERT INTO EXT_INFORMATION (ID, PROCEED, DOCUMENT_KEY, EXTERNAL_KEY, ACT_DATE, ENTITY_NAME)";

                cmdDatum.CommandText += "  VALUES (:ID, 0, :DOCUMENT_KEY, :EXTERNAL_KEY, :ACT_DATE, :ENTITY_NAME)";

                cmdDatum.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdDatum.Parameters.Add(new OleDbParameter(":DOCUMENT_KEY", txtDocumentKey));
                cmdDatum.Parameters.Add(new OleDbParameter(":EXTERNAL_KEY", txtExtKey));
                cmdDatum.Parameters.Add(new OleDbParameter(":ACT_DATE", Convert.ToDateTime(dtActDate)));
                cmdDatum.Parameters.Add(new OleDbParameter(":ENTITY_NAME", txtEntityName));
                cmdDatum.ExecuteNonQuery();


                cmdSvedRab = new OleDbCommand();
                cmdSvedRab.Connection = con;
                cmdSvedRab.Transaction = tran;
                cmdSvedRab.CommandText = "insert into ext_sved_rab_data(ID, ADRES_F, ADRES_J, NAIMORG, INN, KPP)";
                cmdSvedRab.CommandText += " VALUES (:ID, :ADRES_F, :ADRES_J, :NAIMORG, :INN, :KPP)";
                cmdSvedRab.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdSvedRab.Parameters.Add(new OleDbParameter(":ADRES_F", txtAdres));
                cmdSvedRab.Parameters.Add(new OleDbParameter(":ADRES_J", txtAdres));
                cmdSvedRab.Parameters.Add(new OleDbParameter(":NAIMORG", txtNaimOrg));
                cmdSvedRab.Parameters.Add(new OleDbParameter(":INN", txtInn));
                cmdSvedRab.Parameters.Add(new OleDbParameter(":KPP", txtKpp));
                cmdSvedRab.ExecuteNonQuery();

                tran.Commit();
                con.Close();

                return newID;
            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }
            return -1;
        }


        private decimal InsertIntTableAccSum(OleDbConnection con, decimal nID, decimal nSum, string txtAcc, string txtBik, DateTime dtActDate, string txtEntityName, string txtSumInfo, string txtBankInfo, string txtDeptCode, Logger_ufssprk_tools lLogger)
        {
            OleDbCommand cmd, cmdDatum, cmdAcc;
            OleDbTransaction tran = null;
            decimal newID = 0;

            try
            {
                // обрезать БИК до 9 символов, если длиннее
                txtBik = txtBik.Trim();
                if (txtBik.Length > 9)
                {
                    txtBik = txtBik.Substring(0, 9);
                }

                if ((con == null) || (con.State.Equals(ConnectionState.Closed)))
                {
                    con.Open();
                }

                string txtCod = txtAcc.Trim().Substring(5, 3);
                // допустим, тут не 643, а 810 - нужно ли заменять?
                // давай заменим
                if (txtCod.Equals("810")) txtCod = "643";

                decimal nValuteCod = 0;
                if (!Decimal.TryParse(txtCod, out nValuteCod))
                {
                    //nValuteCod = 810;
                    nValuteCod = 643;
                }

                // получить код валюты по описанию
                // txtCod = getValuteByCod(txtAcc);

                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // получить новый ключ - посмотреть генератор в EXT_INFORMATION gen_id(ext_information, 1)
                cmd = new OleDbCommand("SELECT gen_id(ext_information, 1) FROM RDB$DATABASE", con, tran);
                newID = Convert.ToDecimal(cmd.ExecuteScalar());


                cmdDatum = new OleDbCommand();
                cmdDatum.Connection = con;
                cmdDatum.Transaction = tran;
                cmdDatum.CommandText = "INSERT INTO EXT_INFORMATION (ID, PROCEED, DOCUMENT_KEY, EXTERNAL_KEY, ACT_DATE, KIND_DATA_TYPE, ENTITY_NAME)";
                cmdDatum.CommandText += "  VALUES (:ID, 0, :DOCUMENT_KEY, :EXTERNAL_KEY, :ACT_DATE, '09', :ENTITY_NAME)";

                cmdDatum.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdDatum.Parameters.Add(new OleDbParameter(":DOCUMENT_KEY", Convert.ToDecimal(nID)));
                cmdDatum.Parameters.Add(new OleDbParameter(":EXTERNAL_KEY", Convert.ToDecimal(newID)));
                cmdDatum.Parameters.Add(new OleDbParameter(":ACT_DATE", Convert.ToDateTime(dtActDate)));
                cmdDatum.Parameters.Add(new OleDbParameter(":ENTITY_NAME", txtEntityName));
                cmdDatum.ExecuteNonQuery();


                cmdAcc = new OleDbCommand();
                cmdAcc.Connection = con;
                cmdAcc.Transaction = tran;
                cmdAcc.CommandText = "insert into EXT_AVAILABILITY_ACC_DATA (ID, BIC_BANK, ACC, SUMMA, CURRENCY_CODE, BANK_NAME, SUMMA_INFO, DEPT_CODE)";
                cmdAcc.CommandText += " VALUES (:ID , :BIC, :ACC, :SUMMA, :CURRENCY_CODE, :BANK_NAME, :SUMMA_INFO, :DEPT_CODE)";
                cmdAcc.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdAcc.Parameters.Add(new OleDbParameter(":BIC_BANK", txtBik));
                cmdAcc.Parameters.Add(new OleDbParameter(":ACC", Convert.ToString(txtAcc)));
                cmdAcc.Parameters.Add(new OleDbParameter(":SUMMA", Convert.ToDecimal(nSum)));
                cmdAcc.Parameters.Add(new OleDbParameter("CURRENCY_CODE", Convert.ToString(nValuteCod)));
                cmdAcc.Parameters.Add(new OleDbParameter(":BANK_NAME", cutEnd(txtBankInfo, 255)));
                cmdAcc.Parameters.Add(new OleDbParameter(":SUMMA_INFO", cutEnd(txtSumInfo, 100)));
                cmdAcc.Parameters.Add(new OleDbParameter(":DEPT_CODE", cutEnd(txtDeptCode, 10)));
                cmdAcc.ExecuteNonQuery();

                tran.Commit();
                con.Close();

                return newID;
            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }
            return -1;
        }

        public bool UpdateZaprosIntTableExtKey(OleDbConnection con, decimal nExtKey, string txtOtvet, DateTime dtDatOtv, Logger_ufssprk_tools lLogger)
        {

            OleDbCommand cmdInsMVV_RESPONSE;
            OleDbTransaction tran = null;

            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // обновить EXT_RESPONSE

                cmdInsMVV_RESPONSE = new OleDbCommand();
                cmdInsMVV_RESPONSE.Connection = con;
                cmdInsMVV_RESPONSE.Transaction = tran;
                cmdInsMVV_RESPONSE.CommandText = "update EXT_RESPONSE SET RESPONSE_DATE = :RESPONSE_DATE, DATA_STR = :DATA_STR WHERE ID = (select first 1 h.id from ext_input_header h where h.external_key = " + ":ID" + ")";

                cmdInsMVV_RESPONSE.Parameters.Add(new OleDbParameter(":RESPONSE_DATE", dtDatOtv));
                cmdInsMVV_RESPONSE.Parameters.Add(new OleDbParameter(":DATA_STR", txtOtvet));
                cmdInsMVV_RESPONSE.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(nExtKey)));


                if (cmdInsMVV_RESPONSE.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error updating row in EXT_RESPONSE table ExtKey = " + nExtKey.ToString());
                    throw ex;
                }

                tran.Commit();
                con.Close();

                //SetDocumentStatus(nID, 19);// установить статус Получен ответ для запроса


                return true;
            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }
            return false;
        }




        public bool UpdateZaprosIntTable(OleDbConnection con, decimal nID, string txtOtvet, DateTime dtDatOtv, Logger_ufssprk_tools lLogger)
        {

            OleDbCommand cmdInsMVV_RESPONSE;
            OleDbTransaction tran = null;

            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // обновить EXT_RESPONSE

                cmdInsMVV_RESPONSE = new OleDbCommand();
                cmdInsMVV_RESPONSE.Connection = con;
                cmdInsMVV_RESPONSE.Transaction = tran;
                cmdInsMVV_RESPONSE.CommandText = "update EXT_RESPONSE SET RESPONSE_DATE = :RESPONSE_DATE, DATA_STR = :DATA_STR WHERE ID = :ID";

                cmdInsMVV_RESPONSE.Parameters.Add(new OleDbParameter(":RESPONSE_DATE", dtDatOtv));
                cmdInsMVV_RESPONSE.Parameters.Add(new OleDbParameter(":DATA_STR", txtOtvet));
                cmdInsMVV_RESPONSE.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(nID)));


                if (cmdInsMVV_RESPONSE.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error updating row in EXT_RESPONSE table id = " + nID.ToString());
                    throw ex;
                }

                tran.Commit();
                con.Close();

                //SetDocumentStatus(nID, 19);// установить статус Получен ответ для запроса


                return true;
            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }
            return false;
        }

        private decimal InsertIntTableAccSum(OleDbConnection con, decimal nID, decimal nSum, string txtAcc, string txtBik, DateTime dtActDate, string txtEntityName, Logger_ufssprk_tools lLogger)
        {
            OleDbCommand cmd, cmdDatum, cmdAcc;
            OleDbTransaction tran = null;
            decimal newID = 0;

            try
            {
                // обрезать БИК до 9 символов, если длиннее
                txtBik = txtBik.Trim();
                if (txtBik.Length > 9)
                {
                    txtBik = txtBik.Substring(0, 9);
                }

                if ((con == null) || (con.State.Equals(ConnectionState.Closed)))
                {
                    con.Open();
                }

                string txtCod = txtAcc.Trim().Substring(5, 3);
                // допустим, тут не 643, а 810 - нужно ли заменять?
                // давай заменим
                if (txtCod.Equals("810")) txtCod = "643";

                decimal nValuteCod = 0;
                if (!Decimal.TryParse(txtCod, out nValuteCod))
                {
                    //nValuteCod = 810;
                    nValuteCod = 643;
                }

                // получить код валюты по описанию
                // txtCod = getValuteByCod(txtAcc);

                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // получить новый ключ - посмотреть генератор в EXT_INFORMATION gen_id(ext_information, 1)
                cmd = new OleDbCommand("SELECT gen_id(ext_information, 1) FROM RDB$DATABASE", con, tran);
                newID = Convert.ToDecimal(cmd.ExecuteScalar());


                cmdDatum = new OleDbCommand();
                cmdDatum.Connection = con;
                cmdDatum.Transaction = tran;
                cmdDatum.CommandText = "INSERT INTO EXT_INFORMATION (ID, PROCEED, DOCUMENT_KEY, EXTERNAL_KEY, ACT_DATE, KIND_DATA_TYPE, ENTITY_NAME)";
                cmdDatum.CommandText += "  VALUES (:ID, 0, :DOCUMENT_KEY, :EXTERNAL_KEY, :ACT_DATE, '09', :ENTITY_NAME)";

                cmdDatum.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdDatum.Parameters.Add(new OleDbParameter(":DOCUMENT_KEY", Convert.ToDecimal(nID)));
                cmdDatum.Parameters.Add(new OleDbParameter(":EXTERNAL_KEY", Convert.ToDecimal(newID)));
                cmdDatum.Parameters.Add(new OleDbParameter(":ACT_DATE", Convert.ToDateTime(dtActDate)));
                cmdDatum.Parameters.Add(new OleDbParameter(":ENTITY_NAME", txtEntityName));
                cmdDatum.ExecuteNonQuery();


                cmdAcc = new OleDbCommand();
                cmdAcc.Connection = con;
                cmdAcc.Transaction = tran;
                cmdAcc.CommandText = "insert into EXT_AVAILABILITY_ACC_DATA (ID, BIC_BANK, ACC, SUMMA, CURRENCY_CODE)";
                cmdAcc.CommandText += " VALUES (:ID , :BIC, :ACC, :SUMMA, :CURRENCY_CODE)";
                cmdAcc.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdAcc.Parameters.Add(new OleDbParameter(":BIC_BANK", txtBik));
                cmdAcc.Parameters.Add(new OleDbParameter(":ACC", Convert.ToString(txtAcc)));
                cmdAcc.Parameters.Add(new OleDbParameter(":SUMMA", Convert.ToDecimal(nSum)));
                cmdAcc.Parameters.Add(new OleDbParameter("CURRENCY_CODE", Convert.ToString(nValuteCod)));

                cmdAcc.ExecuteNonQuery();

                tran.Commit();
                con.Close();

                return newID;
            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }
            return -1;
        }


        public decimal InsertResponseIntTableNewExtKey(OleDbConnection con, decimal nID, string txtOtvet, DateTime dtDatOtv, decimal nStatus, decimal nDX_PACK_ID, string txtAgentCode, string txtAgentDeptCode, string txtAgentAgreementCode, string txtEntityName, string txtAnswerType, Logger_ufssprk_tools lLogger)
        {
            // что такое entt_id - похоже что это код ПФ из справочника Legal
            // вставить EXT_INPUT_HEADER < - > EXT_RESPONSE (связь один к одному)
            OleDbCommand cmd, cmdEXT_INPUT_HEADER, cmdEXT_RESPONSE, cmdDocNumber;
            Decimal newID;
            OleDbTransaction tran = null;

            decimal res = 0;

            try
            {
                newID = 0;
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // получить новый ключ
                //cmd = new OleDbCommand("SELECT gen_id(seq_document, 1) FROM RDB$DATABASE", con, tran);
                //newID = Convert.ToDecimal(cmd.ExecuteScalar());


                // получить новый EXT ключ из ufssprk-tools
                decimal extID = lLogger.GenExtID();

                cmd = new OleDbCommand("SELECT gen_id(seq_ext_input_header, 1) FROM RDB$DATABASE", con, tran);
                newID = Convert.ToDecimal(cmd.ExecuteScalar());


                // вставить DOCUMENT
                cmdEXT_INPUT_HEADER = new OleDbCommand();
                cmdEXT_INPUT_HEADER.Connection = con;
                cmdEXT_INPUT_HEADER.Transaction = tran;
                cmdEXT_INPUT_HEADER.CommandText = "insert into EXT_INPUT_HEADER (ID, METAOBJECTNAME, PROCEED, PACK_NUMBER, EXTERNAL_KEY, AGENT_CODE, AGENT_DEPT_CODE, AGENT_AGREEMENT_CODE, DATE_IMPORT)";
                cmdEXT_INPUT_HEADER.CommandText += " VALUES (:ID ,'EXT_RESPONSE', 0, :PACK_NUMBER, :EXTERNAL_KEY, :AGENT_CODE, :AGENT_DEPT_CODE, :AGENT_AGREEMENT_CODE, :DATE_IMPORT)";

                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));

                // переписать - сделать номер пакета через генератор и передавать его, если передали пустой, то тогда делать генерацию
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":PACK_NUMBER", nDX_PACK_ID));

                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":EXTERNAL_KEY", Convert.ToString(extID)));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_CODE", txtAgentCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_DEPT_CODE", txtAgentDeptCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_AGREEMENT_CODE", txtAgentAgreementCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":DATE_IMPORT", DateTime.Today));


                if (cmdEXT_INPUT_HEADER.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to EXT_INPUT_HEADER table parent_id = " + nID.ToString());
                    throw ex;
                }

                // вставить MVV_RESPONSE
                // в 14 релизе добавились еще параметры EXAD_AGENT_ID, EXAD_DEPT_ID, OUTER_AGREEMENT_ID
                // а в 68-й сборке они куда-то пропали и неизвестно где они

                cmdEXT_RESPONSE = new OleDbCommand();
                cmdEXT_RESPONSE.Connection = con;
                cmdEXT_RESPONSE.Transaction = tran;
                cmdEXT_RESPONSE.CommandText = "insert into EXT_RESPONSE (ID, ENTITY_NAME, RESPONSE_DATE, REQUEST_NUM, REQUEST_ID, DATA_STR, ANSWER_TYPE)"; //, EXAD_AGENT_ID, EXAD_DEPT_ID, OUTER_AGREEMENT_ID
                cmdEXT_RESPONSE.CommandText += "  VALUES (:ID ,:ENTITY_NAME, :RESPONSE_DATE, :REQUEST_NUM, :REQUEST_ID, :DATA_STR, :ANSWER_TYPE)"; //, :EXAD_AGENT_ID, :EXAD_DEPT_ID, :OUTER_AGREEMENT_ID)";

                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":ENTITY_NAME", txtEntityName));
                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":RESPONSE_DATE", DateTime.Today));

                string txtReqDocNumber = "";
                cmdDocNumber = new OleDbCommand("select DOC_NUMBER from document where id = " + nID.ToString(), con, tran);
                txtReqDocNumber = Convert.ToString(cmdDocNumber.ExecuteScalar());

                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":REQUEST_NUM", txtReqDocNumber));
                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":REQUEST_ID", Convert.ToDecimal(nID)));

                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":DATA_STR", txtOtvet));
                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":ANSWER_TYPE", txtAnswerType));

                //cmdInsMVV_RESPONSE.Parameters.Add(new OleDbParameter(":EXAD_AGENT_ID", nAgent_id));
                //cmdInsMVV_RESPONSE.Parameters.Add(new OleDbParameter(":EXAD_DEPT_ID", nAgent_dept_id));
                //cmdInsMVV_RESPONSE.Parameters.Add(new OleDbParameter(":OUTER_AGREEMENT_ID", nAgreementID));

                // TODO: OUTER_AGREEMENT_ID, OUTER_AGREEMENT_NAME - соглашение

                if (cmdEXT_RESPONSE.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to EXT_RESPONSE table id = " + nID.ToString());
                    throw ex;
                }
                else
                {
                    res = extID;// если все удачно вставили - то вернуть extID
                }

                tran.Commit();
                con.Close();

                // проверить - надо ли это делать, т.к. возможно что система сама потом обновит статус приобработке инт. таблицы
                // делать это не буду - потому что это нештатно

                // SetDocumentStatus(nID, Convert.ToInt32(nStatus));// установить статус Получен ответ для запроса

                // система сама не делает - надо ставить самому
                // почему не ставим nStatus? (тогда был бы статус 19) - Обработан с ошибкой
                //SetDocumentStatus(nID, 19);// установить статус Получен ответ для запроса
                //SetDocumentStatus(nID, 15);// установить статус Обработано с ошибкой

                return res;
                //}
                //// TODO: решить что делать, если уже есть ответ на этот запрос...
                //else
                //{
                //    tran.Rollback();
                //    con.Close();

                //    // предлагаю просто дописывать - и не придумывать никаких вопросов.
                //    // TODO: кстати - вопрос правильно ли так делать - потому что есть реальная проблема
                //    // - если в ext_response.proceed = 1, то обрабатываться эта строчка больше не будет
                //    // а мы делаем update именно ее, тогда надо и proceed ставить 0
                //    // возможно, статус запроса надо будет поменять..
                //    if (AppendResponseIntTable(con, prevID, txtOtvet, dtDatOtv, nStatus, entt_id))
                //    {
                //        iRewriteState = 1;
                //        return true;
                //    }
                //}


            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }

            // проверить подключение - а то может статься что не закрыли
            if (con != null && con.State != ConnectionState.Closed) con.Close();

            return -1;
        }

        public decimal InsertResponseIntTableExtKey(OleDbConnection con, decimal nID, string txtOtvet, DateTime dtDatOtv, decimal nStatus, decimal nDX_PACK_ID, string txtAgentCode, string txtAgentDeptCode, string txtAgentAgreementCode, string txtEntityName, string txtAnswerType, string txtExtKey, Logger_ufssprk_tools lLogger)
        {
            // что такое entt_id - похоже что это код ПФ из справочника Legal
            // вставить EXT_INPUT_HEADER < - > EXT_RESPONSE (связь один к одному)
            OleDbCommand cmd, cmdEXT_INPUT_HEADER, cmdEXT_RESPONSE, cmdDocNumber;
            Decimal newID;
            OleDbTransaction tran = null;

            decimal res = 0;

            try
            {
                newID = 0;
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // получить новый ключ
                //cmd = new OleDbCommand("SELECT gen_id(seq_document, 1) FROM RDB$DATABASE", con, tran);
                //newID = Convert.ToDecimal(cmd.ExecuteScalar());


                // получить новый EXT ключ из ufssprk-tools
                // теперь делаю это на уровень выше, т.к. ключ этот нужн еще и для вставки доп. сведений
                // decimal extID = lLogger.GenExtID();

                cmd = new OleDbCommand("SELECT gen_id(seq_ext_input_header, 1) FROM RDB$DATABASE", con, tran);
                newID = Convert.ToDecimal(cmd.ExecuteScalar());


                // вставить DOCUMENT
                cmdEXT_INPUT_HEADER = new OleDbCommand();
                cmdEXT_INPUT_HEADER.Connection = con;
                cmdEXT_INPUT_HEADER.Transaction = tran;
                cmdEXT_INPUT_HEADER.CommandText = "insert into EXT_INPUT_HEADER (ID, METAOBJECTNAME, PROCEED, PACK_NUMBER, EXTERNAL_KEY, AGENT_CODE, AGENT_DEPT_CODE, AGENT_AGREEMENT_CODE, DATE_IMPORT)";
                cmdEXT_INPUT_HEADER.CommandText += " VALUES (:ID ,'EXT_RESPONSE', 0, :PACK_NUMBER, :EXTERNAL_KEY, :AGENT_CODE, :AGENT_DEPT_CODE, :AGENT_AGREEMENT_CODE, :DATE_IMPORT)";

                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));

                // переписать - сделать номер пакета через генератор и передавать его, если передали пустой, то тогда делать генерацию
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":PACK_NUMBER", nDX_PACK_ID));

                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":EXTERNAL_KEY", txtExtKey));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_CODE", txtAgentCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_DEPT_CODE", txtAgentDeptCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_AGREEMENT_CODE", txtAgentAgreementCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":DATE_IMPORT", DateTime.Today));


                if (cmdEXT_INPUT_HEADER.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to EXT_INPUT_HEADER table parent_id = " + nID.ToString());
                    throw ex;
                }

                // вставить MVV_RESPONSE
                // в 14 релизе добавились еще параметры EXAD_AGENT_ID, EXAD_DEPT_ID, OUTER_AGREEMENT_ID
                // а в 68-й сборке они куда-то пропали и неизвестно где они

                cmdEXT_RESPONSE = new OleDbCommand();
                cmdEXT_RESPONSE.Connection = con;
                cmdEXT_RESPONSE.Transaction = tran;
                cmdEXT_RESPONSE.CommandText = "insert into EXT_RESPONSE (ID, ENTITY_NAME, RESPONSE_DATE, REQUEST_NUM, REQUEST_ID, DATA_STR, ANSWER_TYPE)"; //, EXAD_AGENT_ID, EXAD_DEPT_ID, OUTER_AGREEMENT_ID
                cmdEXT_RESPONSE.CommandText += "  VALUES (:ID ,:ENTITY_NAME, :RESPONSE_DATE, :REQUEST_NUM, :REQUEST_ID, :DATA_STR, :ANSWER_TYPE)"; //, :EXAD_AGENT_ID, :EXAD_DEPT_ID, :OUTER_AGREEMENT_ID)";

                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":ENTITY_NAME", txtEntityName));
                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":RESPONSE_DATE", DateTime.Today));

                // все это не нужно - можно просто id писать
                //string txtReqDocNumber = "";
                //cmdDocNumber = new OleDbCommand("select DOC_NUMBER from document where id = " + nID.ToString(), con, tran);
                //txtReqDocNumber = Convert.ToString(cmdDocNumber.ExecuteScalar());
                string txtReqDocNumber = "";
                txtReqDocNumber = Convert.ToString(nID);

                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":REQUEST_NUM", txtReqDocNumber));
                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":REQUEST_ID", Convert.ToDecimal(nID)));

                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":DATA_STR", txtOtvet));
                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":ANSWER_TYPE", txtAnswerType));

                //cmdInsMVV_RESPONSE.Parameters.Add(new OleDbParameter(":EXAD_AGENT_ID", nAgent_id));
                //cmdInsMVV_RESPONSE.Parameters.Add(new OleDbParameter(":EXAD_DEPT_ID", nAgent_dept_id));
                //cmdInsMVV_RESPONSE.Parameters.Add(new OleDbParameter(":OUTER_AGREEMENT_ID", nAgreementID));

                // TODO: OUTER_AGREEMENT_ID, OUTER_AGREEMENT_NAME - соглашение

                if (cmdEXT_RESPONSE.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to EXT_RESPONSE table id = " + nID.ToString());
                    throw ex;
                }
                else
                {
                    res = newID;// если все удачно вставили - то вернуть newID 
                }

                tran.Commit();
                con.Close();

                return res;

            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }

            // проверить подключение - а то может статься что не закрыли
            if (con != null && con.State != ConnectionState.Closed) con.Close();

            return -1;
        }


        public decimal InsertResponseIntTable(OleDbConnection con, decimal nID, string txtOtvet, DateTime dtDatOtv, decimal nStatus, decimal nDX_PACK_ID, string txtAgentCode, string txtAgentDeptCode, string txtAgentAgreementCode, string txtEntityName, string txtAnswerType, Logger_ufssprk_tools lLogger)
        {
            // что такое entt_id - похоже что это код ПФ из справочника Legal
            // вставить EXT_INPUT_HEADER < - > EXT_RESPONSE (связь один к одному)
            OleDbCommand cmd, cmdEXT_INPUT_HEADER, cmdEXT_RESPONSE, cmdDocNumber;
            Decimal newID;
            OleDbTransaction tran = null;
            
            decimal res = 0;

            try
            {
                newID = 0;
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                
                // получить новый ключ
                //cmd = new OleDbCommand("SELECT gen_id(seq_document, 1) FROM RDB$DATABASE", con, tran);
                //newID = Convert.ToDecimal(cmd.ExecuteScalar());


                // получить новый EXT ключ из ufssprk-tools
                decimal extID = lLogger.GenExtID();
                
                cmd = new OleDbCommand("SELECT gen_id(seq_ext_input_header, 1) FROM RDB$DATABASE", con, tran);
                newID = Convert.ToDecimal(cmd.ExecuteScalar());
                

                // вставить DOCUMENT
                cmdEXT_INPUT_HEADER = new OleDbCommand();
                cmdEXT_INPUT_HEADER.Connection = con;
                cmdEXT_INPUT_HEADER.Transaction = tran;
                cmdEXT_INPUT_HEADER.CommandText = "insert into EXT_INPUT_HEADER (ID, METAOBJECTNAME, PROCEED, PACK_NUMBER, EXTERNAL_KEY, AGENT_CODE, AGENT_DEPT_CODE, AGENT_AGREEMENT_CODE, DATE_IMPORT)";
                cmdEXT_INPUT_HEADER.CommandText += " VALUES (:ID ,'EXT_RESPONSE', 0, :PACK_NUMBER, :EXTERNAL_KEY, :AGENT_CODE, :AGENT_DEPT_CODE, :AGENT_AGREEMENT_CODE, :DATE_IMPORT)";

                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));

                // переписать - сделать номер пакета через генератор и передавать его, если передали пустой, то тогда делать генерацию
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":PACK_NUMBER", nDX_PACK_ID));

                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":EXTERNAL_KEY", Convert.ToString(extID)));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_CODE", txtAgentCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_DEPT_CODE", txtAgentDeptCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_AGREEMENT_CODE", txtAgentAgreementCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":DATE_IMPORT", DateTime.Today));


                if (cmdEXT_INPUT_HEADER.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to EXT_INPUT_HEADER table parent_id = " + nID.ToString());
                    throw ex;
                }

                // вставить MVV_RESPONSE
                // в 14 релизе добавились еще параметры EXAD_AGENT_ID, EXAD_DEPT_ID, OUTER_AGREEMENT_ID
                // а в 68-й сборке они куда-то пропали и неизвестно где они

                cmdEXT_RESPONSE = new OleDbCommand();
                cmdEXT_RESPONSE.Connection = con;
                cmdEXT_RESPONSE.Transaction = tran;
                cmdEXT_RESPONSE.CommandText = "insert into EXT_RESPONSE (ID, ENTITY_NAME, RESPONSE_DATE, REQUEST_NUM, REQUEST_ID, DATA_STR, ANSWER_TYPE)"; //, EXAD_AGENT_ID, EXAD_DEPT_ID, OUTER_AGREEMENT_ID
                cmdEXT_RESPONSE.CommandText += "  VALUES (:ID ,:ENTITY_NAME, :RESPONSE_DATE, :REQUEST_NUM, :REQUEST_ID, :DATA_STR, :ANSWER_TYPE)"; //, :EXAD_AGENT_ID, :EXAD_DEPT_ID, :OUTER_AGREEMENT_ID)";

                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":ENTITY_NAME", txtEntityName));
                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":RESPONSE_DATE", DateTime.Today));

                string txtReqDocNumber = "";
                cmdDocNumber = new OleDbCommand("select DOC_NUMBER from document where id = " + nID.ToString(), con, tran);
                txtReqDocNumber = Convert.ToString(cmdDocNumber.ExecuteScalar());

                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":REQUEST_NUM", txtReqDocNumber));
                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":REQUEST_ID", Convert.ToDecimal(nID)));

                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":DATA_STR", txtOtvet));
                cmdEXT_RESPONSE.Parameters.Add(new OleDbParameter(":ANSWER_TYPE", txtAnswerType));

                //cmdInsMVV_RESPONSE.Parameters.Add(new OleDbParameter(":EXAD_AGENT_ID", nAgent_id));
                //cmdInsMVV_RESPONSE.Parameters.Add(new OleDbParameter(":EXAD_DEPT_ID", nAgent_dept_id));
                //cmdInsMVV_RESPONSE.Parameters.Add(new OleDbParameter(":OUTER_AGREEMENT_ID", nAgreementID));

                // TODO: OUTER_AGREEMENT_ID, OUTER_AGREEMENT_NAME - соглашение

                if (cmdEXT_RESPONSE.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to EXT_RESPONSE table id = " + nID.ToString());
                    throw ex;
                }
                else
                {
                    res = newID;// если все удачно вставили - то вернуть newID 
                }

                tran.Commit();
                con.Close();

                // проверить - надо ли это делать, т.к. возможно что система сама потом обновит статус приобработке инт. таблицы
                // делать это не буду - потому что это нештатно
                
                // SetDocumentStatus(nID, Convert.ToInt32(nStatus));// установить статус Получен ответ для запроса

                // система сама не делает - надо ставить самому
                // почему не ставим nStatus? (тогда был бы статус 19) - Обработан с ошибкой
                //SetDocumentStatus(nID, 19);// установить статус Получен ответ для запроса
                //SetDocumentStatus(nID, 15);// установить статус Обработано с ошибкой

                return res;
                //}
                //// TODO: решить что делать, если уже есть ответ на этот запрос...
                //else
                //{
                //    tran.Rollback();
                //    con.Close();

                //    // предлагаю просто дописывать - и не придумывать никаких вопросов.
                //    // TODO: кстати - вопрос правильно ли так делать - потому что есть реальная проблема
                //    // - если в ext_response.proceed = 1, то обрабатываться эта строчка больше не будет
                //    // а мы делаем update именно ее, тогда надо и proceed ставить 0
                //    // возможно, статус запроса надо будет поменять..
                //    if (AppendResponseIntTable(con, prevID, txtOtvet, dtDatOtv, nStatus, entt_id))
                //    {
                //        iRewriteState = 1;
                //        return true;
                //    }
                //}


            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }

            // проверить подключение - а то может статься что не закрыли
            if (con != null && con.State != ConnectionState.Closed) con.Close();

            return -1;
        }

        // вставка EXT_IDENTIFICATION_DATA - информации об удостоверении личности (в том числе ВУ)
        public decimal InsertExtIdentificationData(OleDbConnection con, decimal nID, string txtEntityName, DateTime dtActDate, string txtNumDoc, DateTime dtDateDoc, string txtFIO_D, string txtTypeDocCode, Logger_ufssprk_tools lLogger)
        {
            // что такое entt_id - похоже что это код ПФ из справочника Legal
            // вставить EXT_INPUT_HEADER < - > EXT_RESPONSE (связь один к одному)
            OleDbCommand cmd, cmdDatum, cmdEXT_IDENTIFICATION_DATA;
            Decimal newID;
            OleDbTransaction tran = null;
            decimal res = 0;
            try
            {
                newID = 0;

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // получить новый ключ
                //cmd = new OleDbCommand("SELECT gen_id(seq_document, 1) FROM RDB$DATABASE", con, tran);
                //newID = Convert.ToDecimal(cmd.ExecuteScalar());

                // получить новый EXT ключ из ufssprk-tools
                decimal extID = lLogger.GenExtID();

                // получить новый ключ - посмотреть генератор в EXT_INFORMATION gen_id(ext_information, 1)
                cmd = new OleDbCommand("SELECT gen_id(ext_information, 1) FROM RDB$DATABASE", con, tran);
                newID = Convert.ToDecimal(cmd.ExecuteScalar());


                cmdDatum = new OleDbCommand();
                cmdDatum.Connection = con;
                cmdDatum.Transaction = tran;
                cmdDatum.CommandText = "INSERT INTO EXT_INFORMATION (ID, PROCEED, DOCUMENT_KEY, EXTERNAL_KEY, ACT_DATE, ENTITY_NAME)";
                cmdDatum.CommandText += "  VALUES (:ID, 0, :DOCUMENT_KEY, :EXTERNAL_KEY, :ACT_DATE, :ENTITY_NAME)";

                cmdDatum.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdDatum.Parameters.Add(new OleDbParameter(":DOCUMENT_KEY", cutEnd(nID.ToString(), 60)));
                cmdDatum.Parameters.Add(new OleDbParameter(":EXTERNAL_KEY", cutEnd(newID.ToString(), 60)));
                cmdDatum.Parameters.Add(new OleDbParameter(":ACT_DATE", Convert.ToDateTime(dtActDate)));
                cmdDatum.Parameters.Add(new OleDbParameter(":ENTITY_NAME", cutEnd(txtEntityName, 255)));


                if (cmdDatum.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to EXT_INFORMATION table id = " + nID.ToString());
                    throw ex;
                }



                // вставить EXT_REPORT
                cmdEXT_IDENTIFICATION_DATA = new OleDbCommand();
                cmdEXT_IDENTIFICATION_DATA.Connection = con;
                cmdEXT_IDENTIFICATION_DATA.Transaction = tran;
                cmdEXT_IDENTIFICATION_DATA.CommandText = "INSERT INTO EXT_IDENTIFICATION_DATA (ID, NUM_DOC, DATE_DOC, FIO_DOC, TYPE_DOC_CODE)";
                cmdEXT_IDENTIFICATION_DATA.CommandText += "  VALUES (:ID, :NUM_DOC, :DATE_DOC, :FIO_DOC, :TYPE_DOC_CODE)";
                cmdEXT_IDENTIFICATION_DATA.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdEXT_IDENTIFICATION_DATA.Parameters.Add(new OleDbParameter(":NUM_DOC", cutEnd(txtNumDoc, 25)));
                cmdEXT_IDENTIFICATION_DATA.Parameters.Add(new OleDbParameter(":DATE_DOC", dtDateDoc));
                cmdEXT_IDENTIFICATION_DATA.Parameters.Add(new OleDbParameter(":FIO_DOC", cutEnd(txtFIO_D, 300)));
                cmdEXT_IDENTIFICATION_DATA.Parameters.Add(new OleDbParameter(":TYPE_DOC_CODE", txtTypeDocCode));
                if (cmdEXT_IDENTIFICATION_DATA.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to EXT_IDENTIFICATION_DATA table id = " + nID.ToString());
                    throw ex;
                }
                else
                {
                    res = newID;// если все удачно вставили - то вернуть newID 
                }

                tran.Commit();
                con.Close();

                return res;

            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }

            // проверить подключение - а то может статься что не закрыли
            if (con != null && con.State != ConnectionState.Closed) con.Close();

            return -1;
        }



        // вставка в EXT_DEBT_FIX информации о погашенгии долга взыскателю 
        // 1. - Определить параметры
        public decimal InsertExtDebtFix(OleDbConnection con, string txtIdNum, string txtPdNum, string txtIpNum, DateTime dtPdDate, DateTime dtIdDate, double nPaySum, string txtDebtorName, decimal nDX_PACK_ID, string txtAgentCode, string txtAgentDeptCode, string txtAgentAgreementCode, string txtDebtorAdr, int nYearB, DateTime dtDebtorBirthDate, decimal CHANGEDBT_REASON_CODE, Logger_ufssprk_tools lLogger)
        {
            // что такое entt_id - похоже что это код ПФ из справочника Legal
            // вставить EXT_INPUT_HEADER < - > EXT_RESPONSE (связь один к одному)
            OleDbCommand cmd, cmdEXT_INPUT_HEADER, cmdEXT_DEBT_FIX;
            Decimal newID;
            OleDbTransaction tran = null;
            decimal res = 0;
            try
            {
                newID = 0;

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // получить новый ключ
                //cmd = new OleDbCommand("SELECT gen_id(seq_document, 1) FROM RDB$DATABASE", con, tran);
                //newID = Convert.ToDecimal(cmd.ExecuteScalar());

                // получить новый EXT ключ из ufssprk-tools
                decimal extID = lLogger.GenExtID();

                cmd = new OleDbCommand("SELECT gen_id(seq_ext_input_header, 1) FROM RDB$DATABASE", con, tran);
                newID = Convert.ToDecimal(cmd.ExecuteScalar());

                // вставить DOCUMENT
                cmdEXT_INPUT_HEADER = new OleDbCommand();
                cmdEXT_INPUT_HEADER.Connection = con;
                cmdEXT_INPUT_HEADER.Transaction = tran;
                cmdEXT_INPUT_HEADER.CommandText = "insert into EXT_INPUT_HEADER (ID, METAOBJECTNAME, PROCEED, PACK_NUMBER, EXTERNAL_KEY, AGENT_CODE, AGENT_DEPT_CODE, AGENT_AGREEMENT_CODE, DATE_IMPORT)";
                cmdEXT_INPUT_HEADER.CommandText += " VALUES (:ID ,'EXT_DEBT_FIX', 0, :PACK_NUMBER, :EXTERNAL_KEY, :AGENT_CODE, :AGENT_DEPT_CODE, :AGENT_AGREEMENT_CODE, :DATE_IMPORT)";
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":PACK_NUMBER", nDX_PACK_ID));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":EXTERNAL_KEY", Convert.ToString(extID))); // связь с постановлением ext_key = act_id
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_CODE", txtAgentCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_DEPT_CODE", txtAgentDeptCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_AGREEMENT_CODE", txtAgentAgreementCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":DATE_IMPORT", DateTime.Today));

                if (cmdEXT_INPUT_HEADER.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to EXT_INPUT_HEADER table ip_num = " + txtIpNum);
                    throw ex;
                }



                // вставить EXT_REPORT
                cmdEXT_DEBT_FIX = new OleDbCommand();
                cmdEXT_DEBT_FIX.Connection = con;
                cmdEXT_DEBT_FIX.Transaction = tran;
                cmdEXT_DEBT_FIX.CommandText = "INSERT INTO EXT_DEBT_FIX (ID, ID_NUM, PD_NUM, IP_NUM, ID_DATE, PD_DATE, PAY_SUM, DEBTOR_NAME, DEBTOR_ADR, DEBTOR_BIRTH_YEAR, DEBTOR_BIRTH_DATE, CHANGEDBT_REASON_CODE, IS_PAYING_OFF)";
                cmdEXT_DEBT_FIX.CommandText += "  VALUES (:ID, :ID_NUM, :PD_NUM, :IP_NUM, :ID_DATE, :PD_DATE, :PAY_SUM, :DEBTOR_NAME, :DEBTOR_ADR, :DEBTOR_BIRTH_YEAR, :DEBTOR_BIRTH_DATE, :CHANGEDBT_REASON_CODE, 1)";
                cmdEXT_DEBT_FIX.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdEXT_DEBT_FIX.Parameters.Add(new OleDbParameter(":ID_NUM", cutEnd(txtIdNum,50)));
                cmdEXT_DEBT_FIX.Parameters.Add(new OleDbParameter(":PD_NUM", cutEnd(txtPdNum, 20)));
                cmdEXT_DEBT_FIX.Parameters.Add(new OleDbParameter(":IP_NUM", cutEnd(txtIpNum, 20)));
                cmdEXT_DEBT_FIX.Parameters.Add(new OleDbParameter(":ID_DATE", dtIdDate));
                cmdEXT_DEBT_FIX.Parameters.Add(new OleDbParameter(":PD_DATE", dtPdDate));
                cmdEXT_DEBT_FIX.Parameters.Add(new OleDbParameter(":PAY_SUM", nPaySum));
                cmdEXT_DEBT_FIX.Parameters.Add(new OleDbParameter(":DEBTOR_NAME", cutEnd(txtDebtorName, 255)));
                cmdEXT_DEBT_FIX.Parameters.Add(new OleDbParameter(":DEBTOR_ADR", cutEnd(txtDebtorAdr, 300)));
                cmdEXT_DEBT_FIX.Parameters.Add(new OleDbParameter(":DEBTOR_BIRTH_YEAR", nYearB));
                                
                if (dtDebtorBirthDate.Equals(Convert.ToDateTime("01.01.1800")))
                    cmdEXT_DEBT_FIX.Parameters.Add(new OleDbParameter(":DEBTOR_BIRTH_DATE", System.DBNull.Value));
                else cmdEXT_DEBT_FIX.Parameters.Add(new OleDbParameter(":DEBTOR_BIRTH_DATE", dtDebtorBirthDate));

                cmdEXT_DEBT_FIX.Parameters.Add(new OleDbParameter(":CHANGEDBT_REASON_CODE", Convert.ToDecimal(CHANGEDBT_REASON_CODE)));
                
                if (cmdEXT_DEBT_FIX.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to EXT_DEBT_FIX table ip_num = " + txtIpNum);
                    throw ex;
                }
                else
                {
                    res = newID;// если все удачно вставили - то вернуть newID 
                }

                tran.Commit();
                con.Close();

                return res;

            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }

            // проверить подключение - а то может статься что не закрыли
            if (con != null && con.State != ConnectionState.Closed) con.Close();

            return -1;
        }

        public decimal InsertExtReport(OleDbConnection con, decimal ip_id, string txtContent, decimal nDX_PACK_ID, string txtAgentCode, string txtAgentDeptCode, string txtAgentAgreementCode, Logger_ufssprk_tools lLogger)
        {
            // что такое entt_id - похоже что это код ПФ из справочника Legal
            // вставить EXT_INPUT_HEADER < - > EXT_RESPONSE (связь один к одному)
            OleDbCommand cmd, cmdEXT_INPUT_HEADER, cmdEXT_REPORT;
            Decimal newID;
            OleDbTransaction tran = null;
            decimal res = 0;
            try
            {
                newID = 0;

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // получить новый ключ
                //cmd = new OleDbCommand("SELECT gen_id(seq_document, 1) FROM RDB$DATABASE", con, tran);
                //newID = Convert.ToDecimal(cmd.ExecuteScalar());

                // получить новый EXT ключ из ufssprk-tools
                decimal extID = lLogger.GenExtID();

                cmd = new OleDbCommand("SELECT gen_id(seq_ext_input_header, 1) FROM RDB$DATABASE", con, tran);
                newID = Convert.ToDecimal(cmd.ExecuteScalar());

                // вставить DOCUMENT
                cmdEXT_INPUT_HEADER = new OleDbCommand();
                cmdEXT_INPUT_HEADER.Connection = con;
                cmdEXT_INPUT_HEADER.Transaction = tran;
                cmdEXT_INPUT_HEADER.CommandText = "insert into EXT_INPUT_HEADER (ID, METAOBJECTNAME, PROCEED, PACK_NUMBER, EXTERNAL_KEY, AGENT_CODE, AGENT_DEPT_CODE, AGENT_AGREEMENT_CODE, DATE_IMPORT)";
                cmdEXT_INPUT_HEADER.CommandText += " VALUES (:ID ,'EXT_REPORT', 0, :PACK_NUMBER, :EXTERNAL_KEY, :AGENT_CODE, :AGENT_DEPT_CODE, :AGENT_AGREEMENT_CODE, :DATE_IMPORT)";
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":PACK_NUMBER", nDX_PACK_ID));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":EXTERNAL_KEY", Convert.ToString(extID))); // связь с постановлением ext_key = act_id
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_CODE", txtAgentCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_DEPT_CODE", txtAgentDeptCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_AGREEMENT_CODE", txtAgentAgreementCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":DATE_IMPORT", DateTime.Today));

                if (cmdEXT_INPUT_HEADER.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to EXT_INPUT_HEADER table ip_id = " + ip_id.ToString());
                    throw ex;
                }

                // к txtMessage нужно добавить # счета, на который пришла квитанция



                // вставить EXT_REPORT
                cmdEXT_REPORT = new OleDbCommand();
                cmdEXT_REPORT.Connection = con;
                cmdEXT_REPORT.Transaction = tran;
                cmdEXT_REPORT.CommandText = "INSERT INTO EXT_REPORT (ID, IP_INTERNAL_KEY, DESCRIPTION, INSIDE_INFORMATION)";
                cmdEXT_REPORT.CommandText += "  VALUES (:ID, :IP_INTERNAL_KEY, :DESCRIPTION, :INSIDE_INFORMATION)";
                cmdEXT_REPORT.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdEXT_REPORT.Parameters.Add(new OleDbParameter(":IP_INTERNAL_KEY", Convert.ToDecimal(ip_id)));
                cmdEXT_REPORT.Parameters.Add(new OleDbParameter(":DESCRIPTION", cutEnd(txtContent, 1000)));
                cmdEXT_REPORT.Parameters.Add(new OleDbParameter(":INSIDE_INFORMATION", cutEnd(txtContent, 1000)));

                if (cmdEXT_REPORT.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to EXT_REPORT table ip_id = " + ip_id.ToString());
                    throw ex;
                }
                else
                {
                    res = newID;// если все удачно вставили - то вернуть newID 
                }

                tran.Commit();
                con.Close();

                return res;

            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }

            // проверить подключение - а то может статься что не закрыли
            if (con != null && con.State != ConnectionState.Closed) con.Close();

            return -1;
        }

        // добавить в инт. таблицу данные из ответа 
        // на вход строка базы данных с паспортом РФ
        // ID_DBTR_ID_SERIAL, ID_DBTR_ID_NUMBER, ID_DBTR_ID_DATE, ID_DBTR_ID_OFFICE, ID_DBTR_ID_CODE_DEP

        // добавляем параметр - txtDocumentKey

        public decimal InsertExtIdentDataIntTable(OleDbConnection con, string txtDocumentKey, string txtEntityName, DataRow row, Logger_ufssprk_tools lLogger)
        {

            /*                
            
            ID	BIGINT				О	Указывается значение сгенерированное для поля ID в EXT_INFORMATION.
            NUM_DOC	VARCHAR(25)		О	Указывается номер документа, удостоверяющего личность
            DATE_DOC	DATE		Н	Указывается дата выдачи документа, удостоверяющего личность
            CODE_DEP	VARCHAR(7)	Н	Указывается код подразделения, в котором был выдан документ, удостоверяющий личность
            SER_DOC	VARCHAR(25)		Н	Указывается серия документа, удостоверяющего личность
            FIO_DOC	VARCHAR(300)	Н	ФИО
            STR_ADDR VARCHAR(300)	Н	Указывается адрес в формате КЛАДР <страна>, <почтовый индекс>, <регион>, <район>, <город>, <населенный пункт>, <улица>, <дом>, <корпус / строение / владения>, <квартира> или (в случае отсутствия кода страны) в произвольном формате.
            ISSUED_DOC VARCHAR(300)	Н	Указывается наименование подразделения, выдавшего документ удостоверяющий личность.
            TYPE_DOC_CODE VARCHAR(2)H	Указывается цифровой код типа документа, удостоверяющего личность. Значение берется из справочника «Коды документов, удостоверяющих личность» (DIRECTORY_TYPES)

            INSERT INTO EXT_IDENTIFICATION_DATA (ID, NUM_DOC, DATE_DOC, CODE_DEP, SER_DOC, FIO_DOC, STR_ADDR, ISSUED_DOC, TYPE_DOC_CODE) VALUES (86201003475772, '973591', '15-FEB-2010', '100-002', '8609', 'ИВАНОВ ИГОРЬ ЕВГЕНЬЕВИЧ', NULL, 'МВД ПО РК', '21');
             
            */

            OleDbCommand cmd, cmdDatum, cmdExtIdentData;
            OleDbTransaction tran = null;
            decimal newID = 0;
            

            try
            {
                string txtID_DBTR_ID_SERIAL = Convert.ToString(row["ID_DBTR_ID_SERIAL"]).Trim(); // SER_DOC
                string txtID_DBTR_ID_NUMBER = Convert.ToString(row["ID_DBTR_ID_NUMBER"]).Trim(); // NUM_DOC
                string txtID_DBTR_ID_DATE = Convert.ToString(row["ID_DBTR_ID_DATE"]).Trim(); // DATE_DOC
                string txtID_DBTR_ID_OFFICE = Convert.ToString(row["ID_DBTR_ID_OFFICE"]).Trim(); //  ISSUED_DOC
                string txtID_DBTR_ID_CODE_DEP = Convert.ToString(row["ID_DBTR_ID_CODE_DEP"]).Trim(); // CODE_DEP
                string txtID_DBTR_NAME = Convert.ToString(row["ID_DBTR_NAME"]).Trim(); // FIO_DOC
                
                // STR_ADDR - необязательный параметр
                // TYPE_DOC_CODE = 21 для паспорта РФ
                // NUM_DOC, DATE_DOC, CODE_DEP, SER_DOC, FIO_DOC, ISSUED_DOC, TYPE_DOC_CODE
                
               
                if ((con == null) || (con.State.Equals(ConnectionState.Closed)))
                {
                    con.Open();
                }

                DateTime dtDulDate = DateTime.MinValue;
                if (!DateTime.TryParse(txtID_DBTR_ID_DATE, out dtDulDate))
                {
                    dtDulDate = DateTime.MaxValue;
                }

                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // получить новый ключ - посмотреть генератор в EXT_INFORMATION gen_id(ext_information, 1)
                cmd = new OleDbCommand("SELECT gen_id(ext_information, 1) FROM RDB$DATABASE", con, tran);
                newID = Convert.ToDecimal(cmd.ExecuteScalar());

                cmdDatum = new OleDbCommand();
                cmdDatum.Connection = con;
                cmdDatum.Transaction = tran;
                cmdDatum.CommandText = "INSERT INTO EXT_INFORMATION (ID, PROCEED, DOCUMENT_KEY, EXTERNAL_KEY, ACT_DATE, ENTITY_NAME)";
                cmdDatum.CommandText += "  VALUES (:ID, 0, :DOCUMENT_KEY, :EXTERNAL_KEY, :ACT_DATE, :ENTITY_NAME)";

                cmdDatum.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                
                //cmdDatum.Parameters.Add(new OleDbParameter(":DOCUMENT_KEY", Convert.ToDecimal(nID)));
                // видим что это не ключ, а просто генератор, что, конечно, не есть супер - но пока пусть так будет
                
                // оставлять не будем - сделаем как положено
                // EXT_INFORMATION.DOCUMENT_KEY = EXT_INPUT_HEADER.EXTERNAL_KEY
                cmdDatum.Parameters.Add(new OleDbParameter(":DOCUMENT_KEY", cutEnd(txtDocumentKey, 60)));
                
                //cmdDatum.Parameters.Add(new OleDbParameter(":EXTERNAL_KEY", Convert.ToDecimal(newID)));
                // и тут тоже поправим - добавим префикс "ИЦ_МВД_10_ФМС."
                cmdDatum.Parameters.Add(new OleDbParameter(":EXTERNAL_KEY", cutEnd("ИЦ_МВД_10_ФМС." + txtDocumentKey, 60)));
                
                cmdDatum.Parameters.Add(new OleDbParameter(":ACT_DATE", DateTime.Today)); // дата актуальности пусть будет текущая дата
                cmdDatum.Parameters.Add(new OleDbParameter(":ENTITY_NAME", txtEntityName));
                cmdDatum.ExecuteNonQuery();


                cmdExtIdentData = new OleDbCommand();
                cmdExtIdentData.Connection = con;
                cmdExtIdentData.Transaction = tran;
                cmdExtIdentData.CommandText = "INSERT INTO EXT_IDENTIFICATION_DATA (ID, NUM_DOC, DATE_DOC, CODE_DEP, SER_DOC, FIO_DOC, ISSUED_DOC, TYPE_DOC_CODE)";
                cmdExtIdentData.CommandText += " VALUES (:ID, :NUM_DOC, :DATE_DOC, :CODE_DEP, :SER_DOC, :FIO_DOC, :ISSUED_DOC, '21')";
                cmdExtIdentData.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdExtIdentData.Parameters.Add(new OleDbParameter(":NUM_DOC", cutEnd(txtID_DBTR_ID_NUMBER, 25)));
                cmdExtIdentData.Parameters.Add(new OleDbParameter(":DATE_DOC", dtDulDate));
                cmdExtIdentData.Parameters.Add(new OleDbParameter(":CODE_DEP", cutEnd(txtID_DBTR_ID_CODE_DEP, 7)));
                cmdExtIdentData.Parameters.Add(new OleDbParameter(":SER_DOC", cutEnd(txtID_DBTR_ID_SERIAL, 25)));
                cmdExtIdentData.Parameters.Add(new OleDbParameter(":FIO_DOC", cutEnd(txtID_DBTR_NAME, 300)));
                cmdExtIdentData.Parameters.Add(new OleDbParameter(":ISSUED_DOC", cutEnd(txtID_DBTR_ID_OFFICE, 300)));
                cmdExtIdentData.ExecuteNonQuery();

                tran.Commit();
                con.Close();

                return newID;
            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }
            return -1;
        }

        public decimal InsertExtDatumMachineRtnIntTable(OleDbConnection con, decimal nID, string txtEntityName, DataRow row, Logger_ufssprk_tools lLogger)
        {

            /*                
            ==Обязательные==
            ID (Указывается значение сгенерированное для поля ID в EXT_INFORMATION.)
            NAME VARCHAR(1000) 
            TYPE VARCHAR(2) 
            Доступные значения:
            1 — Прицепы;
            LIKE '%ПРИЦЕП%'
            2 — Самоходные машины;
            LIKE '%МАШИН%' or LIKE '%ТРАКТОР%' or LIKE '%ГУСЕНИЧ%' or LIKE '%САМОСВАЛ%' or LIKE '%ПОГРУЗЧИК%' or LIKE '%ОХОД%' or LIKE '%ОЧИСТИТЕЛЬ%' or LIKE '%ТЯГАЧ%' or LIKE '%ТРЕЛЕВОЧН%'

            3 — Машины растениеводства (кроме зарегистрированных);
            4 — Машины растениеводства;
            5 — Оборудование животноводческих ферм;
            6 — Оборудование дляживотноводства;
            7 — Оборудование перерабатывающих отраслей;
            8 — Нефтескладское оборудование;
            9 — Прочие сельскохозяйственныемашины;
            10 — Прочие машины и оборудование;
            LIKE '%ОБОРУДОВАНИЕ%' or LIKE '%УСТАНОВК%' or LIKE '%СТАНОК%' or LIKE '%АГРЕГАТ%' or LIKE '%КОМПР%'
            11 — Узлы и агрегаты;
            99 — Прочие машины.
 
             ==Необязательные==	
            MODEL VARCHAR(50)
            NOTES VARCHAR(1000)
            COLOR VARCHAR(50)
            CATEGORY VARCHAR(50)
            MADE_YEAR INTEGER
            BRAND_NAME VARCHAR(50)
            */

            OleDbCommand cmd, cmdDatum, cmdExtTransport;
            OleDbTransaction tran = null;
            decimal newID = 0;
            string txtMarkName = "Маломерное судно";

            try
            {
                string txtName = Convert.ToString(row["TITLE"]).Trim(); //марка
                string txtType = "99";
                string txtCLASS = Convert.ToString(row["CLASS"]).Trim(); // класс
                if (txtCLASS.ToUpper().Contains("ПРИЦЕП")) txtType = "1"; // 1 - Прицепы
            
                if (txtCLASS.ToUpper().Contains("МАШИН") || txtCLASS.ToUpper().Contains("ТРАКТОР") || txtCLASS.ToUpper().Contains("ГУСЕНИЧ") 
                || txtCLASS.ToUpper().Contains("САМОСВАЛ") || txtCLASS.ToUpper().Contains("ПОГРУЗЧИК") || txtCLASS.ToUpper().Contains("ОХОД") 
                || txtCLASS.ToUpper().Contains("ОЧИСТИТЕЛЬ") || txtCLASS.ToUpper().Contains("ТЯГАЧ") || txtCLASS.ToUpper().Contains("ТРЕЛЕВОЧН") 
                ) txtType = "2"; // 2 - Самоходные машины

                if (txtCLASS.ToUpper().Contains("ОБОРУДОВАНИЕ") || txtCLASS.ToUpper().Contains("УСТАНОВК") || txtCLASS.ToUpper().Contains("СТАНОК") 
                || txtCLASS.ToUpper().Contains("АГРЕГАТ") || txtCLASS.ToUpper().Contains("КОМПР") || txtCLASS.ToUpper().Contains("ОХОД") 
                || txtCLASS.ToUpper().Contains("ОЧИСТИТЕЛЬ") || txtCLASS.ToUpper().Contains("ТЯГАЧ") || txtCLASS.ToUpper().Contains("ТРЕЛЕВОЧН") 
                ) txtType = "10"; // 10 — Прочие машины и оборудование;
                

                string txtREGNUM = Convert.ToString(row["REGNUM"]).Trim(); //госзнак
                
                
                string txtMade_Year = Convert.ToString(row["M_YEAR"]).Trim(); // год выпуска

                string txtREG_DATE = Convert.ToString(row["REG_DATE"]).Trim(); // дата рег
                string txtCHECK_DATE = Convert.ToString(row["CHECK_DATE"]).Trim(); // дата ТО
                string txtOWNER_ADDR = Convert.ToString(row["OWNER_ADDR"]).Trim(); // Адрес владельца
                string txtINN = Convert.ToString(row["INN"]).Trim(); // ИНН владельца

                string txtMODEL = txtCLASS; // в модель запишем класс

                string txtActDate = "01.01.1900";
                if (row.Table.Columns.Contains("act_date"))
                    txtActDate = Convert.ToString(row["act_date"]).Trim();


                if ((con == null) || (con.State.Equals(ConnectionState.Closed)))
                {
                    con.Open();
                }


                int iMadeYear = 0;
                if (!Int32.TryParse(txtMade_Year, out iMadeYear))
                {
                    iMadeYear = 0;
                }

                DateTime dtActDate = DateTime.MinValue;
                if (!DateTime.TryParse(txtActDate, out dtActDate))
                {
                    dtActDate = DateTime.MinValue;
                }

                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // получить новый ключ - посмотреть генератор в EXT_INFORMATION gen_id(ext_information, 1)
                cmd = new OleDbCommand("SELECT gen_id(ext_information, 1) FROM RDB$DATABASE", con, tran);
                newID = Convert.ToDecimal(cmd.ExecuteScalar());


                cmdDatum = new OleDbCommand();
                cmdDatum.Connection = con;
                cmdDatum.Transaction = tran;
                cmdDatum.CommandText = "INSERT INTO EXT_INFORMATION (ID, PROCEED, DOCUMENT_KEY, EXTERNAL_KEY, ACT_DATE, ENTITY_NAME)";
                cmdDatum.CommandText += "  VALUES (:ID, 0, :DOCUMENT_KEY, :EXTERNAL_KEY, :ACT_DATE, :ENTITY_NAME)";

                cmdDatum.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdDatum.Parameters.Add(new OleDbParameter(":DOCUMENT_KEY", Convert.ToDecimal(nID)));
                // видим что это не ключ, а просто генератор, что, конечно, не есть супер - но пока пусть так будет
                cmdDatum.Parameters.Add(new OleDbParameter(":EXTERNAL_KEY", Convert.ToDecimal(newID)));
                cmdDatum.Parameters.Add(new OleDbParameter(":ACT_DATE", Convert.ToDateTime(dtActDate)));
                cmdDatum.Parameters.Add(new OleDbParameter(":ENTITY_NAME", txtEntityName));
                cmdDatum.ExecuteNonQuery();


                cmdExtTransport = new OleDbCommand();
                cmdExtTransport.Connection = con;
                cmdExtTransport.Transaction = tran;
                cmdExtTransport.CommandText = "insert into EXT_DATUM_MACHINE (ID, NAME, TYPE, MODEL, MADE_YEAR)";
                cmdExtTransport.CommandText += " VALUES (:ID , :NAME, :TYPE, :MODEL, :MADE_YEAR)";
                cmdExtTransport.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdExtTransport.Parameters.Add(new OleDbParameter(":NAME", cutEnd(txtName, 1000)));
                cmdExtTransport.Parameters.Add(new OleDbParameter(":TYPE", cutEnd(txtType, 2)));
                cmdExtTransport.Parameters.Add(new OleDbParameter(":MODEL", cutEnd(txtMODEL, 50)));
                cmdExtTransport.Parameters.Add(new OleDbParameter(":MADE_YEAR", iMadeYear));
                cmdExtTransport.ExecuteNonQuery();

                tran.Commit();
                con.Close();

                return newID;
            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }
            return -1;
        }

        public decimal InsertExtTransportGimsIntTable(OleDbConnection con, decimal nID, string txtEntityName, DataRow row, Logger_ufssprk_tools lLogger)
        {
            /*                
            MODEL	rrow["sud_model"]
            PRODUCER_NAME rrow["sud_model"]
            regno	rrow["sb_regn"]
            MADE_YEAR	rrow["sud_godvyp"]
            */

            OleDbCommand cmd, cmdDatum, cmdShip;
            OleDbTransaction tran = null;
            decimal newID = 0;
            string txtMarkName = "Маломерное судно";

            try
            {
                //string txtSud_model = Convert.ToString(row["sud_model"]).Trim();
                //string txtSb_regn = Convert.ToString(row["sb_regn"]).Trim();
                //string txtSud_godvyp = Convert.ToString(row["sud_godvyp"]).Trim();

                string txtCategory_code = Convert.ToString(row["category_code"]).Trim();
                string txtName = Convert.ToString(row["name"]).Trim();
                string txtReg_number = Convert.ToString(row["reg_number"]).Trim();
                string txtModel_name = Convert.ToString(row["model_name"]).Trim();
                string txtBrand_name = Convert.ToString(row["brand_name"]).Trim();
                string txtColor = Convert.ToString(row["color"]).Trim();
                string txtMade_year = Convert.ToString(row["made_year"]).Trim();
                string txtShipyard = Convert.ToString(row["shipyard"]).Trim();
                string txtMoorings = Convert.ToString(row["moorings"]).Trim();
                string txtHull_material = Convert.ToString(row["hull_material"]).Trim();
                decimal nMax_occupancy = Convert.ToDecimal(row["max_occupancy"]);
                // string txtClass_formula = Convert.ToString(row["class_formula"]).Trim(); // не заполняю, т.к. там битые значения оказались - не смог вставить в базу данных
                decimal nSlength = Convert.ToDecimal(row["slength"]);
                decimal nSide_height = Convert.ToDecimal(row["side_height"]);
                decimal nSail_square = Convert.ToDecimal(row["sail_square"]);
                string txtOwnership_date = Convert.ToString(row["ownership_date"]).Trim();
                string txtNavigation_permit_number = Convert.ToString(row["navigation_permit_number"]).Trim();
                string txtNavigation_permit_date = Convert.ToString(row["navigation_permit_date"]).Trim();
                string txtShare_text = Convert.ToString(row["share_text"]).Trim();
                decimal nShareValue;
                if(!Decimal.TryParse(txtShare_text, out nShareValue)) nShareValue = 100;
                decimal nDenominator = 100;

                string txtRegister_date = Convert.ToString(row["register_date"]).Trim();
                string txtUnregister_date = Convert.ToString(row["unregister_date"]).Trim(); // это дата снятия с учета
                string txtEngines = Convert.ToString(row["engines"]).Trim();
                string txtHijacking_date = Convert.ToString(row["hijacking_date"]).Trim();
                string txtHijacking_end_date = Convert.ToString(row["hijacking_end_date"]).Trim();
                string txtEngine_type = Convert.ToString(row["engine_type"]).Trim();
                //string txtAct_date = Convert.ToString(row["act_date"]).Trim();
                string txtInn = Convert.ToString(row["inn"]).Trim();
     
                // string txtName = Convert.ToString(row["name"]).Trim();
                //decimal nSide_height = Convert.ToDecimal(row["side_height"]);

                string txtActDate = "01.01.1900";
                if (row.Table.Columns.Contains("act_date"))
                    txtActDate = Convert.ToString(row["act_date"]).Trim();

                if ((con == null) || (con.State.Equals(ConnectionState.Closed)))
                {
                    con.Open();
                }


                int iMadeYear = 0;
                if (!Int32.TryParse(txtMade_year, out iMadeYear))
                {
                    iMadeYear = 0;
                }

                DateTime dtActDate = DateTime.MinValue;
                if (!DateTime.TryParse(txtActDate, out dtActDate))
                {
                    dtActDate = DateTime.MinValue;
                }

                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // получить новый ключ - посмотреть генератор в EXT_INFORMATION gen_id(ext_information, 1)
                cmd = new OleDbCommand("SELECT gen_id(ext_information, 1) FROM RDB$DATABASE", con, tran);
                newID = Convert.ToDecimal(cmd.ExecuteScalar());


                cmdDatum = new OleDbCommand();
                cmdDatum.Connection = con;
                cmdDatum.Transaction = tran;
                cmdDatum.CommandText = "INSERT INTO EXT_INFORMATION (ID, PROCEED, DOCUMENT_KEY, EXTERNAL_KEY, ACT_DATE, ENTITY_NAME)";
                cmdDatum.CommandText += "  VALUES (:ID, 0, :DOCUMENT_KEY, :EXTERNAL_KEY, :ACT_DATE, :ENTITY_NAME)";

                cmdDatum.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdDatum.Parameters.Add(new OleDbParameter(":DOCUMENT_KEY", Convert.ToDecimal(nID)));
                // видим что это не ключ, а просто генератор, что, конечно, не есть супер - но пока пусть так будет
                cmdDatum.Parameters.Add(new OleDbParameter(":EXTERNAL_KEY", Convert.ToDecimal(newID)));
                cmdDatum.Parameters.Add(new OleDbParameter(":ACT_DATE", Convert.ToDateTime(dtActDate)));
                cmdDatum.Parameters.Add(new OleDbParameter(":ENTITY_NAME", txtEntityName));
                cmdDatum.ExecuteNonQuery();


                cmdShip = new OleDbCommand();
                cmdShip.Connection = con;
                cmdShip.Transaction = tran;
                //cmdShip.CommandText = "insert into EXT_DATUM_SHIP (ID, CATEGORY_CODE, REG_NUMBER, MODEL_NAME, REGISTER_DATE, SHARE_VALUE, DENOMINATOR, ENGINES, ENGINE_TYPE) "; //,
                cmdShip.CommandText = "insert into EXT_DATUM_SHIP (ID, CATEGORY_CODE, REG_NUMBER, MODEL_NAME, REGISTER_DATE, SHARE_VALUE, DENOMINATOR, ENGINES, ENGINE_TYPE, NAME, BRAND_NAME, COLOR, MADE_YEAR, SHIPYARD, HULL_MATERIAL, MAX_OCCUPANCY, MOORINGS, \"LENGTH\", SIDE_HEIGHT, SAIL_SQUARE, OWNERSHIP_DATE, NAVIGATION_PERMIT_NUMBER, NAVIGATION_PERMIT_DATE, UNREGISTER_DATE, SHARE_TEXT, HIJACKING_DATE, HIJACKING_END_DATE) ";
                //NAME, BRAND_NAME, COLOR, MADE_YEAR, SHIPYARD, HULL_MATERIAL, MAX_OCCUPANCY, MOORINGS, \"LENGTH\", SIDE_HEIGHT, SAIL_SQUARE, OWNERSHIP_DATE, NAVIGATION_PERMIT_NUMBER, NAVIGATION_PERMIT_DATE, UNREGISTER_DATE, SHARE_TEXT, HIJACKING_DATE, HIJACKING_END_DATE)";

                cmdShip.CommandText += " VALUES (:ID, :CATEGORY_CODE, :REG_NUMBER, :MODEL_NAME, :REGISTER_DATE, :SHARE_VALUE, :DENOMINATOR, :ENGINES, :ENGINE_TYPE, :NAME, :BRAND_NAME, :COLOR, :MADE_YEAR, :SHIPYARD, :HULL_MATERIAL, :MAX_OCCUPANCY, :MOORINGS, :SLENGTH, :SIDE_HEIGHT, :SAIL_SQUARE, :OWNERSHIP_DATE, :NAVIGATION_PERMIT_NUMBER, :NAVIGATION_PERMIT_DATE, :UNREGISTER_DATE, :SHARE_TEXT, :HIJACKING_DATE, :HIJACKING_END_DATE)";
                cmdShip.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdShip.Parameters.Add(new OleDbParameter(":CATEGORY_CODE", cutEnd(txtCategory_code, 50)));
                cmdShip.Parameters.Add(new OleDbParameter(":REG_NUMBER", cutEnd(txtReg_number, 20)));
                cmdShip.Parameters.Add(new OleDbParameter(":MODEL_NAME", cutEnd(txtModel_name, 50)));
                
                DateTime dtRegisterDate = DateTime.MinValue;
                if(!DateTime.TryParse(txtRegister_date, out dtRegisterDate)) dtRegisterDate = DateTime.MinValue;

                cmdShip.Parameters.Add(new OleDbParameter(":REGISTER_DATE", dtRegisterDate));
                cmdShip.Parameters.Add(new OleDbParameter(":SHARE_VALUE", nShareValue));
                cmdShip.Parameters.Add(new OleDbParameter(":DENOMINATOR", nDenominator));
                cmdShip.Parameters.Add(new OleDbParameter(":ENGINES", cutEnd(txtEngines, 50)));
                cmdShip.Parameters.Add(new OleDbParameter(":ENGINE_TYPE", cutEnd(txtEngine_type, 80)));

                cmdShip.Parameters.Add(new OleDbParameter(":NAME", cutEnd(txtName, 80)));
                cmdShip.Parameters.Add(new OleDbParameter(":BRAND_NAME", cutEnd(txtBrand_name, 50)));
                cmdShip.Parameters.Add(new OleDbParameter(":COLOR", cutEnd(txtColor, 50)));
                if(iMadeYear > 9999) iMadeYear = 0;
                cmdShip.Parameters.Add(new OleDbParameter(":MADE_YEAR", iMadeYear));
                cmdShip.Parameters.Add(new OleDbParameter(":SHIPYARD", cutEnd(txtShipyard, 50)));
                cmdShip.Parameters.Add(new OleDbParameter(":HULL_MATERIAL", cutEnd(txtHull_material, 20)));
                if(nMax_occupancy > 9999) nMax_occupancy = 0;
                cmdShip.Parameters.Add(new OleDbParameter(":MAX_OCCUPANCY", Convert.ToInt32(nMax_occupancy)));
                cmdShip.Parameters.Add(new OleDbParameter(":MOORINGS", cutEnd(txtMoorings, 80)));
                cmdShip.Parameters.Add(new OleDbParameter(":SLENGTH", nSlength));
                cmdShip.Parameters.Add(new OleDbParameter(":SIDE_HEIGHT", nSide_height));
                cmdShip.Parameters.Add(new OleDbParameter(":SAIL_SQUARE", nSail_square));
                DateTime dtOwnershipDate = DateTime.MinValue;
                if(!DateTime.TryParse(txtOwnership_date, out dtOwnershipDate)) {
                    dtOwnershipDate = DateTime.MinValue;
                    cmdShip.Parameters.Add(new OleDbParameter(":OWNERSHIP_DATE", System.DBNull.Value));
                }
                else cmdShip.Parameters.Add(new OleDbParameter(":OWNERSHIP_DATE", dtOwnershipDate));

                cmdShip.Parameters.Add(new OleDbParameter(":NAVIGATION_PERMIT_NUMBER", cutEnd(txtNavigation_permit_number, 20)));
                
                DateTime dtNavPerDate = DateTime.MinValue;
                if(!DateTime.TryParse(txtNavigation_permit_date, out dtNavPerDate)) {
                    dtNavPerDate = DateTime.MinValue;
                    cmdShip.Parameters.Add(new OleDbParameter(":NAVIGATION_PERMIT_DATE", System.DBNull.Value));
                }
                else cmdShip.Parameters.Add(new OleDbParameter(":NAVIGATION_PERMIT_DATE", dtNavPerDate));

                DateTime dtUnregDate = DateTime.MinValue;
                if(!DateTime.TryParse(txtUnregister_date, out dtUnregDate)) {
                    dtUnregDate = DateTime.MinValue;
                    cmdShip.Parameters.Add(new OleDbParameter(":UNREGISTER_DATE", System.DBNull.Value));
                }
                else cmdShip.Parameters.Add(new OleDbParameter(":UNREGISTER_DATE", dtUnregDate));

                cmdShip.Parameters.Add(new OleDbParameter(":SHARE_TEXT", cutEnd(txtShare_text, 80)));

                DateTime dtHijDate = DateTime.MinValue;
                if(!DateTime.TryParse(txtHijacking_date, out dtHijDate)) {
                    dtHijDate = DateTime.MinValue;
                    cmdShip.Parameters.Add(new OleDbParameter(":HIJACKING_DATE", System.DBNull.Value));
                }
                else cmdShip.Parameters.Add(new OleDbParameter(":HIJACKING_DATE", dtHijDate));

                DateTime dtHijEDate = DateTime.MinValue;
                if(!DateTime.TryParse(txtHijacking_end_date, out dtHijEDate)) {
                    dtHijEDate = DateTime.MinValue;
                    cmdShip.Parameters.Add(new OleDbParameter(":HIJACKING_END_DATE", System.DBNull.Value));
                }
                else cmdShip.Parameters.Add(new OleDbParameter(":HIJACKING_END_DATE", dtHijEDate));

                cmdShip.ExecuteNonQuery();

          
                tran.Commit();
                con.Close();
                
                return newID;
            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }
            return -1;
        }

        // на самом деле так делать не нужно - т.к. вставлять нужно в EXT_DATUM_SHIP
        //public decimal InsertExtTransportGimsIntTable(OleDbConnection con, decimal nID, string txtEntityName, DataRow row, Logger_ufssprk_tools lLogger)
        //{
        //    /*                
        //    MODEL	rrow["sud_model"]
        //    PRODUCER_NAME rrow["sud_model"]
        //    regno	rrow["sb_regn"]
        //    MADE_YEAR	rrow["sud_godvyp"]
        //    */

        //    OleDbCommand cmd, cmdDatum, cmdExtTransport;
        //    OleDbTransaction tran = null;
        //    decimal newID = 0;
        //    string txtMarkName = "Маломерное судно";

        //    try
        //    {
        //        string txtSud_model = Convert.ToString(row["sud_model"]).Trim();
        //        string txtSb_regn = Convert.ToString(row["sb_regn"]).Trim();
        //        string txtSud_godvyp = Convert.ToString(row["sud_godvyp"]).Trim();
                
        //        string txtActDate = "01.01.1900";
        //        if(row.Table.Columns.Contains("act_date"))
        //            txtActDate = Convert.ToString(row["act_date"]).Trim();
                

        //        if ((con == null) || (con.State.Equals(ConnectionState.Closed)))
        //        {
        //            con.Open();
        //        }


        //        int iMadeYear = 0;
        //        if (!Int32.TryParse(txtSud_godvyp, out iMadeYear))
        //        {
        //            iMadeYear = 0;
        //        }

        //        DateTime dtActDate = DateTime.MinValue;
        //        if (!DateTime.TryParse(txtActDate, out dtActDate))
        //        {
        //            dtActDate = DateTime.MinValue;
        //        }

        //        tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

        //        // получить новый ключ - посмотреть генератор в EXT_INFORMATION gen_id(ext_information, 1)
        //        cmd = new OleDbCommand("SELECT gen_id(ext_information, 1) FROM RDB$DATABASE", con, tran);
        //        newID = Convert.ToDecimal(cmd.ExecuteScalar());


        //        cmdDatum = new OleDbCommand();
        //        cmdDatum.Connection = con;
        //        cmdDatum.Transaction = tran;
        //        cmdDatum.CommandText = "INSERT INTO EXT_INFORMATION (ID, PROCEED, DOCUMENT_KEY, EXTERNAL_KEY, ACT_DATE, ENTITY_NAME)";
        //        cmdDatum.CommandText += "  VALUES (:ID, 0, :DOCUMENT_KEY, :EXTERNAL_KEY, :ACT_DATE, :ENTITY_NAME)";

        //        cmdDatum.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
        //        cmdDatum.Parameters.Add(new OleDbParameter(":DOCUMENT_KEY", Convert.ToDecimal(nID)));
        //        // видим что это не ключ, а просто генератор, что, конечно, не есть супер - но пока пусть так будет
        //        cmdDatum.Parameters.Add(new OleDbParameter(":EXTERNAL_KEY", Convert.ToDecimal(newID)));
        //        cmdDatum.Parameters.Add(new OleDbParameter(":ACT_DATE", Convert.ToDateTime(dtActDate)));
        //        cmdDatum.Parameters.Add(new OleDbParameter(":ENTITY_NAME", txtEntityName));
        //        cmdDatum.ExecuteNonQuery();


        //        cmdExtTransport = new OleDbCommand();
        //        cmdExtTransport.Connection = con;
        //        cmdExtTransport.Transaction = tran;
        //        cmdExtTransport.CommandText = "insert into EXT_TRANSPORT_DATA (ID, MODEL, PRODUCER_NAME, REG_NO, MADE_YEAR)";
        //        cmdExtTransport.CommandText += " VALUES (:ID , :MODEL, :PRODUCER_NAME, :REG_NO, :MADE_YEAR)";
        //        cmdExtTransport.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
        //        cmdExtTransport.Parameters.Add(new OleDbParameter(":MODEL", cutEnd(txtSud_model, 50)));
        //        cmdExtTransport.Parameters.Add(new OleDbParameter(":PRODUCER_NAME", cutEnd(txtMarkName, 50)));
        //        cmdExtTransport.Parameters.Add(new OleDbParameter(":REG_NO", cutEnd(txtSb_regn,20)));
        //        cmdExtTransport.Parameters.Add(new OleDbParameter(":MADE_YEAR", iMadeYear));
        //        cmdExtTransport.ExecuteNonQuery();

        //        tran.Commit();
        //        con.Close();

        //        return newID;
        //    }
        //    catch (OleDbException ole_ex)
        //    {
        //        if (tran != null)
        //        {
        //            tran.Rollback();
        //        }
        //        if (con != null)
        //        {
        //            con.Close();
        //        }
        //        foreach (OleDbError err in ole_ex.Errors)
        //        {
        //            lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
        //        if (con != null)
        //        {
        //            con.Close();
        //        }
        //    }
        //    return -1;
        //}

        public decimal InsertReportIntTable(OleDbConnection con, DataRow row, decimal nDX_PACK_ID, string txtAgentCode, string txtAgentDeptCode, string txtAgentAgreementCode, Logger_ufssprk_tools lLogger)
        {
            // что такое entt_id - похоже что это код ПФ из справочника Legal
            // вставить EXT_INPUT_HEADER < - > EXT_RESPONSE (связь один к одному)
            OleDbCommand cmd, cmdEXT_INPUT_HEADER, cmdEXT_REPORT;
            Decimal newID;
            OleDbTransaction tran = null;
            decimal res = 0;
            try
            {
                newID = 0;

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // получить новый ключ
                //cmd = new OleDbCommand("SELECT gen_id(seq_document, 1) FROM RDB$DATABASE", con, tran);
                //newID = Convert.ToDecimal(cmd.ExecuteScalar());

                // получить новый EXT ключ из ufssprk-tools
                decimal extID = lLogger.GenExtID();

                cmd = new OleDbCommand("SELECT gen_id(seq_ext_input_header, 1) FROM RDB$DATABASE", con, tran);
                newID = Convert.ToDecimal(cmd.ExecuteScalar());

                decimal nAct_id = Convert.ToDecimal(row["RESTRICTION_ID"]);// тут на самом деле restr.act_id
                // видимо при формировании row туда записали что-то другое сразу
                

                // вставить DOCUMENT
                cmdEXT_INPUT_HEADER = new OleDbCommand();
                cmdEXT_INPUT_HEADER.Connection = con;
                cmdEXT_INPUT_HEADER.Transaction = tran;
                cmdEXT_INPUT_HEADER.CommandText = "insert into EXT_INPUT_HEADER (ID, METAOBJECTNAME, PROCEED, PACK_NUMBER, EXTERNAL_KEY, AGENT_CODE, AGENT_DEPT_CODE, AGENT_AGREEMENT_CODE, DATE_IMPORT)";
                cmdEXT_INPUT_HEADER.CommandText += " VALUES (:ID ,'EXT_REPORT', 0, :PACK_NUMBER, :EXTERNAL_KEY, :AGENT_CODE, :AGENT_DEPT_CODE, :AGENT_AGREEMENT_CODE, :DATE_IMPORT)";
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":PACK_NUMBER", nDX_PACK_ID));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":EXTERNAL_KEY", Convert.ToString(extID))); // связь с постановлением ext_key = act_id
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_CODE", txtAgentCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_DEPT_CODE", txtAgentDeptCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":AGENT_AGREEMENT_CODE", txtAgentAgreementCode));
                cmdEXT_INPUT_HEADER.Parameters.Add(new OleDbParameter(":DATE_IMPORT", DateTime.Today));

                if (cmdEXT_INPUT_HEADER.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to EXT_INPUT_HEADER table act_id = " + nAct_id.ToString());
                    throw ex;
                }

                // к txtMessage нужно добавить # счета, на который пришла квитанция



                // вставить EXT_REPORT
                cmdEXT_REPORT = new OleDbCommand();
                cmdEXT_REPORT.Connection = con;
                cmdEXT_REPORT.Transaction = tran;
                cmdEXT_REPORT.CommandText = "INSERT INTO EXT_REPORT (ID, IP_INTERNAL_KEY, RESTRICTN_INTERNAL_KEY, DOC_DATE, RESTRICTION_ANSWER_TYPE, DESCRIPTION, LEGAL_IMPOSSIBILITY, INSIDE_INFORMATION)";
                cmdEXT_REPORT.CommandText += "  VALUES (:ID, :IP_INTERNAL_KEY, :RESTRICTN_INTERNAL_KEY, :DOC_DATE, :RESTRICTION_ANSWER_TYPE, :DESCRIPTION, :LEGAL_IMPOSSIBILITY, :INSIDE_INFORMATION)";
                cmdEXT_REPORT.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdEXT_REPORT.Parameters.Add(new OleDbParameter(":IP_INTERNAL_KEY", Convert.ToDecimal(row["IP_ID"])));
                cmdEXT_REPORT.Parameters.Add(new OleDbParameter(":RESTRICTN_INTERNAL_KEY", Convert.ToDecimal(row["RESTRICTION_ID"])));
                cmdEXT_REPORT.Parameters.Add(new OleDbParameter(":DOC_DATE", Convert.ToDateTime(row["DOC_DATE"])));

                // пишу без кода, чтобы не портить постановления отказами
                // в связи с тем, что много отказов и если в постановлении счета 2 раза указываются, то приходит отказ
                // временно убираю загрузку отказов совсем!
                // ЛТП 1 № 16021

                //cmdEXT_REPORT.Parameters.Add(new OleDbParameter(":RESTRICTION_ANSWER_TYPE", DBNull.Value));

                //20151003 - т.к. начинаю тест загрузки отчетов с привязкой к постановлениям, то 3, 4 - исполнено и исполнено частично гружу
                string txtAnswType = Convert.ToString(row["ANSWER_TYPE"]).Trim();
                if((txtAnswType.Length > 0) && (txtAnswType.Equals("3")||txtAnswType.Equals("4")))
                {
                    cmdEXT_REPORT.Parameters.Add(new OleDbParameter(":RESTRICTION_ANSWER_TYPE", txtAnswType));
                }
                else{
                    cmdEXT_REPORT.Parameters.Add(new OleDbParameter(":RESTRICTION_ANSWER_TYPE", DBNull.Value));
                }


                //// ЛТП 2 № 146852 Вы некорректно осуществляете INSERT данных в <b>EXT_REPORT</b>.
                //// В вашем примере Вы в поле <b>RESTRICTION_ANSWER_TYPE</b> забиваете пустое значение экранированное апострофами, такой вариант подразумевает пустое значение и передается пустой символ ASCII, поэтому если значение для вставки отсутствует, поле забивается значением <b>NULL</b>.  
                //string txtAnswType = Convert.ToString(row["ANSWER_TYPE"]).Trim();
                //if(txtAnswType.Length > 0)
                //    cmdEXT_REPORT.Parameters.Add(new OleDbParameter(":RESTRICTION_ANSWER_TYPE", txtAnswType));
                //else
                //    cmdEXT_REPORT.Parameters.Add(new OleDbParameter(":RESTRICTION_ANSWER_TYPE", DBNull.Value));
                    

                cmdEXT_REPORT.Parameters.Add(new OleDbParameter(":DESCRIPTION", Convert.ToString(row["DESCRIPTION"] + " (л\\c = " + row["ACC"] + ")")));
                cmdEXT_REPORT.Parameters.Add(new OleDbParameter(":LEGAL_IMPOSSIBILITY", Convert.ToString(row["LEGAL_IMPOSSIBILITY"])));
                cmdEXT_REPORT.Parameters.Add(new OleDbParameter(":INSIDE_INFORMATION", Convert.ToString(row["INSIDE_INFORMATION"])));
                
                if (cmdEXT_REPORT.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to EXT_REPORT table act_id = " + nAct_id.ToString());
                    throw ex;
                }
                else
                {
                    res = newID;// если все удачно вставили - то вернуть newID 
                }

                tran.Commit();
                con.Close();

                return res;

            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }

            // проверить подключение - а то может статься что не закрыли
            if (con != null && con.State != ConnectionState.Closed) con.Close();

            return -1;
        }

        public String GetLegal_Conv(Decimal code, OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            String res = "нет значения в базе данных";
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("Select HEAD_POST from ENTITY WHERE ENTT_ID = " + Convert.ToString(code), con, tran);
                res = Convert.ToString(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return res;
        }

        public string GetLegal_Name(Decimal code, OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            string res = "нет значения в базе данных";
            try
            {
                if (con != null && con.State.Equals(ConnectionState.Closed)) con.Open();

                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("Select ENTT_FULL_NAME from ENTITY WHERE ENTT_ID = " + Convert.ToString(code), con, tran);
                res = Convert.ToString(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    // MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            return res;
        }

        public string GetLegal_Adr(Decimal code, OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            string res = "нет значения в базе данных";
            try
            {
                if (con != null && con.State.Equals(ConnectionState.Closed)) con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("Select ENTT_ADDRESS from ENTITY WHERE ENTT_ID = " + Convert.ToString(code), con, tran);
                res = Convert.ToString(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    // MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            return res;
        }

        // по ID ограничения получить старый номер ИП
        /* txtDocCode = 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY'*/
        // select first 1 o_ip.ipno from o_ip_act_endgaccount_money endgacc join o_ip o_ip on endgacc.gaccount_money_id = o_ip.id where endgacc.id = 86011123883466
        // select first 1 o_ip.ipno from o_ip_act_endarrest endarr join o_ip on o_ip.id = endarr.arrestact_id where endarr.id = 86011123832503
        public string GetOldRestictionNum(decimal nID, string txtDocCode, OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            String res = "";
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                // по-умолчанию O_IP_ACT_ENDGACCOUNT_MONEY
                OleDbCommand cmd = new OleDbCommand("select first 1 o_ip.ipno from o_ip_act_endgaccount_money endgacc join o_ip o_ip on endgacc.gaccount_money_id = o_ip.id where endgacc.id = " + nID.ToString(), con, tran);
                // если это отмена ареста
                if (txtDocCode == "O_IP_ACT_ENDARREST")
                {
                    cmd.CommandText = "select first 1 o_ip.ipno from o_ip_act_endarrest endarr join o_ip on o_ip.id = endarr.arrestact_id where endarr.id = " + nID.ToString();
                }

                res = Convert.ToString(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    //MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            return res;
        }
        

        public string GetRdNum(decimal nID, OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            String res = "";
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select d.doc_number from DOC_SEARCH_RD rd join document d on rd.id = d.id where rd.id = " + nID.ToString(), con, tran);
                res = Convert.ToString(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    //MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            return res;
        }


        public DataTable FindDul(OleDbConnection con, string txtFioD, DateTime dtBornD, string txtSnils, string txtInn, string txtAdr, Logger_ufssprk_tools lLogger)
        {
            String res = "";
            DataSet ds = new DataSet();
            DataTable tbl = ds.Tables.Add("VU");
            
            // если нет СНИЛС, ИНН, Адреса - то паспорт не ищем, т.к. легко ошибиться
            if (txtAdr.Length + txtInn.Length + txtSnils.Length == 0) return tbl; 

            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // AND (DOC_IP_DOC.ID_DBTR_SNILS = '" + txtSnils + "' or DOC_IP_DOC.ID_DBTR_INN = '" + txtInn + "' or DOC_IP_DOC.ID_DBTR_ADR = '" + txtAdr + "' /*or ID_DBTR_BORNADR = '' */)
                string txtSnilsInnAdrFilter = "";
                
                txtSnilsInnAdrFilter += " and (";
                bool bNeedOr = false;

                if (txtSnils.Length > 0)
                {
                    txtSnilsInnAdrFilter += "DOC_IP_DOC.ID_DBTR_SNILS = '" + txtSnils + "'";
                    bNeedOr = true;
                }

                if (txtInn.Length > 0)
                {
                    if (bNeedOr) txtSnilsInnAdrFilter += " or ";
                    txtSnilsInnAdrFilter += "DOC_IP_DOC.ID_DBTR_INN = '" + txtInn + "'";
                }

                if (txtAdr.Length > 0)
                {
                    if (bNeedOr) txtSnilsInnAdrFilter += " or ";
                    txtSnilsInnAdrFilter += "DOC_IP_DOC.ID_DBTR_ADR = '" + txtAdr + "'";
                }

                txtSnilsInnAdrFilter += ")";

                
                // select first 1  DOC_IP_DOC.ID_DBTR_NAME, DOC_IP_DOC.ID_DBTR_ID_SERIAL, DOC_IP_DOC.ID_DBTR_ID_NUMBER, DOC_IP_DOC.ID_DBTR_ID_DATE, DOC_IP_DOC.ID_DBTR_ID_OFFICE, DOC_IP_DOC.ID_DBTR_ID_CODE_DEP FROM DOC_IP_DOC DOC_IP_DOC JOIN DOC_IP ON DOC_IP_DOC.ID=DOC_IP.ID JOIN DOCUMENT ON DOC_IP.ID=DOCUMENT.ID where (DOCUMENT.DOCSTATUSID = 9  or (DOCUMENT.DOCSTATUSID = 10 and dateadd(year, -2, current_date) < DOC_IP.IP_DATE_FINISH)) and ID_DBTR_ID_SERIAL is not null and ID_DBTR_ID_NUMBER is not null and ID_DBTR_ID_DATE is not null and DOC_IP_DOC.ID_DBTR_NAME = '" + txtFioD + "' and DOC_IP_DOC.ID_DBTR_BORN = '" + dtBornD.ToShortDateString() + "' AND DOC_IP_DOC.TWIN_PERSON = 0 and CHAR_LENGTH(DOC_IP_DOC.ID_DBTR_ID_NUMBER) = 6 and CHAR_LENGTH(DOC_IP_DOC.ID_DBTR_ID_SERIAL) = 4


                OleDbCommand cmd = new OleDbCommand("select first 1  DOC_IP_DOC.ID_DBTR_NAME, DOC_IP_DOC.ID_DBTR_ID_SERIAL, DOC_IP_DOC.ID_DBTR_ID_NUMBER, DOC_IP_DOC.ID_DBTR_ID_DATE, DOC_IP_DOC.ID_DBTR_ID_OFFICE, DOC_IP_DOC.ID_DBTR_ID_CODE_DEP FROM DOC_IP_DOC DOC_IP_DOC JOIN DOC_IP ON DOC_IP_DOC.ID=DOC_IP.ID JOIN DOCUMENT ON DOC_IP.ID=DOCUMENT.ID where (DOCUMENT.DOCSTATUSID = 9  or (DOCUMENT.DOCSTATUSID in (10, 12) and dateadd(year, -2, current_date) < DOC_IP.IP_DATE_FINISH)) and ID_DBTR_ID_SERIAL is not null and ID_DBTR_ID_NUMBER is not null and ID_DBTR_ID_DATE is not null and DOC_IP_DOC.ID_DBTR_NAME = '" + txtFioD + "' and DOC_IP_DOC.ID_DBTR_BORN = '" + dtBornD.ToShortDateString() + "' AND DOC_IP_DOC.TWIN_PERSON = 0 and CHAR_LENGTH(DOC_IP_DOC.ID_DBTR_ID_NUMBER) = 6 and CHAR_LENGTH(DOC_IP_DOC.ID_DBTR_ID_SERIAL) = 4 " + txtSnilsInnAdrFilter + " order by  ID_DBTR_ID_DATE desc, DOC_IP.IP_RISEDATE desc ", con, tran);
                //OleDbCommand cmd = new OleDbCommand("select first 1  DOC_IP_DOC.ID_DBTR_NAME, DOC_IP_DOC.ID_DBTR_ID_SERIAL, DOC_IP_DOC.ID_DBTR_ID_NUMBER, DOC_IP_DOC.ID_DBTR_ID_DATE, DOC_IP_DOC.ID_DBTR_ID_OFFICE, DOC_IP_DOC.ID_DBTR_ID_CODE_DEP FROM DOC_IP_DOC DOC_IP_DOC JOIN DOC_IP ON DOC_IP_DOC.ID=DOC_IP.ID JOIN DOCUMENT ON DOC_IP.ID=DOCUMENT.ID where DOCUMENT.DOCSTATUSID = 9 and ID_DBTR_ID_SERIAL is not null and ID_DBTR_ID_NUMBER is not null and ID_DBTR_ID_DATE is not null and DOC_IP_DOC.ID_DBTR_NAME = '" + txtFioD + "' and DOC_IP_DOC.ID_DBTR_BORN = '" + dtBornD.ToShortDateString() + "' AND DOC_IP_DOC.TWIN_PERSON = 0 and CHAR_LENGTH(DOC_IP_DOC.ID_DBTR_ID_NUMBER) = 6 and CHAR_LENGTH(DOC_IP_DOC.ID_DBTR_ID_SERIAL) = 4 " + txtSnilsInnAdrFilter + " order by  ID_DBTR_ID_DATE desc, DOC_IP.IP_RISEDATE desc ", con, tran);
                //OleDbCommand cmd = new OleDbCommand("select FIO_D, BORN_D, VU_NUMBER, OUT_D, END_D from " + txtDB_Name + " where FIO_D = '" + txtFioD.ToUpper() + " ' and BORN_D = '" + dtBornD.ToShortDateString() + "'", con, tran);

                using (OleDbDataReader rdr = cmd.ExecuteReader(CommandBehavior.Default))
                {
                    ds.Load(rdr, LoadOption.OverwriteChanges, tbl);
                    rdr.Close();
                }
                tran.Commit();
                con.Close();

                if (tbl != null && tbl.Rows.Count > 0)
                {
                    res = "Есть сведения";
                }
                else res = "Нет данных";

            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    //MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            // return res;
            return tbl;
        }

        // - по ФИО + дата рождения FIO_D, BORN_D
        // получить ответ - есть ли ВУ
        // ответ - строка текста
        // в ответе могут быть сведения о нескольких ВУ
        public string FindVU(OleDbConnection con, string txtDB_Name, string txtFioD, DateTime dtBornD, Logger_ufssprk_tools lLogger)
        {
            String res = "";
            DataSet ds = new DataSet();
            DataTable tbl = ds.Tables.Add("VU");
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select FIO_D, BORN_D, VU_NUMBER, OUT_D, END_D from " + txtDB_Name + " where FIO_D = '" + txtFioD.ToUpper() + " ' and BORN_D = '" + dtBornD.ToShortDateString() + "'", con, tran);
                
                using (OleDbDataReader rdr = cmd.ExecuteReader(CommandBehavior.Default))
                {
                    ds.Load(rdr, LoadOption.OverwriteChanges, tbl);
                    rdr.Close();
                }
                tran.Commit();
                con.Close();

                if (tbl != null && tbl.Rows.Count > 0)
                {
                    res += "Получены сведения о наличии у должника " + txtFioD + " (" + dtBornD.ToShortDateString() + " г.р.) водительских удостоверений.\r\n";
                    if(tbl.Rows.Count > 1) res += "Всего удостоверений: " + tbl.Rows.Count.ToString() + "\r\n";
                    foreach (DataRow row in tbl.Rows)
                    {
                        res += "Номер ВУ: " + Convert.ToString(row["VU_NUMBER"]).Trim() + "\r\n";
                        DateTime dtStart = DateTime.MinValue;
                        string txtStart = "";
                        res += "Дата выдачи ВУ: ";
                        if(!row["OUT_D"].Equals(DBNull.Value)){
                            txtStart = Convert.ToString(row["OUT_D"]);
                            if(DateTime.TryParse(txtStart, out dtStart))
                                res += dtStart.ToShortDateString() + "\r\n";
                            else res += "сведения отсутствуют\r\n";
                        }
                        else res += "сведения отсутствуют\r\n";

                        DateTime dtEnd = DateTime.MinValue;
                        string txtEnd = "";
                        res += "Дата окончания срока действия ВУ: ";
                        if (!row["END_D"].Equals(DBNull.Value))
                        {
                            txtEnd = Convert.ToString(row["END_D"]);
                            if (DateTime.TryParse(txtEnd, out dtEnd))
                                res += dtEnd.ToShortDateString() + "\r\n";
                            else res += "сведения отсутствуют\r\n";
                        }
                        else res += "сведения отсутствуют\r\n";

                        if (tbl.Rows.Count > 1) res += "\r\n"; // перевод строки чтобы разделить записи если их больше 1
                    }
                }
                else res = "Нет данных";

            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    //MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            return res;
        }

        public DataTable FindGimsLodkaFlDt(OleDbConnection con, string txtFioD, DateTime dtBornD, Logger_ufssprk_tools lLogger)
        {
            DataTable res = null;
            DataSet ds = new DataSet();
            DataTable tbl = ds.Tables.Add("VU");
            try
            {
                /*
                File_funcs ff = new File_funcs();
                string[] Names;
                string txtErrMessage = "";
                Names = ff.parseFIO(txtFioD, out txtErrMessage);
                if (txtErrMessage.Length > 0) lLogger.ErrMessage += txtErrMessage;
                */

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                // OleDbCommand cmd = new OleDbCommand("select ID, REGNUM, TITLE, CLASS, M_YEAR, REG_DATE, CHECK_DATE, OWNER, OWNER_DR, OWNER_ADDR, INN from RTN where TRIM(UPPER(OWNER)) = '" + txtFioD.ToUpper() + "' and OWNER_DR = '" + dtBornD.ToShortDateString() + "'", con, tran);
                // OleDbCommand cmd = new OleDbCommand("select id, owner_name, fl_dr, fl_mrab, sud_model, sb_regn, sud_godvyp, sb_datavyd, reg_datasnsuchet, act_date, inn from gims_rk where TRIM(UPPER(owner_name)) = '" + txtFioD.ToUpper() + "' and TRIM(fl_dr) = '" + dtBornD.ToShortDateString() + "'", con, tran);
                OleDbCommand cmd = new OleDbCommand("select distinct * from gims_rk3 where TRIM(UPPER(owner_name)) = '" + txtFioD.ToUpper() + "' and TRIM(fl_dr) = '" + dtBornD.ToShortDateString() + "'", con, tran);
                
                // будем ли что-то делать для тех записей - где не заполнены дата рождения или неполные имя,отчество?
                // пока думаю что нет - пусть руками ищут по веб-интерфейсу


                using (OleDbDataReader rdr = cmd.ExecuteReader(CommandBehavior.Default))
                {
                    ds.Load(rdr, LoadOption.OverwriteChanges, tbl);
                    rdr.Close();
                    res = tbl;
                }
                tran.Commit();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    //MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            return res;
        }


        public DataTable FindRtnFlDt(OleDbConnection con, string txtFioD, DateTime dtBornD, Logger_ufssprk_tools lLogger)
        {
            DataTable res = null;
            DataSet ds = new DataSet();
            DataTable tbl = ds.Tables.Add("VU");
            try
            {
                /*
                File_funcs ff = new File_funcs();
                string[] Names;
                string txtErrMessage = "";
                Names = ff.parseFIO(txtFioD, out txtErrMessage);
                if (txtErrMessage.Length > 0) lLogger.ErrMessage += txtErrMessage;
                */

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select ID, REGNUM, TITLE, CLASS, M_YEAR, REG_DATE, CHECK_DATE, OWNER, OWNER_DR, OWNER_ADDR, INN, ACT_DATE from RTN where TRIM(UPPER(OWNER)) = '" + txtFioD.ToUpper() + "' and OWNER_DR = '" + dtBornD.ToShortDateString() + "'", con, tran);
                // будем ли что-то делать для тех записей - где не заполнены дата рождения или неполные имя,отчество?
                // пока думаю что нет - пусть руками ищут по веб-интерфейсу


                using (OleDbDataReader rdr = cmd.ExecuteReader(CommandBehavior.Default))
                {
                    ds.Load(rdr, LoadOption.OverwriteChanges, tbl);
                    rdr.Close();
                    res = tbl;
                }
                tran.Commit();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    //MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            return res;
        }

        public DataTable FindGimsLodkaUlDt(OleDbConnection con, string txtFioD, string txtInn, Logger_ufssprk_tools lLogger)
        {
            DataTable res = null;
            DataSet ds = new DataSet();
            DataTable tbl = ds.Tables.Add("VU");
            try
            {
                /*
                File_funcs ff = new File_funcs();
                string[] Names;
                string txtErrMessage = "";
                Names = ff.parseFIO(txtFioD, out txtErrMessage);
                if (txtErrMessage.Length > 0) lLogger.ErrMessage += txtErrMessage;
                */

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                // OleDbCommand cmd = new OleDbCommand("select ID, REGNUM, TITLE, CLASS, M_YEAR, REG_DATE, CHECK_DATE, OWNER, OWNER_DR, OWNER_ADDR, INN from RTN where TRIM(INN) = '" + txtInn + "'", con, tran);
                //OleDbCommand cmd = new OleDbCommand("select id, owner_name, fl_dr, fl_mrab, sud_model, sb_regn, sud_godvyp, sb_datavyd, reg_datasnsuchet, act_date, inn from gims_rk where TRIM(INN) = '" + txtInn + "'", con, tran);
                OleDbCommand cmd = new OleDbCommand("select distinct * from gims_rk3 where TRIM(INN) = '" + txtInn + "'", con, tran);
                // будем ли что-то делать для тех записей - где не заполнены дата рождения или неполные имя,отчество?
                // пока думаю что нет - пусть руками ищут по веб-интерфейсу


                using (OleDbDataReader rdr = cmd.ExecuteReader(CommandBehavior.Default))
                {
                    ds.Load(rdr, LoadOption.OverwriteChanges, tbl);
                    rdr.Close();
                    res = tbl;
                }
                tran.Commit();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    //MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            return res;
        }

        public DataTable FindRtnUlDt(OleDbConnection con, string txtFioD, string txtInn, Logger_ufssprk_tools lLogger)
        {
            DataTable res = null;
            DataSet ds = new DataSet();
            DataTable tbl = ds.Tables.Add("VU");
            try
            {
                /*
                File_funcs ff = new File_funcs();
                string[] Names;
                string txtErrMessage = "";
                Names = ff.parseFIO(txtFioD, out txtErrMessage);
                if (txtErrMessage.Length > 0) lLogger.ErrMessage += txtErrMessage;
                */

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select ID, REGNUM, TITLE, CLASS, M_YEAR, REG_DATE, CHECK_DATE, OWNER, OWNER_DR, OWNER_ADDR, INN, ACT_DATE from RTN where TRIM(INN) = '" + txtInn + "'", con, tran);
                // будем ли что-то делать для тех записей - где не заполнены дата рождения или неполные имя,отчество?
                // пока думаю что нет - пусть руками ищут по веб-интерфейсу


                using (OleDbDataReader rdr = cmd.ExecuteReader(CommandBehavior.Default))
                {
                    ds.Load(rdr, LoadOption.OverwriteChanges, tbl);
                    rdr.Close();
                    res = tbl;
                }
                tran.Commit();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    //MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            return res;
        }



        public DataTable FindGimsVUdt(OleDbConnection con, string txtDB_Name, string txtFioD, DateTime dtBornD, Logger_ufssprk_tools lLogger)
        {
            DataTable res = null;
            DataSet ds = new DataSet();
            DataTable tbl = ds.Tables.Add("VU");
            try
            {
                /*
                File_funcs ff = new File_funcs();
                string[] Names;
                string txtErrMessage = "";
                Names = ff.parseFIO(txtFioD, out txtErrMessage);
                if (txtErrMessage.Length > 0) lLogger.ErrMessage += txtErrMessage;
                */

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select FIO_D, BORN_D, VU_NUMBER, OUT_D, DATE_VH from " + txtDB_Name + " where FL_USE = 100 and FIO_D = '" + txtFioD.ToUpper() + "' and BORN_D = '" + dtBornD.ToShortDateString() + "'", con, tran);
                // будем ли что-то делать для тех записей - где не заполнены дата рождения или неполные имя,отчество?
                // пока думаю что нет - пусть руками ищут по веб-интерфейсу


                using (OleDbDataReader rdr = cmd.ExecuteReader(CommandBehavior.Default))
                {
                    ds.Load(rdr, LoadOption.OverwriteChanges, tbl);
                    rdr.Close();
                    res = tbl;
                }
                tran.Commit();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    //MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            return res;
        }

        public DataTable FindVUdt(OleDbConnection con, string txtDB_Name, string txtFioD, DateTime dtBornD, Logger_ufssprk_tools lLogger)
        {
            DataTable res = null;
            DataSet ds = new DataSet();
            DataTable tbl = ds.Tables.Add("VU");
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select distinct FIO_D, BORN_D, VU_NUMBER, OUT_D, END_D, DATE_VH from " + txtDB_Name + " where FL_USE = 0 and FIO_D = '" + txtFioD.ToUpper() + "' and BORN_D = '" + dtBornD.ToShortDateString() + "'", con, tran);

                using (OleDbDataReader rdr = cmd.ExecuteReader(CommandBehavior.Default))
                {
                    ds.Load(rdr, LoadOption.OverwriteChanges, tbl);
                    rdr.Close();
                    res = tbl;
                }
                tran.Commit();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    //MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            return res;
        }

        public DataTable GetDataTableFromFB(OleDbConnection con, string txtSql, string tblName, Logger_ufssprk_tools lLogger)
        {
            DataSet ds = new DataSet();
            DataTable tbl = ds.Tables.Add(tblName);
            try
            {
                // проверить подключение - а то может статься что не закрыли
                if (con != null && con.State != ConnectionState.Closed) con.Close();

                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.RepeatableRead);
                OleDbCommand cmd = new OleDbCommand(txtSql, con, tran);

                using (OleDbDataReader rdr = cmd.ExecuteReader(CommandBehavior.Default))
                {
                    ds.Load(rdr, LoadOption.OverwriteChanges, tbl);
                    rdr.Close();
                }

                tran.Rollback();
                con.Close();

            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    //MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            return tbl;
        }

        public OspOptions GetOspOptions(OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            // получить параметры ОСП и заполнить ими структуру
            DataTable dtOsp_Params = null;

            dtOsp_Params = GetDataTableFromFB(con, "select osp.department as ospnum, osp.div_recv_name, osp.div_fullname, osp.div_name as div_name, osp.div_adr, osp.div_recv_bankname as bank, osp.div_recv_kpp as kpp, osp.div_recv_bik as bik, osp.ls, osp.div_recv_cnt as rs, osp.div_recv_inn as inn  from system_site left join osp on osp.osp_system_site_id = system_site.system_site_id", "osp_params", lLogger);

            OspOptions paramOsp = new OspOptions();
            if ((dtOsp_Params != null) && (dtOsp_Params.Rows.Count > 0))
            {
                paramOsp.Bank = Convert.ToString(dtOsp_Params.Rows[0]["bank"]).Trim();

                // Отдел судебных приставов по работе с физическими лицами № 2 г. Петрозаводска УФССП России по Р
                //paramOsp.Zajavitel = Convert.ToString(dtOsp_Params.Rows[0]["div_name"]).Trim();// заявитель = ОСП?

                // УФК по Республике Карелия(Отдел судебных приставов по работе с физическими лицами № 2 г.Петрозаводска УФССП России по Республике Карелия, л/с 05061А54030)
                paramOsp.Zajavitel = Convert.ToString(dtOsp_Params.Rows[0]["div_recv_name"]).Trim();// заявитель = ОСП?

                paramOsp.Z_adr = Convert.ToString(dtOsp_Params.Rows[0]["div_adr"]).Trim();
                paramOsp.Inn = Convert.ToString(dtOsp_Params.Rows[0]["inn"]).Trim();
                paramOsp.Kpp = Convert.ToString(dtOsp_Params.Rows[0]["kpp"]).Trim();
                paramOsp.Bik = Convert.ToString(dtOsp_Params.Rows[0]["bik"]).Trim();
                paramOsp.Ls = Convert.ToString(dtOsp_Params.Rows[0]["ls"]).Trim();
                paramOsp.Rs = Convert.ToString(dtOsp_Params.Rows[0]["rs"]).Trim();
                paramOsp.ShortOspName = Convert.ToString(dtOsp_Params.Rows[0]["div_fullname"]).Trim();// Краткое название заявителя

                // поле ShortOspName нужно модифицировать чтобы оно в 50 символов влезало
                // варианты как это сделать: заменить слова 'Отдел судебных приставов '  на 'ОСП '
                // 'по работе с физическими лицами ' на ' '
                // 'Управления Федеральной службы судебных приставов по Республике Карелия ' на ' ' 
                paramOsp.ShortOspName = paramOsp.ShortOspName.Replace("Отдел судебных приставов", "ОСП");
                paramOsp.ShortOspName = paramOsp.ShortOspName.Replace("Межрайонный отдел судебных приставов", "МОСП");
                paramOsp.ShortOspName = paramOsp.ShortOspName.Replace("по работе с физическими лицами", "");
                paramOsp.ShortOspName = paramOsp.ShortOspName.Replace("юридическими лицами", "ЮЛ");
                paramOsp.ShortOspName = paramOsp.ShortOspName.Replace("Управления Федеральной службы судебных приставов по Республике Карелия", "");
                paramOsp.ShortOspName = paramOsp.ShortOspName.Replace("  ", " "); // убрать двойные пробелы
                paramOsp.ShortOspName = paramOsp.ShortOspName.Replace("  ", " "); // убрать двойные пробелы

                paramOsp.ShortOspName = cutEnd(paramOsp.ShortOspName, 50); // обрезать до 50 символов

                // TODO: поработать с полем Заявитель paramOsp.Zajavitel 

            }

            return paramOsp;

        }

        public decimal InsertI_Qry_Answer(OleDbConnection con, decimal nId, Logger_ufssprk_tools lLogger, DateTime dtIdate, DateTime dtExtDocDate, string txtExtDocNum, decimal nContrID, decimal nStatus, string txtAnswerBody)
        {
            // получить сведения о РД по его ID

            // вставить DOCUMENT, I, I_RD, I_QRY_ANSWER
            OleDbCommand cmd, cmdInsDoc, cmdInsI, cmdI_RD, cmdI_QRY_ANSWER;
            Decimal newID;
            OleDbTransaction tran = null;
            decimal res = 0;
            decimal rdID = 0;
            string txtContrName = "";
            string txtContrAdr = "";
            string txtRdNum = "";

            decimal nSuserID = 8992;
            string txtSuserName = "System Administrator"; // временное рещение, тут РД инепонятно нужно ли искать в РД параметры СПИ по розыску.
            try
            {

                rdID = nId;
                txtRdNum = GetRdNum(rdID, con, lLogger);
                // нужно проверить что такое РД есть в базе
                if (txtRdNum.Length > 0)
                {
                    txtContrName = GetLegal_Name(nContrID, con, lLogger);
                    txtContrAdr = GetLegal_Adr(nContrID, con, lLogger);
                    OspOptions paramOsp = GetOspOptions(con, lLogger);
                    newID = 0;

                    if (con != null && con.State != ConnectionState.Closed) con.Close();
                    con.Open();
                    tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                    // получить новый ключ
                    cmd = new OleDbCommand("SELECT gen_id(seq_document, 1) FROM RDB$DATABASE", con, tran);
                    newID = Convert.ToDecimal(cmd.ExecuteScalar());

                    // вставить DOCUMENT
                    cmdInsDoc = new OleDbCommand();
                    cmdInsDoc.Connection = con;
                    cmdInsDoc.Transaction = tran;
                    cmdInsDoc.CommandText = "INSERT INTO DOCUMENT (DOCUMENTCLASSID, DOCSTATUSID, DOC_DATE, CREATE_DATE, ID, METAOBJECTNAME, SUSER_ID)";
                    cmdInsDoc.CommandText += " VALUES (:DOCUMENTCLASSID, :DOCSTATUSID, :DOC_DATE, :CREATE_DATE,  :ID ,'I_QRY_ANSWER', 8992)";
                    cmdInsDoc.Parameters.Add(new OleDbParameter(":DOCUMENTCLASSID", Convert.ToDecimal(11)));
                    cmdInsDoc.Parameters.Add(new OleDbParameter(":DOCSTATUSID", Convert.ToDecimal(nStatus)));
                    cmdInsDoc.Parameters.Add(new OleDbParameter(":DOC_DATE", DateTime.Today));
                    cmdInsDoc.Parameters.Add(new OleDbParameter(":CREATE_DATE", DateTime.Today));
                    cmdInsDoc.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));

                    if (cmdInsDoc.ExecuteNonQuery() == -1)
                    {
                        Exception ex = new Exception("Error inserting new row to document table rd_id = " + rdID.ToString());
                        throw ex;
                    }

                    // вставить I

                    cmdInsI = new OleDbCommand();
                    cmdInsI.Connection = con;
                    cmdInsI.Transaction = tran;


                    cmdInsI.CommandText = "insert into I (ID, PAGECNT, APPNCNT, SECURTYPE, APPBNPAGECNT, I_IDATE, EXTDOCDATE, EXTDOCNO, CONTR, CONTR_NAME, ADR, EXECUTOR, EXECUTOR_NAME, OFF_SPECIAL_CONTROL, CONTR_IS_INITIATOR)";
                    cmdInsI.CommandText += "  VALUES (:ID, 1, 0, 2, 0, :I_IDATE, :EXTDOCDATE, :EXTDOCNO, :CONTR, :CONTR_NAME, :ADR, :EXECUTOR, :EXECUTOR_NAME, :OFF_SPECIAL_CONTROL, :CONTR_IS_INITIATOR)";

                    cmdInsI.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                    //cmdInsI.Parameters.Add(new OleDbParameter(":I_IDATE", dtIdate));
                    cmdInsI.Parameters.Add(new OleDbParameter(":I_IDATE", DateTime.Today));
                    cmdInsI.Parameters.Add(new OleDbParameter(":EXTDOCDATE", dtExtDocDate));
                    cmdInsI.Parameters.Add(new OleDbParameter(":EXTDOCNO", txtExtDocNum));
                    cmdInsI.Parameters.Add(new OleDbParameter(":CONTR", nContrID));
                    cmdInsI.Parameters.Add(new OleDbParameter(":CONTR_NAME", txtContrName));
                    cmdInsI.Parameters.Add(new OleDbParameter(":ADR", txtContrAdr));
                    cmdInsI.Parameters.Add(new OleDbParameter(":EXECUTOR", Convert.ToDecimal(nSuserID)));
                    cmdInsI.Parameters.Add(new OleDbParameter(":EXECUTOR_NAME", Convert.ToString(txtSuserName)));
                    cmdInsI.Parameters.Add(new OleDbParameter(":OFF_SPECIAL_CONTROL", 1));
                    cmdInsI.Parameters.Add(new OleDbParameter(":CONTR_IS_INITIATOR", 1));

                    if (cmdInsI.ExecuteNonQuery() == -1)
                    {
                        Exception ex = new Exception("Error inserting new row to I table rd_id = " + rdID.ToString());
                        throw ex;

                    }

                    cmdI_RD = new OleDbCommand();
                    cmdI_RD.Connection = con;
                    cmdI_RD.Transaction = tran;

                    cmdI_RD.CommandText = "INSERT INTO I_RD (ID, RD_ID, RDNO, FIND_SEARCH_ORG)";
                    cmdI_RD.CommandText += "  VALUES (:ID, :RD_ID, :RDNO, :FIND_SEARCH_ORG)";

                    cmdI_RD.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                    cmdI_RD.Parameters.Add(new OleDbParameter(":RD_ID", Convert.ToDecimal(rdID)));
                    cmdI_RD.Parameters.Add(new OleDbParameter(":RDNO", txtRdNum));
                    cmdI_RD.Parameters.Add(new OleDbParameter(":FIND_SEARCH_ORG", Convert.ToString(paramOsp.ShortOspName)));

                    if (cmdI_RD.ExecuteNonQuery() == -1)
                    {
                        Exception ex = new Exception("Error inserting new row to I_RD table rd_id = " + rdID.ToString());
                        throw ex;
                    }



                    cmdI_QRY_ANSWER = new OleDbCommand();
                    cmdI_QRY_ANSWER.Connection = con;
                    cmdI_QRY_ANSWER.Transaction = tran;

                    cmdI_QRY_ANSWER.CommandText = "INSERT INTO I_QRY_ANSWER (ID, ANSWER_BODY)";
                    cmdI_QRY_ANSWER.CommandText += " VALUES (:ID, :ANSWER_BODY)";

                    cmdI_QRY_ANSWER.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                    cmdI_QRY_ANSWER.Parameters.Add(new OleDbParameter(":ANSWER_BODY", Convert.ToString(txtAnswerBody)));

                    if (cmdI_QRY_ANSWER.ExecuteNonQuery() == -1)
                    {
                        Exception ex = new Exception("Error inserting new row to cmdI_QRY_ANSWER table rd_id = " + rdID.ToString());
                        throw ex;
                    }
                    else
                    {
                        res = newID;// если все удачно вставили - то вернуть newID 
                    }

                    tran.Commit();
                    con.Close();
                }

                return res;

            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }

            // проверить подключение - а то может статься что не закрыли
            if (con != null && con.State != ConnectionState.Closed) con.Close();

            return -1;
        }

        public decimal InsertI_Qry_Answer(OleDbConnection con, DataRow row, Logger_ufssprk_tools lLogger, DateTime dtIdate, DateTime dtExtDocDate, string txtExtDocNum, decimal nContrID, decimal nStatus, string txtAnswerBody)
        {
            // получить сведения о РД по его ID


            // вставить DOCUMENT, I, I_RD, I_QRY_ANSWER
            OleDbCommand cmd, cmdInsDoc, cmdInsI, cmdI_RD, cmdI_QRY_ANSWER;
            Decimal newID;
            OleDbTransaction tran = null;
            decimal res = 0;
            decimal rdID = 0;
            string txtContrName = "";
            string txtContrAdr = "";
            string txtRdNum = "";

            decimal nSuserID = 8992;
            string txtSuserName = "System Administrator"; // временное рещение, тут РД инепонятно нужно ли искать в РД параметры СПИ по розыску.
            try
            {
                rdID = Convert.ToDecimal(row[1]); // вторая колонка
                string txtFioD = Convert.ToString(row[2]) + " " + Convert.ToString(row[3]) + " " + Convert.ToString(row[4]); // 3, 4, 5 колонка - ФИО
                string txtBornD = Convert.ToString(row[5]); // 6-я колонка дата рождения
                string txtBornPlace = Convert.ToString(row[6]); // 7-я колонка место рождения
                string txtMessage = Convert.ToString(row[7]).Trim(); // 8-я колонка текст ответа




                txtContrName = GetLegal_Name(nContrID, con, lLogger);
                txtContrAdr = GetLegal_Adr(nContrID, con, lLogger);
                txtRdNum = GetRdNum(rdID, con, lLogger);
                OspOptions paramOsp = GetOspOptions(con, lLogger);

                // сформировать текст ответа
                if (txtAnswerBody.Length.Equals(0))
                {
                    if (txtMessage.Trim().Length.Equals(0))
                    {
                        txtAnswerBody = "нет сведений в ответе";
                    }
                    else
                    {
                        txtAnswerBody = txtMessage;
                    }
                }

                txtAnswerBody = "По запросу в рамках РД № " + txtRdNum + " в отношении " + txtFioD + " (родился " + txtBornD + " " + txtBornPlace + ") получен ответ: " + txtAnswerBody;

                newID = 0;

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // получить новый ключ
                cmd = new OleDbCommand("SELECT gen_id(seq_document, 1) FROM RDB$DATABASE", con, tran);
                newID = Convert.ToDecimal(cmd.ExecuteScalar());

                // вставить DOCUMENT
                cmdInsDoc = new OleDbCommand();
                cmdInsDoc.Connection = con;
                cmdInsDoc.Transaction = tran;
                cmdInsDoc.CommandText = "INSERT INTO DOCUMENT (DOCUMENTCLASSID, DOCSTATUSID, DOC_DATE, CREATE_DATE, ID, METAOBJECTNAME, SUSER_ID)";
                cmdInsDoc.CommandText += " VALUES (:DOCUMENTCLASSID, :DOCSTATUSID, :DOC_DATE, :CREATE_DATE,  :ID ,'I_QRY_ANSWER', 8992)";
                cmdInsDoc.Parameters.Add(new OleDbParameter(":DOCUMENTCLASSID", Convert.ToDecimal(11)));
                cmdInsDoc.Parameters.Add(new OleDbParameter(":DOCSTATUSID", Convert.ToDecimal(nStatus)));
                cmdInsDoc.Parameters.Add(new OleDbParameter(":DOC_DATE", DateTime.Today));
                cmdInsDoc.Parameters.Add(new OleDbParameter(":CREATE_DATE", DateTime.Today));
                cmdInsDoc.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));

                if (cmdInsDoc.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to document table rd_id = " + rdID.ToString());
                    throw ex;
                }

                // вставить I

                cmdInsI = new OleDbCommand();
                cmdInsI.Connection = con;
                cmdInsI.Transaction = tran;


                cmdInsI.CommandText = "insert into I (ID, PAGECNT, APPNCNT, SECURTYPE, APPBNPAGECNT, I_IDATE, EXTDOCDATE, EXTDOCNO, CONTR, CONTR_NAME, ADR, EXECUTOR, EXECUTOR_NAME, OFF_SPECIAL_CONTROL, CONTR_IS_INITIATOR)";
                cmdInsI.CommandText += "  VALUES (:ID, 1, 0, 2, 0, :I_IDATE, :EXTDOCDATE, :EXTDOCNO, :CONTR, :CONTR_NAME, :ADR, :EXECUTOR, :EXECUTOR_NAME, :OFF_SPECIAL_CONTROL, :CONTR_IS_INITIATOR)";

                cmdInsI.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                //cmdInsI.Parameters.Add(new OleDbParameter(":I_IDATE", dtIdate));
                cmdInsI.Parameters.Add(new OleDbParameter(":I_IDATE", DateTime.Today));
                cmdInsI.Parameters.Add(new OleDbParameter(":EXTDOCDATE", dtExtDocDate));
                cmdInsI.Parameters.Add(new OleDbParameter(":EXTDOCNO", txtExtDocNum));
                cmdInsI.Parameters.Add(new OleDbParameter(":CONTR", nContrID));
                cmdInsI.Parameters.Add(new OleDbParameter(":CONTR_NAME", txtContrName));
                cmdInsI.Parameters.Add(new OleDbParameter(":ADR", txtContrAdr));
                cmdInsI.Parameters.Add(new OleDbParameter(":EXECUTOR", Convert.ToDecimal(nSuserID)));
                cmdInsI.Parameters.Add(new OleDbParameter(":EXECUTOR_NAME", Convert.ToString(txtSuserName)));
                cmdInsI.Parameters.Add(new OleDbParameter(":OFF_SPECIAL_CONTROL", 1));
                cmdInsI.Parameters.Add(new OleDbParameter(":CONTR_IS_INITIATOR", 1));

                if (cmdInsI.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to I table rd_id = " + rdID.ToString());
                    throw ex;

                }

                cmdI_RD = new OleDbCommand();
                cmdI_RD.Connection = con;
                cmdI_RD.Transaction = tran;

                cmdI_RD.CommandText = "INSERT INTO I_RD (ID, RD_ID, RDNO, FIND_SEARCH_ORG)";
                cmdI_RD.CommandText += "  VALUES (:ID, :RD_ID, :RDNO, :FIND_SEARCH_ORG)";

                cmdI_RD.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdI_RD.Parameters.Add(new OleDbParameter(":RD_ID", Convert.ToDecimal(rdID)));
                cmdI_RD.Parameters.Add(new OleDbParameter(":RDNO", txtRdNum));
                cmdI_RD.Parameters.Add(new OleDbParameter(":FIND_SEARCH_ORG", Convert.ToString(paramOsp.ShortOspName)));

                if (cmdI_RD.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to I_RD table rd_id = " + rdID.ToString());
                    throw ex;
                }



                cmdI_QRY_ANSWER = new OleDbCommand();
                cmdI_QRY_ANSWER.Connection = con;
                cmdI_QRY_ANSWER.Transaction = tran;

                cmdI_QRY_ANSWER.CommandText = "INSERT INTO I_QRY_ANSWER (ID, ANSWER_BODY)";
                cmdI_QRY_ANSWER.CommandText += " VALUES (:ID, :ANSWER_BODY)";

                cmdI_QRY_ANSWER.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdI_QRY_ANSWER.Parameters.Add(new OleDbParameter(":ANSWER_BODY", Convert.ToString(txtAnswerBody)));

                if (cmdI_QRY_ANSWER.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to cmdI_QRY_ANSWER table rd_id = " + rdID.ToString());
                    throw ex;
                }
                else
                {
                    res = newID;// если все удачно вставили - то вернуть newID 
                }

                tran.Commit();
                con.Close();

                return res;

            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }

            // проверить подключение - а то может статься что не закрыли
            if (con != null && con.State != ConnectionState.Closed) con.Close();

            return -1;
        }

        public bool WriteIcMvdReqRow(DataRow row, string txtListID, string txtSberFolder, string txtFileName, OleDbConnection conPK_OSP, string constrGIBDD, string txtAgreementCode, ref Logger_ufssprk_tools lLoggerError, Logger_ufssprk_tools lLogger)
        {
            string txtEntityName = "ИЦ МВД Республики Карелия";
            File_funcs ff = new File_funcs();
            string txtDate = "";
            DateTime dtDate = DateTime.MinValue;
            String[] Zapros_list;

            string txtId = "";
            decimal nId = 0;
            txtId = Convert.ToString(row["ZAPROS"]).Trim(); // Id нужен чтобы ошибки вставлять если будут
            if (!Decimal.TryParse(txtId, out nId))
            {
                nId = -1;
            }

            if (row["DATROZHD"].Equals(System.DBNull.Value) && (nId > 0))
            {
                // вставить ответ что запрос не был отправлен т.к. нет даты рождения
                decimal nErrId = 0;
                // делаем по всему списку
                if (txtListID.Length > 0)
                {
                    // сделать из списка массив nId, в цикле по нему вставить ответ
                    Zapros_list = txtListID.Split(';');
                    
                    foreach (string txtNomzap in Zapros_list)
                    {
                        if (Decimal.TryParse(txtNomzap, out nId))
                        {
                            if (nId > 0)
                            {
                                nErrId = InsertIcMvdErrorResp(conPK_OSP, constrGIBDD, txtAgreementCode, nId, txtEntityName, ref lLoggerError, lLogger);
                            }
                        }
                    } // end_foreach
                }
                return false;
            }
            else
            {
                txtDate = Convert.ToString(row["DATROZHD"]);
                if (!DateTime.TryParse(txtDate, out dtDate) && (nId > 0))
                {
                    // вставить ответ что запрос не был отправлен т.к. нет даты рождения
                    decimal nErrId = 0;
                    // делаем по всему списку
                    if (txtListID.Length > 0)
                    {
                        // сделать из списка массив nId, в цикле по нему вставить ответ
                        Zapros_list = txtListID.Split(';');

                        foreach (string txtNomzap in Zapros_list)
                        {
                            if (Decimal.TryParse(txtNomzap, out nId))
                            {
                                if (nId > 0)
                                {
                                    nErrId = InsertIcMvdErrorResp(conPK_OSP, constrGIBDD, txtAgreementCode, nId, txtEntityName, ref lLoggerError, lLogger);
                                }
                            }
                        } // end_foreach
                    }
                    return false;
                }
                else
                {   // если у предыдущей строчки дата рождения есть и она парсится в DateTime

                    string txtBirthPlace = Convert.ToString(row["DEBTOR_BIRTHPLACE"]).Trim();
                    //  поле место рождения не должно превышать 90 знаков - поэтому отрезаем запятые (они им не нужны) и режем с конца если все еще больше чем 90
                    if (txtBirthPlace.Length > 90)
                    {
                        txtBirthPlace = cutEnd(txtBirthPlace.Trim(','), 90);
                    }

                    string txtText = "ЖЖЖOSKЖЖЖ" + "\r\n";
                    txtText += "--------------------------------------------" + "\r\n";
                    txtText += "ФАМИЛИЯ: " + Convert.ToString(row["debtor_surname"]).Trim().ToUpper().Replace('Ё', 'Е') + "\r\n";
                    txtText += "ИМЯ: " + Convert.ToString(row["debtor_firstname"]).Trim().ToUpper().Replace('Ё', 'Е') + "\r\n";
                    txtText += "ОТЧЕСТВО: " + Convert.ToString(row["debtor_patronymic"]).Trim().ToUpper().Replace('Ё', 'Е') + "\r\n";
                    txtText += "ДАТА РОЖДЕНИЯ: " + dtDate.ToShortDateString() + "\r\n";
                    txtText += "МЕСТО РОЖДЕНИЯ: " + txtBirthPlace + "\r\n";
                    txtText += "ЦЕЛЬ ПРОВЕРКИ: СВЕДЕНИЯ О СУДИМОСТИ" + "\r\n";
                    txtText += "ИНИЦИАТОР ПРОВЕРКИ: " + "УФССП ПО РЕСП КАРЕЛИЯ" + txtListID + "\r\n";
                    string txtSpiFio = Convert.ToString(row["FIO_SPI"]).Trim();
                    int iSpaceIndx = txtSpiFio.IndexOf(' ');
                    if (iSpaceIndx > 0 && txtSpiFio.Length > 0)
                    {
                        txtSpiFio = txtSpiFio.Substring(0, iSpaceIndx);
                    }
                    txtText += "ФАМИЛИЯ ИНИЦИАТОРА ПРОВЕРКИ: " + txtSpiFio + "\r\n";
                    // парсинг даты
                    txtDate = Convert.ToString(row["DATZAPR"]);
                    if (!DateTime.TryParse(txtDate, out dtDate) && (nId > 0))
                    {
                        dtDate = DateTime.Today;
                    }

                    txtText += "ДАТА: " + dtDate.ToShortDateString() + "\r\n";
                    txtText += "РЕГИОН: 162" + "\r\n";
                    txtText += "--------------------------------------------" + "\r\n";
                    txtText += "ЖЖЖКККЖЖЖ"; // +"\n";
                    // txtText.ToUpper() - переводим в верхний регистр все
                    if (!ff.WriteTofile(txtText.ToUpper(), string.Format(@"{0}\{1}", txtSberFolder, txtFileName), Encoding.GetEncoding(1251)))
                    {
                        row["GOD"] = -1;
                        return false;
                    }

                    return true;
            
                }
            }

        }


        public DataTable ReadIcMvd10Zapros(OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;

            try
            {
                dtRes = GetDataTableFromFB(con, "select 'ИЦ_МВД_10' as agreement_id, 'УФССП_' || ext_request.osp_number as OSP_NUMBER, DEBTOR_BIRTHPLACE, ext_request.req_id as ZAPROS, ext_request.debtor_name as FIOVK, ext_request.debtor_surname, ext_request.debtor_firstname, ext_request.debtor_patronymic, ext_request.pack_id, ext_request.ext_request_id, ext_request.debtor_birthdate as DATROZHD, ext_request.req_date as DATZAPR, req.div, ext_request.fio_spi, req.DBTR_BORN_YEAR GOD from ext_request join o_ip req on ext_request.req_id = req.id join o_ip_req_ip on o_ip_req_ip.id = req.id where mvv_agreement_code = 'ИЦ_МВД_10' and processed = 0 and (req.ID_DBTRCLS = 2 or (req.ID_DBTRCLS in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) order by FIOVK, DATROZHD, DEBTOR_BIRTHPLACE", "TOFIND", lLogger);
                
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в ИЦ МВД(ReadIcMvd10Zapros).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в ИЦ МВД(ReadIcMvd10Zapros).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }

        public DataTable ReadGimsLodka10Zapros(OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;

            // добавил в выборку ИНН и класс контрагента -- req.id_dbtr_inn, req.id_dbtrcls

            try
            {
                dtRes = GetDataTableFromFB(con, "select 'ГИМС_ЛОДКА_10' as agreement_id, ext_request.req_id as ZAPROS, ext_request.debtor_name as FIOVK, ext_request.debtor_surname, ext_request.debtor_firstname, ext_request.debtor_patronymic, ext_request.pack_id, ext_request.ext_request_id, ext_request.debtor_birthdate as DATROZHD, ext_request.req_date as DATZAPR, req.div, ext_request.fio_spi, req.DBTR_BORN_YEAR GOD, req.id_dbtr_inn, req.id_dbtrcls  from ext_request join o_ip req on ext_request.req_id = req.id join o_ip_req_ip on o_ip_req_ip.id = req.id where mvv_agreement_code = 'ГИМС_ЛОДКА_10' and processed = 0", "TOFIND", lLogger);
                // 86201063451090 - серия документа
                // 86201062727824 - Артем
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в ГИМС МЧС(ReadGimsLodka10Zapros).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в ГИМС МЧС(ReadGimsLodka10Zapros).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }

        public DataTable ReadIcMvdFms10Zapros(OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;

            // добавил в выборку ИНН и класс контрагента -- req.id_dbtr_inn, req.id_dbtrcls

            try
            {

                 // добавил СНИЛС, ИНН, АДРЕС из ext_requset
                dtRes = GetDataTableFromFB(con, "select 'ИЦ_МВД_10_ФМС' as agreement_id, ext_request.req_id as ZAPROS, ext_request.debtor_name as FIOVK, ext_request.debtor_surname, ext_request.debtor_firstname, ext_request.debtor_patronymic, ext_request.pack_id, ext_request.ext_request_id, ext_request.debtor_birthdate as DATROZHD, ext_request.req_date as DATZAPR, req.div, ext_request.fio_spi, req.DBTR_BORN_YEAR GOD, req.id_dbtr_inn, req.id_dbtrcls, ext_request.DEBTOR_INN, ext_request.DEBTOR_SNILS, ext_request.DEBTOR_ADDRESS from ext_request join o_ip req on ext_request.req_id = req.id join o_ip_req_ip on o_ip_req_ip.id = req.id where mvv_agreement_code = 'ИЦ_МВД_10_ФМС' and processed = 0", "TOFIND", lLogger);

                //dtRes = GetDataTableFromFB(con, "select 'ИЦ_МВД_10_ФМС' as agreement_id, ext_request.req_id as ZAPROS, ext_request.debtor_name as FIOVK, ext_request.debtor_surname, ext_request.debtor_firstname, ext_request.debtor_patronymic, ext_request.pack_id, ext_request.ext_request_id, ext_request.debtor_birthdate as DATROZHD, ext_request.req_date as DATZAPR, req.div, ext_request.fio_spi, req.DBTR_BORN_YEAR GOD, req.id_dbtr_inn, req.id_dbtrcls  from ext_request join o_ip req on ext_request.req_id = req.id join o_ip_req_ip on o_ip_req_ip.id = req.id where mvv_agreement_code = 'ИЦ_МВД_10_ФМС' and processed = 0", "TOFIND", lLogger);
                
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в ИЦ_МВД_10_ФМС(ReadIcMvdFms10Zapros).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в ИЦ_МВД_10_ФМС(ReadIcMvdFms10Zapros).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }

        public DataTable ReadRtn10Zapros(OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;

            // добавил в выборку ИНН и класс контрагента -- req.id_dbtr_inn, req.id_dbtrcls

            try
            {
                dtRes = GetDataTableFromFB(con, "select 'РТН_10' as agreement_id, ext_request.req_id as ZAPROS, ext_request.debtor_name as FIOVK, ext_request.debtor_surname, ext_request.debtor_firstname, ext_request.debtor_patronymic, ext_request.pack_id, ext_request.ext_request_id, ext_request.debtor_birthdate as DATROZHD, ext_request.req_date as DATZAPR, req.div, ext_request.fio_spi, req.DBTR_BORN_YEAR GOD, req.id_dbtr_inn, req.id_dbtrcls  from ext_request join o_ip req on ext_request.req_id = req.id join o_ip_req_ip on o_ip_req_ip.id = req.id where mvv_agreement_code = 'РТН_10' and processed = 0", "TOFIND", lLogger);
                // 86201063451090 - серия документа
                // 86201062727824 - Артем
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в РТН(ReadRtn10Zapros).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в РТН(ReadRtn10Zapros).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }

        public DataTable ReadGims10Zapros(OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;

            try
            {
                dtRes = GetDataTableFromFB(con, "select 'ГИМС_10' as agreement_id, ext_request.req_id as ZAPROS, ext_request.debtor_name as FIOVK, ext_request.debtor_surname, ext_request.debtor_firstname, ext_request.debtor_patronymic, ext_request.pack_id, ext_request.ext_request_id, ext_request.debtor_birthdate as DATROZHD, ext_request.req_date as DATZAPR, req.div, ext_request.fio_spi, req.DBTR_BORN_YEAR GOD from ext_request join o_ip req on ext_request.req_id = req.id join o_ip_req_ip on o_ip_req_ip.id = req.id where mvv_agreement_code = 'ГИМС_10' and processed = 0 and (req.ID_DBTRCLS = 2 or (req.ID_DBTRCLS in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2)))", "TOFIND", lLogger);
                // 86201063451090 - серия документа
                // 86201062727824 - Артем
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в ГИМС(ReadGims10Zapros).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в ГИМС(ReadGims10Zapros).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }

        public DataTable ReadPotdOut2017(OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;

            try
            {
                //dtRes = GetDataTableFromFB(con, "select 'ГИБДД_10' as agreement_id, ext_request.req_id as ZAPROS, ext_request.debtor_name as FIOVK, ext_request.debtor_surname, ext_request.debtor_firstname, ext_request.debtor_patronymic, ext_request.pack_id, ext_request.ext_request_id, ext_request.debtor_birthdate as DATROZHD, ext_request.req_date as DATZAPR, req.div, ext_request.fio_spi, req.DBTR_BORN_YEAR GOD from ext_request join o_ip req on ext_request.req_id = req.id join o_ip_req_ip on o_ip_req_ip.id = req.id where mvv_agreement_code = 'ГИБДД_10' and processed = 0 and (req.ID_DBTRCLS = 2 or (req.ID_DBTRCLS in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2)))", "TOFIND", lLogger);
                dtRes = GetDataTableFromFB(con, "  select 'ПФР_10' as agreement_id, ext_request.req_id as ZAPROS, ext_request.debtor_name as FIOVK, ext_request.debtor_surname, ext_request.debtor_firstname, ext_request.debtor_patronymic, ext_request.pack_id, ext_request.ext_request_id, ext_request.debtor_birthdate as DATROZHD, ext_request.req_date as DATZAPR, req.div, ext_request.fio_spi, req.DBTR_BORN_YEAR GOD, debtor_snils as snils, debtor_inn as inn from ext_request join o_ip req on ext_request.req_id = req.id join o_ip_req_ip on o_ip_req_ip.id = req.id where mvv_agreement_code = 'ПФР_10' and processed = 0 and (req.ID_DBTRCLS = 2 or (req.ID_DBTRCLS in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2)))", "TOFIND", lLogger);
                
                // dtRes = GetDataTableFromFB(con, "select 'ГИБДД_10' as agreement_id, ext_request.req_id as ZAPROS, ext_request.debtor_name as FIOVK, ext_request.debtor_surname, ext_request.debtor_firstname, ext_request.debtor_patronymic, ext_request.pack_id, ext_request.ext_request_id, ext_request.debtor_birthdate as DATROZHD, ext_request.req_date as DATZAPR, req.div, ext_request.fio_spi, req.DBTR_BORN_YEAR GOD from ext_request join o_ip req on ext_request.req_id = req.id join o_ip_req_ip on o_ip_req_ip.id = req.id where mvv_agreement_code = 'ГИБДД_10' and processed = 0 and (req.ID_DBTRCLS = 2 or (req.ID_DBTRCLS in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and req_id = 86011231829442", "TOFIND", lLogger);


                // 86201063451090 - серия документа
                // 86201062727824 - Артем
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в ПФР_10(ReadPotdOut2017).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в ПФР_10(ReadPotdOut2017).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }

        public DataTable ReadGibdd10Zapros(OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;

            try
            {
                dtRes = GetDataTableFromFB(con, "select 'ГИБДД_10' as agreement_id, ext_request.req_id as ZAPROS, ext_request.debtor_name as FIOVK, ext_request.debtor_surname, ext_request.debtor_firstname, ext_request.debtor_patronymic, ext_request.pack_id, ext_request.ext_request_id, ext_request.debtor_birthdate as DATROZHD, ext_request.req_date as DATZAPR, req.div, ext_request.fio_spi, req.DBTR_BORN_YEAR GOD from ext_request join o_ip req on ext_request.req_id = req.id join o_ip_req_ip on o_ip_req_ip.id = req.id where mvv_agreement_code = 'ГИБДД_10' and processed = 0 and (req.ID_DBTRCLS = 2 or (req.ID_DBTRCLS in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2)))", "TOFIND", lLogger);
                // dtRes = GetDataTableFromFB(con, "select 'ГИБДД_10' as agreement_id, ext_request.req_id as ZAPROS, ext_request.debtor_name as FIOVK, ext_request.debtor_surname, ext_request.debtor_firstname, ext_request.debtor_patronymic, ext_request.pack_id, ext_request.ext_request_id, ext_request.debtor_birthdate as DATROZHD, ext_request.req_date as DATZAPR, req.div, ext_request.fio_spi, req.DBTR_BORN_YEAR GOD from ext_request join o_ip req on ext_request.req_id = req.id join o_ip_req_ip on o_ip_req_ip.id = req.id where mvv_agreement_code = 'ГИБДД_10' and processed = 0 and (req.ID_DBTRCLS = 2 or (req.ID_DBTRCLS in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and req_id = 86011231829442", "TOFIND", lLogger);
                

                // 86201063451090 - серия документа
                // 86201062727824 - Артем
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в ГИБДД(ReadGibdd10Zapros).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в ГИБДД(ReadGibdd10Zapros).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }

        public DataTable ReadSberZaprosNewFormatTest(OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;

            try
            {
                dtRes = GetDataTableFromFB(con, "select 10 agreement_id, ext_request.req_id as ZAPROS, ext_request.debtor_name as FIOVK, ext_request.pack_id, ext_request.ext_request_id, req.DBTR_BORN_YEAR as GOD,  ext_request.debtor_birthdate as DATROZHD, ext_request.spi_id as USER_ID, ext_request.req_date as DATZAPR,   ext_request.osp_number as PRS_DEP, ext_request.fio_spi,    ext_request.h_spi as FIO_SSPI, ext_request.ip_num as doc_num,     COALESCE(ext_request.ip_sum, 0) as SUMMA, ext_request.id_number as ID_NUM,      ext_request.id_date as ID_DATE, ext_request.debtor_address as ADDR,       COALESCE(ext_request.debtor_birthplace, '') as debtor_birthplace, COALESCE(d.ser_doc,'') as SerDoc,        COALESCE(d.num_doc,'') as NumDoc, coalesce(d.date_doc, '01.01.1900') DateDoc,         COALESCE(d.code_dep, '') as CodeDep, COALESCE(d.type_doc_code, 0) as TypeDoc,          COALESCE(d.fio_doc, '') as FioDoc           from ext_request join o_ip req on ext_request.req_id = req.id             join o_ip_req_ip on o_ip_req_ip.id = req.id              left join  Mvv_Datum_Identificator d on d.id = O_IP_REQ_IP.DATUM_DOCUMENT_ID               where mvv_agreement_code = '10'                /*and processed = 0 */                 and (req.ID_DBTRCLS = 2 or (req.ID_DBTRCLS in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2)))                 and  ext_request.req_id = 86201063451090", "TOFIND", lLogger);
                // 86201063451090 - серия документа
                // 86201062727824 - Артем
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в Сбер(ReadSberZaprosNewFormat).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в Сбер(ReadSberZaprosNewFormat).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }



       
        public DataTable ReadSberSpiDocLogs_WithNullFilename(OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;

            try
            {
                dtRes = GetDataTableFromFB(con, "select * from local_logs ll where ll.filename is null and pack_type = 9 and ll.pack_status = 2 and ll.pack_count > 0 order by ll.packdate, ll.id", "TOFIND", lLogger);
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Чтение информации о логах прошло с ошибками. Логи не обработаны.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в Сбер(ReadSberSpiDocLogs_WithNullFilename).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Чтение информации о логах прошло с ошибками. Логи не обработаны.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в Сбер(ReadSberSpiDocLogs_WithNullFilename).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }
        
        public DataTable ReadFedMvvSberEndGaccount(OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;
            //select first 2500 agm.gaccount_money_id, o_ip.ip_id, o_ip.id_dbtrcls as dbtrcls, o_ip.total_dept_sum as ip_sum1, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, avacc.summa, avacc.dept_code, d.id as act_id, d.metaobjectname as doc_code, o_ip.ipno as IP_NUMBER, o_ip.ip_risedate, d.DOC_NUMBER, d.doc_date, o_ip.id_docno as ID_NUMBER, /* id_no */ o_ip.id_docdate, o_ip.ip_exec_prist_name as SPI_FIO, acc.acc, o_ip.id_dbtr_name as DEBTOR_NAME, o_ip.id_dbtr_bornadr as DEBTOR_BIRTH_PLACE1, o_ip.id_dbtr_adr as DEBTOR_ADR, o_ip.id_dbtr_born as DEBTOR_BIRTH_DATE1, o_ip.dbtr_born_year as dbtr_born_year1 from O_IP_ACT_ENDGACCOUNT_MONEY agm join O_IP_ACT_ARREST_MONEY aam on aam.id = agm.id join O_ip on o_ip.id = agm.id join o on o.id = agm.id join document d on d.id = agm.id join datum_link_oip dlo on dlo.doc_id = agm.id join mvv_datum dat on dat.id = dlo.datum_id join mvv_datum_account acc on acc.id = dat.id join mvv_datum_availability_acc avacc on avacc.id = dat.id join (select d.id from document d join O_IP_ACT_ARREST_MONEY act on act.id = d.id join O_IP_ACT_ENDGACCOUNT_MONEY oag on oag.id = d.id where d.metaobjectname = 'O_IP_ACT_ENDGACCOUNT_MONEY' and act.BANK_AGENT_CODE = 'СБЕР' and d.doc_date > '01.01.2019' and exists( select null from MVV_IP_ACT_CONFIRM ac join document acd on acd.id = ac.id where ac.answer_data = 'Постановление не исполнено в связи с отсутствием ограничения/ареста, которое требуется отменить/снять' and ac.original_document_id = d.id and acd.docstatusid = 20 ) and d.docstatusid = 71 and exists (select null from O_IP_ACT_GACCOUNT_MONEY ag join document agd on ag.id = agd.id where ag.id = oag.gaccount_money_id and agd.docstatusid = 70 ) group by 1 ) ogr_not_conf on ogr_not_conf.id = agm.id where dat.data_state = 2 /* подтверждены */ order by agm.gaccount_money_id, acc_id 

            try
            {
                // dtRes = GetDataTableFromFB(con, "select ip.id_dbtr_entid as dbtrcls, restr.ID_DATE as id_docdate, coalesce(acc.summa,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE, ip.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key  join doc_ip_doc ip on ip.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (ip.id_dbtr_entid = 2 or (ip.id_dbtr_entid in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2)))", "TOFIND", lLogger);
                // dtRes = GetDataTableFromFB(con, "select COALESCE(o_ip2.ipno, o_ip3.ipno, '') as old_ip_no, ip.old_regnumber, ip.id_dbtr_entid as dbtrcls, restr.ID_DATE as id_docdate, coalesce(acc.summa,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year1, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE, ip.id_dbtr_born) as DEBTOR_BIRTH_DATE1, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE1, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key join doc_ip_doc ip on ip.id = restr.ip_id join o on o.id = restr.act_id join o_ip on o_ip.id = restr.act_id left join document d on d.id = restr.act_id left join o_ip_act_endgaccount_money endgacc on endgacc.id = restr.act_id left join o_ip o_ip2 on endgacc.gaccount_money_id = o_ip2.id left join document d2 on d2.id = endgacc.gaccount_money_id left join o_ip_act_endarrest endarr on endarr.id = restr.act_id left join o_ip o_ip3 on endarr.arrestact_id = o_ip3.id left join document d3 on d3.id = endarr.arrestact_id where (restr.proceed = 0  or (restr.doc_date > '09.05.2016' and restr.doc_date < '01.06.2016')) and o.doc_electron = 1 and (restr.DOC_CODE in (/*'O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY',*/ 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (ip.id_dbtr_entid = 2 or (ip.id_dbtr_entid in (71,95,96,97,666))) and (substring (d.doc_number from 1 for 5) <> substring( COALESCE(d2.doc_number, d3.doc_number, '') from 1 for 5)) order by doc_type_code, doc_number, acc", "TOFIND", lLogger);
                // 20161219 - только те где есть старый номер and (ip.old_regnumber is not null and char_length(ip.old_regnumber) > 0)
                //dtRes = GetDataTableFromFB(con, "select restr.ip_id, COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) as dbtrcls, restr.ID_DATE as id_docdate, coalesce(restr.ip_rest_debtsum,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE,ip.id_dbtr_born,ip2.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr, ip2.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, coalesce(ip.old_regnumber, '') old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key left join doc_ip_doc ip on ip.id = restr.ip_id left join DOC_SV_IP_DEBT ip2 on ip2.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) = 2 or (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and (ip.old_regnumber is not null and char_length(ip.old_regnumber) > 0) order by old_regnumber, doc_type_code, doc_number, acc", "TOFIND", lLogger);
                //20170421 - новый с total_debt_sum
                // dtRes = GetDataTableFromFB(con, "select restr.ip_id, COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) as dbtrcls, restr.ID_DATE as id_docdate, coalesce(restr.total_debt_sum,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE,ip.id_dbtr_born,ip2.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr, ip2.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, coalesce(ip.old_regnumber, '') old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key left join doc_ip_doc ip on ip.id = restr.ip_id left join DOC_SV_IP_DEBT ip2 on ip2.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) = 2 or (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and (ip.old_regnumber is not null and char_length(ip.old_regnumber) > 0) order by old_regnumber, doc_type_code, doc_number, acc", "TOFIND", lLogger);
                //20170425 - нужно добавить выборку отмены ареста и отмены обращения взыскания без галочки В электронном виде
                //dtRes = GetDataTableFromFB(con, "select restr.ip_id, COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) as dbtrcls, restr.ID_DATE as id_docdate, coalesce(restr.total_debt_sum,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE,ip.id_dbtr_born,ip2.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr, ip2.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, coalesce(ip.old_regnumber, '') old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key left join doc_ip_doc ip on ip.id = restr.ip_id left join DOC_SV_IP_DEBT ip2 on ip2.id = restr.ip_id join o on o.id = restr.act_id  where restr.proceed = 0  and ((o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY'))  ) or  (o.doc_electron = 0 and o.out_doc_date > '01.03.2017'and (restr.DOC_CODE in ('O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY'))))    AND restr.AGENT_CODE = 'Б_СБЕР_10' and (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) = 2 or (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and (ip.old_regnumber is not null and char_length(ip.old_regnumber) > 0) order by old_regnumber, doc_type_code, doc_number, acc", "TOFIND", lLogger);
                //20170616 - готовимся к фед. эдо - будем только отмены выгружать в этой сборке
                // dtRes = GetDataTableFromFB(con, "select restr.ip_id, COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) as dbtrcls, restr.ID_DATE as id_docdate, coalesce(restr.total_debt_sum,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE,ip.id_dbtr_born,ip2.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr, ip2.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, coalesce(ip.old_regnumber, '') old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key left join doc_ip_doc ip on ip.id = restr.ip_id left join DOC_SV_IP_DEBT ip2 on ip2.id = restr.ip_id join o on o.id = restr.act_id  where restr.proceed = 0  and ((o.doc_electron = 1 and (restr.DOC_CODE in (/*'O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY',*/ 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY'))  ) or  (o.doc_electron = 0 and o.out_doc_date > '01.03.2017'and (restr.DOC_CODE in ('O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY'))))    AND restr.AGENT_CODE = 'Б_СБЕР_10' and (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) = 2 or (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and (ip.old_regnumber is not null and char_length(ip.old_regnumber) > 0) order by old_regnumber, doc_type_code, doc_number, acc", "TOFIND", lLogger);
                // 20191225 - вариант только для случаев когда отмена отказана а первичное обращение взыскания исполнено частично
                // dtRes = GetDataTableFromFB(con, "select first 2500 agm.gaccount_money_id, o_ip.ip_id, o_ip.id_dbtrcls as dbtrcls, o_ip.total_dept_sum as ip_sum1, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, avacc.summa, avacc.dept_code, d.id as act_id, d.metaobjectname as doc_code, o_ip.ipno as IP_NUMBER, o_ip.ip_risedate, d.DOC_NUMBER, d.doc_date, o_ip.id_docno as ID_NUMBER, /* id_no */ o_ip.id_docdate, o_ip.ip_exec_prist_name as SPI_FIO, acc.acc, o_ip.id_dbtr_name as DEBTOR_NAME, o_ip.id_dbtr_bornadr as DEBTOR_BIRTH_PLACE1, o_ip.id_dbtr_adr as DEBTOR_ADR, o_ip.id_dbtr_born as DEBTOR_BIRTH_DATE1, o_ip.dbtr_born_year as dbtr_born_year1 from O_IP_ACT_ENDGACCOUNT_MONEY agm join O_IP_ACT_ARREST_MONEY aam on aam.id = agm.id join O_ip on o_ip.id = agm.id join o on o.id = agm.id join document d on d.id = agm.id join datum_link_oip dlo on dlo.doc_id = agm.id join mvv_datum dat on dat.id = dlo.datum_id join mvv_datum_account acc on acc.id = dat.id join mvv_datum_availability_acc avacc on avacc.id = dat.id join (select d.id from document d join O_IP_ACT_ARREST_MONEY act on act.id = d.id join O_IP_ACT_ENDGACCOUNT_MONEY oag on oag.id = d.id where d.metaobjectname = 'O_IP_ACT_ENDGACCOUNT_MONEY' and act.BANK_AGENT_CODE = 'СБЕР' and d.doc_date > '01.01.2019' and exists( select null from MVV_IP_ACT_CONFIRM ac join document acd on acd.id = ac.id where ac.answer_data = 'Постановление не исполнено в связи с отсутствием ограничения/ареста, которое требуется отменить/снять' and ac.original_document_id = d.id and acd.docstatusid = 20 ) and d.docstatusid = 71 and exists (select null from O_IP_ACT_GACCOUNT_MONEY ag join document agd on ag.id = agd.id where ag.id = oag.gaccount_money_id and agd.docstatusid = 70 ) group by 1 ) ogr_not_conf on ogr_not_conf.id = agm.id where dat.data_state = 2 /* подтверждены */ order by agm.gaccount_money_id, acc_id, doc_number, acc ", "TOFIND", lLogger);
                // 20191225 - вариант случаев с 01.11.2019 когда отмена отказана а первичное обращение взыскания любое кроме отказано, новый, удален, подготовлен к рег.

                // временно закрыл пока выборку разовую делаю
                dtRes = GetDataTableFromFB(con, "select first 2500 AGM.GACCOUNT_MONEY_ID, O_IP.IP_ID, O_IP.ID_DBTRCLS as DBTRCLS, O_IP.TOTAL_DEPT_SUM as IP_SUM1, ACC.ID ACC_ID, ACC.BIC_BANK, coalesce(ACC.CURRENCY_CODE, '643') as CURRENCY_CODE, AVACC.SUMMA, AVACC.DEPT_CODE, D.ID as ACT_ID, D.METAOBJECTNAME as DOC_CODE, O_IP.IPNO as IP_NUMBER, O_IP.IP_RISEDATE, D.DOC_NUMBER, D.DOC_DATE, O_IP.ID_DOCNO as ID_NUMBER, /* id_no */ O_IP.ID_DOCDATE, O_IP.IP_EXEC_PRIST_NAME as SPI_FIO, ACC.ACC, O_IP.ID_DBTR_NAME as DEBTOR_NAME, O_IP.ID_DBTR_BORNADR as DEBTOR_BIRTH_PLACE1, O_IP.ID_DBTR_ADR as DEBTOR_ADR, O_IP.ID_DBTR_BORN as DEBTOR_BIRTH_DATE1, O_IP.DBTR_BORN_YEAR as DBTR_BORN_YEAR1 from O_IP_ACT_ENDGACCOUNT_MONEY AGM join O_IP_ACT_ARREST_MONEY AAM on AAM.ID = AGM.ID join O_IP on O_IP.ID = AGM.ID join O on O.ID = AGM.ID join DOCUMENT D on D.ID = AGM.ID join DATUM_LINK_OIP DLO on DLO.DOC_ID = AGM.ID join MVV_DATUM DAT on DAT.ID = DLO.DATUM_ID join MVV_DATUM_ACCOUNT ACC on ACC.ID = DAT.ID join MVV_DATUM_AVAILABILITY_ACC AVACC on AVACC.ID = DAT.ID join(select D.ID from DOCUMENT D join O_IP_ACT_ARREST_MONEY ACT on ACT.ID = D.ID join O_IP_ACT_ENDGACCOUNT_MONEY OAG on OAG.ID = D.ID where D.METAOBJECTNAME = 'O_IP_ACT_ENDGACCOUNT_MONEY' and ACT.BANK_AGENT_CODE = 'СБЕР' and /* D.DOC_DATE <= '01.01.2020' and */ D.DOC_DATE > '04.07.2019' and exists(select null from MVV_IP_ACT_CONFIRM AC join DOCUMENT ACD on ACD.ID = AC.ID where AC.ANSWER_DATA = 'Постановление не исполнено в связи с отсутствием ограничения/ареста, которое требуется отменить/снять' and AC.ORIGINAL_DOCUMENT_ID = D.ID and ACD.DOCSTATUSID = 20) and D.DOCSTATUSID = 71 and /* отмена отказана в исполнении 71 */ exists(select null from O_IP_ACT_GACCOUNT_MONEY AG join DOCUMENT AGD on AG.ID = AGD.ID where AG.ID = OAG.GACCOUNT_MONEY_ID and AGD.DOCSTATUSID not in (-1, 1, 5, 71)) group by 1) OGR_NOT_CONF on OGR_NOT_CONF.ID = AGM.ID where DAT.DATA_STATE in (3,2) /* подтверждены, ошибочны - по опыту Медгоры бывает и так */ and D.DOC_DATE > '04.07.2019' and O_IP.ID_DOCDATE is not null /* D.DOC_DATE <= '01.11.2019' and */ order by AGM.GACCOUNT_MONEY_ID, ACC_ID, DOC_NUMBER, ACC", "TOFIND", lLogger);

                // 20200114 выборка только для Кондопоги id in (86051264097903, 86051264246539) для постановлений об отмене ареста и обращения взыскания
                //dtRes = GetDataTableFromFB(con, "select * from (select first 2500 AGM.GACCOUNT_MONEY_ID, O_IP.IP_ID, O_IP.ID_DBTRCLS as DBTRCLS, O_IP.TOTAL_DEPT_SUM as IP_SUM1, ACC.ID ACC_ID, ACC.BIC_BANK, coalesce(ACC.CURRENCY_CODE, '643') as CURRENCY_CODE, AVACC.SUMMA, AVACC.DEPT_CODE, D.ID as ACT_ID, D.METAOBJECTNAME as DOC_CODE, O_IP.IPNO as IP_NUMBER, O_IP.IP_RISEDATE, D.DOC_NUMBER, D.DOC_DATE, O_IP.ID_DOCNO as ID_NUMBER, /* id_no */ O_IP.ID_DOCDATE, O_IP.IP_EXEC_PRIST_NAME as SPI_FIO, ACC.ACC, O_IP.ID_DBTR_NAME as DEBTOR_NAME, O_IP.ID_DBTR_BORNADR as DEBTOR_BIRTH_PLACE1, O_IP.ID_DBTR_ADR as DEBTOR_ADR, O_IP.ID_DBTR_BORN as DEBTOR_BIRTH_DATE1, O_IP.DBTR_BORN_YEAR as DBTR_BORN_YEAR1 from O_IP_ACT_ENDGACCOUNT_MONEY AGM join O_IP_ACT_ARREST_MONEY AAM on AAM.ID = AGM.ID join O_IP on O_IP.ID = AGM.ID join O on O.ID = AGM.ID join DOCUMENT D on D.ID = AGM.ID join DATUM_LINK_OIP DLO on DLO.DOC_ID = AGM.ID join MVV_DATUM DAT on DAT.ID = DLO.DATUM_ID join MVV_DATUM_ACCOUNT ACC on ACC.ID = DAT.ID join MVV_DATUM_AVAILABILITY_ACC AVACC on AVACC.ID = DAT.ID where DAT.DATA_STATE = 2 /* подтверждены */ and AGM.ID in (86151166228062, 86151166227361) union select first 2500 AGM.arrestact_id as GACCOUNT_MONEY_ID, O_IP.IP_ID, O_IP.ID_DBTRCLS as DBTRCLS, O_IP.TOTAL_DEPT_SUM as IP_SUM1, ACC.ID ACC_ID, ACC.BIC_BANK, coalesce(ACC.CURRENCY_CODE, '643') as CURRENCY_CODE, AVACC.SUMMA, AVACC.DEPT_CODE, D.ID as ACT_ID, D.METAOBJECTNAME as DOC_CODE, O_IP.IPNO as IP_NUMBER, O_IP.IP_RISEDATE, D.DOC_NUMBER, D.DOC_DATE, O_IP.ID_DOCNO as ID_NUMBER, /* id_no */ O_IP.ID_DOCDATE, O_IP.IP_EXEC_PRIST_NAME as SPI_FIO, ACC.ACC, O_IP.ID_DBTR_NAME as DEBTOR_NAME, O_IP.ID_DBTR_BORNADR as DEBTOR_BIRTH_PLACE1, O_IP.ID_DBTR_ADR as DEBTOR_ADR, O_IP.ID_DBTR_BORN as DEBTOR_BIRTH_DATE1, O_IP.DBTR_BORN_YEAR as DBTR_BORN_YEAR1 from O_IP_ACT_ENDARREST AGM join O_IP_ACT_ARREST_MONEY AAM on AAM.ID = AGM.ID join O_IP on O_IP.ID = AGM.ID join O on O.ID = AGM.ID join DOCUMENT D on D.ID = AGM.ID join DATUM_LINK_OIP DLO on DLO.DOC_ID = AGM.ID join MVV_DATUM DAT on DAT.ID = DLO.DATUM_ID join MVV_DATUM_ACCOUNT ACC on ACC.ID = DAT.ID join MVV_DATUM_AVAILABILITY_ACC AVACC on AVACC.ID = DAT.ID where DAT.DATA_STATE = 2 /* подтверждены */ and AGM.ID in (86151166228062, 86151166227361) ) order by GACCOUNT_MONEY_ID, ACC_ID, DOC_NUMBER, ACC", "TOFIND", lLogger);
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в Сбер(ReadFedMvvSberEndGaccount).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в Сбер(ReadFedMvvSberEndGaccount).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }


        public DataTable ReadSberOldIpRestrictions(OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;

            try
            {
                // dtRes = GetDataTableFromFB(con, "select ip.id_dbtr_entid as dbtrcls, restr.ID_DATE as id_docdate, coalesce(acc.summa,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE, ip.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key  join doc_ip_doc ip on ip.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (ip.id_dbtr_entid = 2 or (ip.id_dbtr_entid in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2)))", "TOFIND", lLogger);
                // dtRes = GetDataTableFromFB(con, "select COALESCE(o_ip2.ipno, o_ip3.ipno, '') as old_ip_no, ip.old_regnumber, ip.id_dbtr_entid as dbtrcls, restr.ID_DATE as id_docdate, coalesce(acc.summa,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year1, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE, ip.id_dbtr_born) as DEBTOR_BIRTH_DATE1, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE1, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key join doc_ip_doc ip on ip.id = restr.ip_id join o on o.id = restr.act_id join o_ip on o_ip.id = restr.act_id left join document d on d.id = restr.act_id left join o_ip_act_endgaccount_money endgacc on endgacc.id = restr.act_id left join o_ip o_ip2 on endgacc.gaccount_money_id = o_ip2.id left join document d2 on d2.id = endgacc.gaccount_money_id left join o_ip_act_endarrest endarr on endarr.id = restr.act_id left join o_ip o_ip3 on endarr.arrestact_id = o_ip3.id left join document d3 on d3.id = endarr.arrestact_id where (restr.proceed = 0  or (restr.doc_date > '09.05.2016' and restr.doc_date < '01.06.2016')) and o.doc_electron = 1 and (restr.DOC_CODE in (/*'O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY',*/ 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (ip.id_dbtr_entid = 2 or (ip.id_dbtr_entid in (71,95,96,97,666))) and (substring (d.doc_number from 1 for 5) <> substring( COALESCE(d2.doc_number, d3.doc_number, '') from 1 for 5)) order by doc_type_code, doc_number, acc", "TOFIND", lLogger);
                // 20161219 - только те где есть старый номер and (ip.old_regnumber is not null and char_length(ip.old_regnumber) > 0)
                //dtRes = GetDataTableFromFB(con, "select restr.ip_id, COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) as dbtrcls, restr.ID_DATE as id_docdate, coalesce(restr.ip_rest_debtsum,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE,ip.id_dbtr_born,ip2.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr, ip2.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, coalesce(ip.old_regnumber, '') old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key left join doc_ip_doc ip on ip.id = restr.ip_id left join DOC_SV_IP_DEBT ip2 on ip2.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) = 2 or (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and (ip.old_regnumber is not null and char_length(ip.old_regnumber) > 0) order by old_regnumber, doc_type_code, doc_number, acc", "TOFIND", lLogger);
                //20170421 - новый с total_debt_sum
                // dtRes = GetDataTableFromFB(con, "select restr.ip_id, COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) as dbtrcls, restr.ID_DATE as id_docdate, coalesce(restr.total_debt_sum,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE,ip.id_dbtr_born,ip2.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr, ip2.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, coalesce(ip.old_regnumber, '') old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key left join doc_ip_doc ip on ip.id = restr.ip_id left join DOC_SV_IP_DEBT ip2 on ip2.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) = 2 or (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and (ip.old_regnumber is not null and char_length(ip.old_regnumber) > 0) order by old_regnumber, doc_type_code, doc_number, acc", "TOFIND", lLogger);
                //20170425 - нужно добавить выборку отмены ареста и отмены обращения взыскания без галочки В электронном виде
                //dtRes = GetDataTableFromFB(con, "select restr.ip_id, COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) as dbtrcls, restr.ID_DATE as id_docdate, coalesce(restr.total_debt_sum,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE,ip.id_dbtr_born,ip2.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr, ip2.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, coalesce(ip.old_regnumber, '') old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key left join doc_ip_doc ip on ip.id = restr.ip_id left join DOC_SV_IP_DEBT ip2 on ip2.id = restr.ip_id join o on o.id = restr.act_id  where restr.proceed = 0  and ((o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY'))  ) or  (o.doc_electron = 0 and o.out_doc_date > '01.03.2017'and (restr.DOC_CODE in ('O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY'))))    AND restr.AGENT_CODE = 'Б_СБЕР_10' and (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) = 2 or (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and (ip.old_regnumber is not null and char_length(ip.old_regnumber) > 0) order by old_regnumber, doc_type_code, doc_number, acc", "TOFIND", lLogger);
                //20170616 - готовимся к фед. эдо - будем только отмены выгружать в этой сборке
                dtRes = GetDataTableFromFB(con, "select restr.ip_id, COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) as dbtrcls, restr.ID_DATE as id_docdate, coalesce(restr.total_debt_sum,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE,ip.id_dbtr_born,ip2.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr, ip2.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, coalesce(ip.old_regnumber, '') old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key left join doc_ip_doc ip on ip.id = restr.ip_id left join DOC_SV_IP_DEBT ip2 on ip2.id = restr.ip_id join o on o.id = restr.act_id  where restr.proceed = 0  and ((o.doc_electron = 1 and (restr.DOC_CODE in (/*'O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY',*/ 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY'))) or (o.doc_electron = 0 and o.out_doc_date > '01.03.2017'and (restr.DOC_CODE in ('O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY'))))    AND restr.AGENT_CODE = 'Б_СБЕР_10' and (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) = 2 or (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and (ip.old_regnumber is not null and char_length(ip.old_regnumber) > 0) order by old_regnumber, doc_type_code, doc_number, acc", "TOFIND", lLogger);
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в Сбер(ReadSberOldIpRestrictions).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в Сбер(ReadSberOldIpRestrictions).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }

        public DataTable ReadSberRestrictionsOldNumber(OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;

            try
            {
                // dtRes = GetDataTableFromFB(con, "select ip.id_dbtr_entid as dbtrcls, restr.ID_DATE as id_docdate, coalesce(acc.summa,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE, ip.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, restr.*                               from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key  join doc_ip_doc ip on ip.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (ip.id_dbtr_entid = 2 or (ip.id_dbtr_entid in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2)))", "TOFIND", lLogger);

                // выгрузка до 20160830 - добавили поле ip.old_regnumber - старый номер ип
                // dtRes = GetDataTableFromFB(con, "select ip.id_dbtr_entid as dbtrcls, restr.ID_DATE as id_docdate, coalesce(acc.summa,0) as ip_sum1,             restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE, ip.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, ip.old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key  join doc_ip_doc ip on ip.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (ip.id_dbtr_entid = 2 or (ip.id_dbtr_entid in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) order by doc_type_code, doc_number, acc", "TOFIND", lLogger);

                // 20160830 - в новой сборке проблема с суммами - теперь суммы не тянутся со строк ДС - а только с данных постановления
                // теперь сумму буду брать как restr.ip_rest_debtsum

                // это постановление об отмене и (ip.old_regnumber is not null and char_length(ip.old_regnumber) > 0)
                dtRes = GetDataTableFromFB(con, "select ip.id_dbtr_entid as dbtrcls, restr.ID_DATE as id_docdate, coalesce(restr.ip_rest_debtsum,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE, ip.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, ip.old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key  join doc_ip_doc ip on ip.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and((restr.DOC_CODE in ('O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY') and (ip.old_regnumber is not null and char_length(ip.old_regnumber) > 0))) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (ip.id_dbtr_entid = 2 or (ip.id_dbtr_entid in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) order by doc_type_code, doc_number, acc", "TOFIND", lLogger);
                

            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в Сбер(ReadSberRestrictions).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в Сбер(ReadSberRestrictions).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }

        public DataTable ReadSberRestrictionsNoOldNumber(OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;

            try
            {
                // dtRes = GetDataTableFromFB(con, "select ip.id_dbtr_entid as dbtrcls, restr.ID_DATE as id_docdate, coalesce(acc.summa,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE, ip.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, restr.*                               from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key  join doc_ip_doc ip on ip.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (ip.id_dbtr_entid = 2 or (ip.id_dbtr_entid in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2)))", "TOFIND", lLogger);

                // выгрузка до 20160830 - добавили поле ip.old_regnumber - старый номер ип
                // dtRes = GetDataTableFromFB(con, "select ip.id_dbtr_entid as dbtrcls, restr.ID_DATE as id_docdate, coalesce(acc.summa,0) as ip_sum1,             restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE, ip.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, ip.old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key  join doc_ip_doc ip on ip.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (ip.id_dbtr_entid = 2 or (ip.id_dbtr_entid in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) order by doc_type_code, doc_number, acc", "TOFIND", lLogger);

                // 20160830 - в новой сборке проблема с суммами - теперь суммы не тянутся со строк ДС - а только с данных постановления
                // теперь сумму буду брать как restr.ip_rest_debtsum
                
                // или это постановление об обращении взыскания или это отмена и (ip.old_regnumber is null or char_length(ip.old_regnumber) = 0) 
                dtRes = GetDataTableFromFB(con, "select ip.id_dbtr_entid as dbtrcls, restr.ID_DATE as id_docdate, coalesce(restr.ip_rest_debtsum,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE, ip.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, ip.old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key  join doc_ip_doc ip on ip.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY') or (restr.DOC_CODE in ('O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY') and (ip.old_regnumber is null or char_length(ip.old_regnumber) = 0) )) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (ip.id_dbtr_entid = 2 or (ip.id_dbtr_entid in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) order by doc_type_code, doc_number, acc", "TOFIND", lLogger);

            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в Сбер(ReadSberRestrictions).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в Сбер(ReadSberRestrictions).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }

        public DataTable ReadSberRestrictions(OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;

            try
            {
                // dtRes = GetDataTableFromFB(con, "select ip.id_dbtr_entid as dbtrcls, restr.ID_DATE as id_docdate, coalesce(acc.summa,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE, ip.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, restr.*                               from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key  join doc_ip_doc ip on ip.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (ip.id_dbtr_entid = 2 or (ip.id_dbtr_entid in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2)))", "TOFIND", lLogger);

                // выгрузка до 20160830 - добавили поле ip.old_regnumber - старый номер ип
                // dtRes = GetDataTableFromFB(con, "select ip.id_dbtr_entid as dbtrcls, restr.ID_DATE as id_docdate, coalesce(acc.summa,0) as ip_sum1,             restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE, ip.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, ip.old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key  join doc_ip_doc ip on ip.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (ip.id_dbtr_entid = 2 or (ip.id_dbtr_entid in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) order by doc_type_code, doc_number, acc", "TOFIND", lLogger);

                // 20160830 - в новой сборке проблема с суммами - теперь суммы не тянутся со строк ДС - а только с данных постановления
                // теперь сумму буду брать как restr.ip_rest_debtsum
                //dtRes = GetDataTableFromFB(con, "select ip.id_dbtr_entid as dbtrcls, restr.ID_DATE as id_docdate, coalesce(restr.ip_rest_debtsum,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE, ip.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, ip.old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key  join doc_ip_doc ip on ip.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (ip.id_dbtr_entid = 2 or (ip.id_dbtr_entid in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) order by doc_type_code, doc_number, acc", "TOFIND", lLogger);
                
                // dtRes = GetDataTableFromFB(con, "select ip.id_dbtr_entid as dbtrcls, restr.ID_DATE as id_docdate, coalesce(restr.ip_rest_debtsum,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE, ip.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, ip.old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key  join doc_ip_doc ip on ip.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (ip.id_dbtr_entid = 2 or (ip.id_dbtr_entid in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) order by doc_type_code, doc_number, acc", "TOFIND", lLogger);
                //20161207 - новая выборка чтобы попадали сводные по должнику

                // dtRes = GetDataTableFromFB(con, "select restr.ip_id, COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) as dbtrcls, restr.ID_DATE as id_docdate, coalesce(restr.ip_rest_debtsum,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE,ip.id_dbtr_born,ip2.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr, ip2.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, coalesce(ip.old_regnumber, '') old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key left join doc_ip_doc ip on ip.id = restr.ip_id left join DOC_SV_IP_DEBT ip2 on ip2.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) = 2 or (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) order by old_regnumber, doc_type_code, doc_number, acc", "TOFIND", lLogger);

                //  20161219 - оставляем только пустое - нет поля старый номер ИП
                //    and (ip.old_regnumber is null or char_length(ip.old_regnumber) = 0)
                //20170421 - старый вариант с ip_rest_debtsum
                //dtRes = GetDataTableFromFB(con, "select restr.ip_id, COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) as dbtrcls, restr.ID_DATE as id_docdate, coalesce(restr.ip_rest_debtsum,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE,ip.id_dbtr_born,ip2.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr, ip2.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, coalesce(ip.old_regnumber, '') old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key left join doc_ip_doc ip on ip.id = restr.ip_id left join DOC_SV_IP_DEBT ip2 on ip2.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) = 2 or (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and (ip.old_regnumber is null or char_length(ip.old_regnumber) = 0) order by old_regnumber, doc_type_code, doc_number, acc", "TOFIND", lLogger);
                //20170421 - новый с total_debt_sum
                // dtRes = GetDataTableFromFB(con, "select restr.ip_id, COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) as dbtrcls, restr.ID_DATE as id_docdate, coalesce(restr.total_debt_sum,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE,ip.id_dbtr_born,ip2.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr, ip2.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, coalesce(ip.old_regnumber, '') old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key left join doc_ip_doc ip on ip.id = restr.ip_id left join DOC_SV_IP_DEBT ip2 on ip2.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0 and o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY')) AND restr.AGENT_CODE = 'Б_СБЕР_10' and (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) = 2 or (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and (ip.old_regnumber is null or char_length(ip.old_regnumber) = 0) order by old_regnumber, doc_type_code, doc_number, acc", "TOFIND", lLogger);

                //20170425 - нужно добавить выборку отмены ареста и отмены обращения взыскания без галочки В электронном виде
                //dtRes = GetDataTableFromFB(con, "select restr.ip_id, COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) as dbtrcls, restr.ID_DATE as id_docdate, coalesce(restr.total_debt_sum,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE,ip.id_dbtr_born,ip2.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr, ip2.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, coalesce(ip.old_regnumber, '') old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key left join doc_ip_doc ip on ip.id = restr.ip_id left join DOC_SV_IP_DEBT ip2 on ip2.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0  and ((o.doc_electron = 1 and (restr.DOC_CODE in ('O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY', 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY'))  ) or  (o.doc_electron = 0 and o.out_doc_date > '01.03.2017'and (restr.DOC_CODE in ('O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY'))))   AND restr.AGENT_CODE = 'Б_СБЕР_10' and (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) = 2 or (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and (ip.old_regnumber is null or char_length(ip.old_regnumber) = 0) order by old_regnumber, doc_type_code, doc_number, acc", "TOFIND", lLogger);
                //20170616 - готовимся к фед. эдо - будем только отмены выгружать в этой сборке
                dtRes = GetDataTableFromFB(con, "select restr.ip_id, COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) as dbtrcls, restr.ID_DATE as id_docdate, coalesce(restr.total_debt_sum,0) as ip_sum1, restr.dbtr_born_year as dbtr_born_year, acc.id acc_id, acc.bic_bank, coalesce(acc.currency_code,'643') as currency_code, acc.acc, acc.summa, acc.dept_code, coalesce(restr.DEBTOR_BIRTH_DATE,ip.id_dbtr_born,ip2.id_dbtr_born) as DEBTOR_BIRTH_DATE, coalesce(restr.DEBTOR_BIRTH_PLACE, ip.id_dbtr_bornadr, ip2.id_dbtr_bornadr) as DEBTOR_BIRTH_PLACE, coalesce(ip.old_regnumber, '') old_regnumber, restr.* from ext_availability_acc_data acc join EXT_INFORMATION inf on inf.id = acc.id join EXT_RESTRICTION restr on CAST(COALESCE(restr.id, 0) as varchar(60)) = inf.document_key left join doc_ip_doc ip on ip.id = restr.ip_id left join DOC_SV_IP_DEBT ip2 on ip2.id = restr.ip_id join o on o.id = restr.act_id where restr.proceed = 0  and ((o.doc_electron = 1 and (restr.DOC_CODE in (/*'O_IP_ACT_ARREST_ACCMONEY', 'O_IP_ACT_GACCOUNT_MONEY',*/ 'O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY'))  ) or  (o.doc_electron = 0 and o.out_doc_date > '01.03.2017'and (restr.DOC_CODE in ('O_IP_ACT_ENDARREST', 'O_IP_ACT_ENDGACCOUNT_MONEY'))))   AND restr.AGENT_CODE = 'Б_СБЕР_10' and (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) = 2 or (COALESCE(ip.id_dbtr_entid, ip2.id_dbtr_entid, 0) in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2))) and (ip.old_regnumber is null or char_length(ip.old_regnumber) = 0) order by old_regnumber, doc_type_code, doc_number, acc", "TOFIND", lLogger);

            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в Сбер(ReadSberRestrictions).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в Сбер(ReadSberRestrictions).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }

        public DataTable ReadSberZaprosNewFormat(OleDbConnection con, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;

            try
            {
                dtRes = GetDataTableFromFB(con, "select 10 agreement_id, ext_request.req_id as ZAPROS, ext_request.debtor_name as FIOVK, ext_request.pack_id, ext_request.ext_request_id, req.DBTR_BORN_YEAR as GOD, ext_request.debtor_birthdate as DATROZHD, ext_request.spi_id as USER_ID, ext_request.req_date as DATZAPR, ext_request.osp_number as PRS_DEP, ext_request.fio_spi, ext_request.h_spi as FIO_SSPI, ext_request.ip_num as doc_num, COALESCE(ext_request.ip_sum, 0) as SUMMA, ext_request.id_number as ID_NUM, ext_request.id_date as ID_DATE, ext_request.debtor_address as ADDR, COALESCE(ext_request.debtor_birthplace, '') as debtor_birthplace, COALESCE(d.ser_doc,'') as SerDoc, COALESCE(d.num_doc,'') as NumDoc, coalesce(d.date_doc, '01.01.1900') DateDoc, COALESCE(d.code_dep, '') as CodeDep, COALESCE(d.type_doc_code, 0) as TypeDoc, COALESCE(d.fio_doc, '') as FioDoc from ext_request join o_ip req on ext_request.req_id = req.id  join o_ip_req_ip on o_ip_req_ip.id = req.id left join  Mvv_Datum_Identificator d on d.id = O_IP_REQ_IP.DATUM_DOCUMENT_ID where mvv_agreement_code = '10' and processed = 0 and (req.ID_DBTRCLS = 2 or (req.ID_DBTRCLS in (select ncc_id from V_COUNTERPARTY_CLS_PARENT where ncc_parent_id = 2)))", "TOFIND", lLogger);
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в Сбер(ReadSberZaprosNewFormat).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных о запросах в Сбер(ReadSberZaprosNewFormat).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }

        public DataTable ReadRozSudAnswFile(string txtFileFullPath, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;

            try
            {
                // прочитать все строки из XLS файла
                //Strings = ReadPaths(openFileDialog1.FileName, Encoding.UTF8);

                // string txtFileDir = openFileDialog1.FileName.Substring(0, openFileDialog1.FileName.Length - tablename.Length - 4);
                OleDbConnection XLScon = new OleDbConnection();
                XLScon.ConnectionString = string.Format("Provider =Microsoft.Jet.OLEDB.4.0; Data Source =" + txtFileFullPath + "; Extended Properties =\"Excel 8.0;HDR=NO\";");
                XLScon.Open();

                // Получаем список листов в файле
                DataTable schemaTable = XLScon.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, new object[] { null, null, null, "TABLE" });
                string sheet1 = "Лист 1";
                if (schemaTable != null)
                {
                    if (schemaTable.Rows.Count > 0) sheet1 = Convert.ToString(schemaTable.Rows[0]["TABLE_NAME"]);
                }

                OleDbCommand m_cmd = new OleDbCommand();
                m_cmd.Connection = XLScon;
                m_cmd.CommandText = "SELECT * from [" + sheet1 + "]";

                DataSet ds = new DataSet();
                dtRes = ds.Tables.Add("otvet");
                using (OleDbDataReader rdr = m_cmd.ExecuteReader(CommandBehavior.Default))
                {
                    ds.Load(rdr, LoadOption.OverwriteChanges, dtRes);
                    rdr.Close();
                }
                XLScon.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // lLogger.WriteLLog("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных их XLS (ReadRozSudAnswFile).\n");
                lLogger.WriteLLog("Exception: " + ole_ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                lLogger.WriteLLog("Ошибка! Уведомления не удалось загрузить без ошибок.\n");
                lLogger.WriteLLog("Ошибка при чтении данных их XLS (ReadRozSudAnswFile).\n");
                lLogger.WriteLLog("Exception: " + ex.ToString() + "\n");
                // обновить статус лога-ответа
                lLogger.UpdateLLogStatus(11); // ответ загружен с ошибкой
            }

            return dtRes;
        }

        public ArrayList GetLoadedFiles(OleDbConnection ConParam, int iMonthPeriod, string txtAgreement, int nPackType, out string txtErrLog)
        {

            OleDbTransaction tran = null;
            DataSet dsReestr_params;
            DataTable dtReestr_params;
            ArrayList result = new ArrayList();
            txtErrLog = "";

            dsReestr_params = new DataSet();
            dtReestr_params = dsReestr_params.Tables.Add("Reestr_params");


            try
            {

                if ((ConParam == null) || (ConParam.State == ConnectionState.Closed))
                    ConParam.Open();

                tran = ConParam.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmdIP = new OleDbCommand();
                cmdIP.Connection = ConParam;
                cmdIP.Transaction = tran;
                // переписать select по-новому
                // т.к. dialect1 не поддерживает DATEADD, то нужно вычислять смещение по датам самому
                DateTime dtPeriod = DateTime.Today.AddMonths(iMonthPeriod);
                cmdIP.CommandText = "select distinct ll.filename from local_logs ll where ll.pack_type = " + nPackType.ToString() + " and ll.conv_code = '" + txtAgreement + "' and '" + dtPeriod.ToShortDateString() + "' < ll.packdate";
                using (OleDbDataReader rdr = cmdIP.ExecuteReader(CommandBehavior.Default))
                {
                    dsReestr_params.Load(rdr, LoadOption.OverwriteChanges, dtReestr_params);
                    rdr.Close();
                }

                tran.Rollback();
                ConParam.Close();
                string txtStr = "";
                foreach (DataRow dataRow in dtReestr_params.Rows)
                {
                    txtStr = Convert.ToString(dataRow[0]);
                    if (txtStr.Length > 0)
                        result.Add(txtStr);
                }

                return result;

            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    txtErrLog += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                txtErrLog += "Ошибка приложения. Message: " + ex.ToString();
            }
            ConParam.Close();
            return result;
        }


        public ArrayList GetLoadedFiles(OleDbConnection ConParam, int iMonthPeriod, string txtAgreement, int nPackType, Logger_ufssprk_tools lLogger)
        {

            OleDbTransaction tran = null;
            DataSet dsReestr_params;
            DataTable dtReestr_params;
            ArrayList result = new ArrayList();

            dsReestr_params = new DataSet();
            dtReestr_params = dsReestr_params.Tables.Add("Reestr_params");


            try
            {

                if ((ConParam == null) || (ConParam.State == ConnectionState.Closed))
                    ConParam.Open();

                tran = ConParam.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmdIP = new OleDbCommand();
                cmdIP.Connection = ConParam;
                cmdIP.Transaction = tran;
                // переписать select по-новому
                // переписать select по-новому
                // т.к. dialect1 не поддерживает DATEADD, то нужно вычислять смещение по датам самому
                DateTime dtPeriod = DateTime.Today.AddMonths(iMonthPeriod);
                cmdIP.CommandText = "select distinct ll.filename from local_logs ll where ll.pack_type = " + nPackType.ToString() + " and ll.conv_code = '" + txtAgreement + "' and '" + dtPeriod.ToShortDateString() + "' < ll.packdate and ll.pack_status > 1";
                
                // старый вариант
                //cmdIP.CommandText = "select distinct ll.filename from local_logs ll where ll.pack_type = " + nPackType.ToString() + " and ll.conv_code = '" + txtAgreement + "' and DATEADD(" + iMonthPeriod.ToString() + " month to current_date) > ll.packdate";
                using (OleDbDataReader rdr = cmdIP.ExecuteReader(CommandBehavior.Default))
                {
                    dsReestr_params.Load(rdr, LoadOption.OverwriteChanges, dtReestr_params);
                    rdr.Close();
                }

                tran.Rollback();
                ConParam.Close();

                foreach (DataRow dataRow in dtReestr_params.Rows)
                {
                    result.Add(Convert.ToString(dataRow[0]));
                }

                return result;

            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            ConParam.Close();
            return result;
        }

        public ArrayList GetLoadedReestrs(OleDbConnection ConParam, int iContrSource, Logger_ufssprk_tools lLogger)
        {

            OleDbTransaction tran = null;
            DataSet dsReestr_params;
            DataTable dtReestr_params;
            ArrayList result = new ArrayList();

            dsReestr_params = new DataSet();
            dtReestr_params = dsReestr_params.Tables.Add("Reestr_params");


            try
            {

                if ((ConParam == null) || (ConParam.State == ConnectionState.Closed))
                    ConParam.Open();

                tran = ConParam.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmdIP = new OleDbCommand();
                cmdIP.Connection = ConParam;
                cmdIP.Transaction = tran;
                // переписать select по-новому
                cmdIP.CommandText = "select distinct ish_number from GIBDD_PLATEZH where SOURCE_ID = " + iContrSource.ToString();
                using (OleDbDataReader rdr = cmdIP.ExecuteReader(CommandBehavior.Default))
                {
                    dsReestr_params.Load(rdr, LoadOption.OverwriteChanges, dtReestr_params);
                    rdr.Close();
                }

                tran.Rollback();
                ConParam.Close();

                foreach (DataRow dataRow in dtReestr_params.Rows)
                {
                    result.Add(Convert.ToString(dataRow[0]));
                }

                return result;

            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            ConParam.Close();
            return result;
        }

        public DataTable GetSimpleTable()
        {
            //
            // создать табличку данных для вставки в GIBDD_PLATEZH
            //
            DataTable table = new DataTable();
            table.Columns.Add("ID", typeof(decimal));
            table.Columns.Add("CONTENT", typeof(string));

            return table;
        }

        public DataTable GetGibddPlatTable()
        {
            //
            // создать табличку данных для вставки в GIBDD_PLATEZH
            //
            DataTable table = new DataTable();
            table.Columns.Add("NUMBER", typeof(string));
            table.Columns.Add("NOMID", typeof(string));
            table.Columns.Add("DATID", typeof(DateTime));
            table.Columns.Add("SUMM", typeof(decimal));
            table.Columns.Add("SUMM_DOC", typeof(decimal));
            table.Columns.Add("NUM_DOC", typeof(string));
            table.Columns.Add("FIO_D", typeof(string));
            table.Columns.Add("BORN_D", typeof(DateTime));
            table.Columns.Add("DATE_DOC", typeof(DateTime));
            table.Columns.Add("ISH_NUMBER", typeof(string));
            table.Columns.Add("DATE_ISH", typeof(DateTime));
            table.Columns.Add("DATE_VH", typeof(DateTime));
            table.Columns.Add("FL_USE", typeof(int));
            table.Columns.Add("SOURCE_ID", typeof(int));
            table.Columns.Add("PLAT_DESCR", typeof(string));
            table.Columns.Add("ADR_D", typeof(string));
            table.Columns.Add("INN", typeof(string));
            table.Columns.Add("VID_PL", typeof(string));
            
            return table;
        }

        
        public DataTable FillKrcDataToPlatezhTable(DataTable tbl, int iContrSource, string txtIshNumber, DateTime dtDateIsh, Logger_ufssprk_tools lLogger)
        {
            DataTable res = null;
            Int32 iCnt = 0;
            try
            {
                res = GetGibddPlatTable();
                foreach (DataRow row in tbl.Rows)
                {
                    // m_cmd.CommandText += " VALUES(:NUMBER, :NOMID, :DATID, :SUMM, :SUMM_DOC, :FIO_D, :DATE_DOC, :ISH_NUMBER, :DATE_ISH, :FL_USE, :NUM_DOC, :BORN_D, :DATE_VH, :SOURCE_ID, :PLAT_DESCR, :ADR_D)";
                    DataRow newRow = res.NewRow();
                    // заполнить значением генератора
                    newRow["NUMBER"] = Convert.ToString(row["NOM_ID"]).TrimEnd(); // NUMBER и NOMID
                    newRow["NOMID"] = Convert.ToString(row["NOM_ID"]).TrimEnd(); // отличается только у ГИБДД
                    newRow["DATID"] = Convert.ToDateTime(row["DAT_ID"]);
                    newRow["SUMM"] = Convert.ToDouble(row["SUM_OST"]);
                    newRow["SUMM_DOC"] = Convert.ToDouble(row["SUM_PL"]);
                    newRow["NUM_DOC"] = Convert.ToString(row["NUM_DOC"]).TrimEnd();// 
                    newRow["FIO_D"] = "ФИО не указано";
                    newRow["BORN_D"] = Convert.ToDateTime("01.01.1800"); // дата не заполяется
                    newRow["DATE_DOC"] = Convert.ToDateTime(row["DAT_PL"]); // дата оплаты
                    newRow["ISH_NUMBER"] = txtIshNumber.TrimEnd();
                    newRow["DATE_ISH"] = dtDateIsh;
                    newRow["DATE_VH"] = DateTime.Now;
                    newRow["FL_USE"] = Convert.ToInt32(0);
                    newRow["SOURCE_ID"] = iContrSource; // КРЦ = 3
                    newRow["PLAT_DESCR"] = Convert.ToString(row["NAIM_PL"]).TrimEnd() + " оплачено ч/з " + Convert.ToString(row["NBANK"]).TrimEnd(); // долг / госпошлина
                    newRow["ADR_D"] = Convert.ToString(row["ADRES"]).TrimEnd();

                    res.Rows.Add(newRow);
                }
            }catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            return res;
        }


        public DataTable FillPlatezhTableFromTGK1File(string txtCsvFile, int iContrSource, string txtIshNumber, DateTime dtDateIsh, Logger_ufssprk_tools lLogger)
        {
            DataTable res = null;
            Int32 iCnt = 0;
            string[] words;
            ArrayList Strings;
            try
            {
                res = GetGibddPlatTable();
                File_funcs ff = new File_funcs();
                Strings = ff.ReadPaths(txtCsvFile, Encoding.GetEncoding(1251), lLogger);
                for (int i = 0; i < Strings.Count; i++)
                {
                    words = Convert.ToString(Strings[i]).Split(';');
                    if (words.Length == 13) //  д.б. 13 параметров
                    {
                        DataRow newRow = res.NewRow();
                        newRow["NOMID"] = Convert.ToString(words[0]).TrimEnd();
                        newRow["NUMBER"] = Convert.ToString(words[1]).TrimEnd(); // может быть и пустым
                        string txtDate = Convert.ToString(words[2]).TrimEnd();
                        DateTime dtDate = Convert.ToDateTime("01.01.1800");
                        if (txtDate.Length.Equals(0) || !DateTime.TryParse(txtDate, out dtDate))
                        {
                            dtDate = Convert.ToDateTime("01.01.1800");
                        }
                        newRow["DATID"] = dtDate;
                        string txtSum = "";
                        txtSum = Convert.ToString(words[3]).TrimEnd().Replace('.', ',');
                        Double nSum = -1;
                        if (txtSum.Length > 0)
                        {
                            if (!Double.TryParse(txtSum, out nSum))
                                nSum = -1;
                        }
                        newRow["SUMM"] = nSum;
                        newRow["FIO_D"] = Convert.ToString(words[4]).TrimEnd();
                        newRow["ADR_D"] = Convert.ToString(words[5]).TrimEnd();

                        txtDate = Convert.ToString(words[6]).TrimEnd();
                        dtDate = Convert.ToDateTime("01.01.1800");
                        if (txtDate.Length.Equals(0) || !DateTime.TryParse(txtDate, out dtDate))
                        {
                            dtDate = Convert.ToDateTime("01.01.1800");
                        }
                        newRow["BORN_D"] = dtDate; // дата рождения
                        newRow["INN"] = Convert.ToString(words[7]).TrimEnd();
                        newRow["NUM_DOC"] = Convert.ToString(words[8]).TrimEnd();// номер документа об оплате

                        txtDate = Convert.ToString(words[9]).TrimEnd();
                        dtDate = Convert.ToDateTime("01.01.1800");
                        if (txtDate.Length.Equals(0) || !DateTime.TryParse(txtDate, out dtDate))
                        {
                            dtDate = Convert.ToDateTime("01.01.1800");
                        }
                        newRow["DATE_DOC"] = dtDate; // дата оплаты
                        
                        // парсим сумму оплаты
                        txtSum = "";
                        txtSum = Convert.ToString(words[10]).TrimEnd().Replace('.', ',');
                        nSum = -1;
                        if (txtSum.Length > 0)
                        {
                            if (!Double.TryParse(txtSum, out nSum))
                                nSum = -1;
                        }
                        
                        newRow["SUMM_DOC"] = nSum; // Convert.ToDouble(Convert.ToString(words[10]).TrimEnd().Replace('.', ','));

                        newRow["VID_PL"] = Convert.ToString(words[11]).TrimEnd();
                        newRow["PLAT_DESCR"] = Convert.ToString(words[12]).TrimEnd();

                        newRow["ISH_NUMBER"] = txtIshNumber.TrimEnd();
                        newRow["DATE_ISH"] = dtDateIsh;
                        newRow["DATE_VH"] = DateTime.Now;
                        newRow["FL_USE"] = Convert.ToInt32(0);
                        newRow["SOURCE_ID"] = iContrSource; // КЭСК = 4

                        res.Rows.Add(newRow);
                    }
                    else
                    {
                        lLogger.ErrMessage += "\nОшибка! В строке с данными неверное кол-во параметров (д.б. 13).\n Файл: " + txtCsvFile + "\nСтрока :" + i.ToString();
                    }
                }

            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            return res;
        }

        public DataTable FillPlatezhTableFromTGK1File1(string txtCsvFile, int iContrSource, string txtIshNumber, DateTime dtDateIsh, Logger_ufssprk_tools lLogger)
        {
            DataTable res = null;
            Int32 iCnt = 0;
            string[] words;
            ArrayList Strings;
            try
            {
                res = GetGibddPlatTable();
                File_funcs ff = new File_funcs();
                Strings = ff.ReadPaths(txtCsvFile, Encoding.GetEncoding(1251), lLogger);
                for (int i = 0; i < Strings.Count; i++)
                {
                    words = Convert.ToString(Strings[i]).Split(';');
                    if (words.Length == 12) //  д.б. 13 параметров
                    {
                        DataRow newRow = res.NewRow();
                        newRow["NOMID"] = Convert.ToString(words[0]).TrimEnd();
                        newRow["NUMBER"] = Convert.ToString(words[1]).TrimEnd(); // может быть и пустым
                        string txtDate = Convert.ToString(words[2]).TrimEnd();
                        DateTime dtDate = Convert.ToDateTime("01.01.1800");
                        if (txtDate.Length.Equals(0) || !DateTime.TryParse(txtDate, out dtDate))
                        {
                            dtDate = Convert.ToDateTime("01.01.1800");
                        }
                        newRow["DATID"] = dtDate;
                        newRow["SUMM"] = Convert.ToDouble(Convert.ToString(words[3]).TrimEnd().Replace('.', ','));
                        newRow["FIO_D"] = Convert.ToString(words[4]).TrimEnd();
                        newRow["ADR_D"] = Convert.ToString(words[5]).TrimEnd();

                        txtDate = Convert.ToString(words[6]).TrimEnd();
                        dtDate = Convert.ToDateTime("01.01.1800");
                        if (txtDate.Length.Equals(0) || !DateTime.TryParse(txtDate, out dtDate))
                        {
                            dtDate = Convert.ToDateTime("01.01.1800");
                        }
                        newRow["BORN_D"] = dtDate; // дата рождения
                        newRow["INN"] = Convert.ToString(words[7]).TrimEnd();
                        newRow["NUM_DOC"] = Convert.ToString(words[8]).TrimEnd();// номер документа об оплате

                        //txtDate = Convert.ToString(words[9]).TrimEnd();
                        //dtDate = Convert.ToDateTime("01.01.1800");
                        //if (txtDate.Length.Equals(0) || !DateTime.TryParse(txtDate, out dtDate))
                        //{
                        //    dtDate = Convert.ToDateTime("01.01.1800");
                        //}
                        newRow["DATE_DOC"] = DateTime.Today; // дата оплаты временная для теста - т.к. подрядчик ее не передал
                        newRow["SUMM_DOC"] = Convert.ToDouble(Convert.ToString(words[9]).TrimEnd().Replace('.', ','));
                        newRow["VID_PL"] = Convert.ToString(words[10]).TrimEnd();
                        newRow["PLAT_DESCR"] = Convert.ToString(words[11]).TrimEnd();

                        newRow["ISH_NUMBER"] = txtIshNumber.TrimEnd();
                        newRow["DATE_ISH"] = dtDateIsh;
                        newRow["DATE_VH"] = DateTime.Now;
                        newRow["FL_USE"] = Convert.ToInt32(0);
                        newRow["SOURCE_ID"] = iContrSource; // КЭСК = 4

                        res.Rows.Add(newRow);
                    }
                    else
                    {
                        lLogger.ErrMessage += "\nОшибка! В строке с данными неверное кол-во параметров (д.б. 13).\n Файл: " + txtCsvFile + "\nСтрока :" + i.ToString();
                    }
                }

            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            return res;
        }


        public DataTable FillPlatezhTableFromKeskFile(string txtCsvFile, int iContrSource, string txtIshNumber, DateTime dtDateIsh, Logger_ufssprk_tools lLogger)
        {
            DataTable res = null;
            Int32 iCnt = 0;
            string[] words;
            ArrayList Strings;
            try
            {
                res = GetGibddPlatTable();
                File_funcs ff = new File_funcs();
                Strings = ff.ReadPaths(txtCsvFile, Encoding.GetEncoding(1251), lLogger);
                for(int i = 0; i < Strings.Count; i++){
                    words = Convert.ToString(Strings[i]).Split(';');
                    if (words.Length == 13) //  д.б. 13 параметров
                    {
                        DataRow newRow = res.NewRow();
                        newRow["NOMID"] = Convert.ToString(words[0]).TrimEnd();
                        newRow["NUMBER"] = Convert.ToString(words[1]).TrimEnd(); // может быть и пустым
                        string txtDate = Convert.ToString(words[2]).TrimEnd();
                        DateTime dtDate = Convert.ToDateTime("01.01.1800");
                        if (txtDate.Length.Equals(0) || !DateTime.TryParse(txtDate, out dtDate))
                        {
                            dtDate = Convert.ToDateTime("01.01.1800");
                        }
                        newRow["DATID"] = dtDate;
                        newRow["SUMM"] = Convert.ToDouble(Convert.ToString(words[3]).TrimEnd().Replace('.', ','));
                        newRow["FIO_D"] = Convert.ToString(words[4]).TrimEnd();
                        newRow["ADR_D"] = Convert.ToString(words[5]).TrimEnd();
                        
                        txtDate = Convert.ToString(words[6]).TrimEnd();
                        dtDate = Convert.ToDateTime("01.01.1800");
                        if (txtDate.Length.Equals(0) || !DateTime.TryParse(txtDate, out dtDate))
                        {
                            dtDate = Convert.ToDateTime("01.01.1800");
                        }
                        newRow["BORN_D"] = dtDate; // дата рождения
                        newRow["INN"] = Convert.ToString(words[7]).TrimEnd();
                        newRow["NUM_DOC"] = Convert.ToString(words[8]).TrimEnd();// номер документа об оплате
                        
                        txtDate = Convert.ToString(words[9]).TrimEnd();
                        dtDate = Convert.ToDateTime("01.01.1800");
                        if (txtDate.Length.Equals(0) || !DateTime.TryParse(txtDate, out dtDate))
                        {
                            dtDate = Convert.ToDateTime("01.01.1800");
                        }
                        newRow["DATE_DOC"] = dtDate; // дата оплаты
                        newRow["SUMM_DOC"] = Convert.ToDouble(Convert.ToString(words[10]).TrimEnd().Replace('.', ','));
                        newRow["VID_PL"] = Convert.ToString(words[11]).TrimEnd();
                        newRow["PLAT_DESCR"] = Convert.ToString(words[12]).TrimEnd();

                        newRow["ISH_NUMBER"] = txtIshNumber.TrimEnd();
                        newRow["DATE_ISH"] = dtDateIsh;
                        newRow["DATE_VH"] = DateTime.Now;
                        newRow["FL_USE"] = Convert.ToInt32(0);
                        newRow["SOURCE_ID"] = iContrSource; // КЭСК = 4

                        res.Rows.Add(newRow);
                    }
                    else
                    {
                        lLogger.ErrMessage += "\nОшибка! В строке с данными неверное кол-во параметров (д.б. 13).\n Файл: " + txtCsvFile + "\nСтрока :" + i.ToString();
                    }
                }
               
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            return res;
        }


        public DataTable FillMvdDataToPlatezhTable(DataTable tbl, int iContrSource, string txtIshNumber, DateTime dtDateIsh, string txtPath, Logger_ufssprk_tools lLogger)
        {
            File_funcs ff = new File_funcs();
            DataTable res = null;
            Int32 iCnt = 0;
            string txtId = "";
            MatchCollection myMatchColl;
            Regex regex_new_number = new Regex("^(011\\d{2}201\\d{8})", RegexOptions.Singleline | RegexOptions.CultureInvariant | RegexOptions.Compiled);
            try
            {
                res = GetGibddPlatTable();
                foreach (DataRow row in tbl.Rows)
                {
                    // m_cmd.CommandText += " VALUES(:NUMBER, :NOMID, :DATID, :SUMM, :SUMM_DOC, :FIO_D, :DATE_DOC, :ISH_NUMBER, :DATE_ISH, :FL_USE, :NUM_DOC, :BORN_D, :DATE_VH, :SOURCE_ID, :PLAT_DESCR, :ADR_D)";
                    string txtNumber = Convert.ToString(row["Number"]).TrimEnd();
                    txtId = txtNumber;// для вывода ID строки в отладку ошибки

                    string txtGibddIDNumber = "";

                    // теперь новая беда - не все номера которые длинее 7 симовлов нужно обрезать
                    // точнее так есть те, которые обрезать точно не нужно:
                    // длина 16 символов
                    // (p.number like '011__201%') or (p.number like '18810%')) and CHAR_LENGTH(number) = 16

                    myMatchColl = regex_new_number.Matches(txtNumber);

                    if ((myMatchColl.Count > 0) || (txtNumber.StartsWith("18810")) && txtNumber.Length == 16)
                    {
                        txtGibddIDNumber = txtNumber; // если это новый номер ГИБДД то ничего обрезать не нужно
                    }
                    else
                    {
                        // это старые номера
                        if ((iContrSource == 1) && (txtNumber.Length > 7))
                        {
                            txtGibddIDNumber = txtNumber.Substring(1, 7);
                        }
                        else 
                        {
                            txtGibddIDNumber = txtNumber;
                        }
                        
                        //  если это не реестр из МВД, то никакого номера обрезать не нужно
                        if ((iContrSource == 1) && (txtGibddIDNumber[0] == '0'))
                        {
                            txtGibddIDNumber = txtGibddIDNumber.Substring(1, 6);
                        }
                    }

                    string txtDatID = Convert.ToString(row["Date_exec"]);
                    DateTime dtDatID;
                    if (!DateTime.TryParse(txtDatID, out dtDatID))
                    {
                        dtDatID = DateTime.MinValue;
                    }

                    Double nSum;
                    string txtSum = Convert.ToString(row["Summa"]);


                    
                    string txtDateDoc = Convert.ToString(row["Date_doc"]);
                    DateTime dtDateDoc;
                    if (!DateTime.TryParse(txtDateDoc, out dtDateDoc))
                    {
                        dtDateDoc = DateTime.MinValue;
                    }

                    string txtFioD = "";
                    txtFioD = Convert.ToString((row["Plat_name"])).Trim().ToUpper();
                    char c = txtFioD[0];
                    if (!(c == '\u0401' || c == '\u0451'// буква Ё, ё - '\u0401', '\u0451'
                        || (c >= '\u0410' && c <= '\u0450') // c >='\u0410' && c <= '\u0450' - большие и маленькие буквы кириллицы
                        || (c >= '\u0000' && c <= '\u007F'))) // c >='\u0000' && c <= '\u007F' - базовый англ алфавит и символы с цифрами
                    {
                        // значит пробуем перекодировать из DOS в WIN
                        // можно попробовать тупо прочитать из DBF через  CPCONVERT(866,1251,...)
                        string txtSql = "SELECT CPCONVERT(866,1251, Plat_name) as Plat_name FROM " + txtIshNumber + " WHERE RTRIM(NUMBER) = '" + txtNumber + "'";
                        DataTable tblReestr = null;
                        tblReestr = ReadDbfFile(txtPath, 4, txtSql, lLogger);
                        if(tblReestr != null && tblReestr.Rows.Count > 0){
                            DataRow encRow = tblReestr.Rows[0];
                            txtFioD = Convert.ToString((encRow["Plat_name"])).Trim().ToUpper();
                        }
                    }
                    
                    // так не работает
                    // добавляем проверку кодировки
                    //if (dtDatID == Convert.ToDateTime("26.01.2016"))
                    //{
                    //    var enc = Encoding.GetEncoding(1251);
                    //    byte[] bytes = enc.GetBytes((string)row["Plat_name"]);
                    //    txtFioD = enc.GetString(bytes).Trim();
                    //}


                    // Reconstruct the bytes (Windows Latin-1, Western Europe)
                    
                    // TODO: нужно убрать все двойные пробелы из txtFioD, т.к там может быть бардак
                    txtFioD = ff.RemoveDoubleSpaces(txtFioD, 200);
                    // и в верхний регистр букв
                    txtFioD = txtFioD.ToUpper();



                    string txtNumDoc = Convert.ToString(row["Num_doc"]).TrimEnd().ToUpper();

                    string txtBornD = Convert.ToString(row["Date_plat"]);
                    DateTime dtBornD;

                    if (!DateTime.TryParse(txtBornD, out dtBornD))
                    {
                        dtBornD = Convert.ToDateTime("01.01.1800");
                    }

                    Double nSumDoc;
                    string txtSumDoc = Convert.ToString(row["Summa_doc"]);

                    

                    if (!Double.TryParse(txtSum, out nSum))
                    {
                        nSum = -1;
                    }


                    if (!Double.TryParse(txtSumDoc, out nSumDoc))
                    {
                        nSumDoc = -1;
                    }

                    DataRow newRow = res.NewRow();
                    newRow["NUMBER"] = txtNumber.TrimEnd(); // NUMBER и NOMID
                    newRow["NOMID"] = txtGibddIDNumber.TrimEnd(); // отличается только у ГИБДД
                    newRow["DATID"] = dtDatID;
                    newRow["SUMM"] = nSum;
                    newRow["SUMM_DOC"] = nSumDoc;
                    newRow["NUM_DOC"] = txtNumDoc;
                    newRow["FIO_D"] = txtFioD;
                    newRow["BORN_D"] = dtBornD;
                    newRow["DATE_DOC"] = dtDateDoc; // дата оплаты
                    newRow["ISH_NUMBER"] = txtIshNumber.TrimEnd();
                    newRow["DATE_ISH"] = dtDateIsh;
                    newRow["DATE_VH"] = DateTime.Now;
                    newRow["FL_USE"] = Convert.ToInt32(0);
                    newRow["SOURCE_ID"] = iContrSource; // МВД = 1
                    newRow["PLAT_DESCR"] = ""; // штраф - не заполняется отправителем
                    newRow["ADR_D"] = ""; // - не заполняется отправителем

                    res.Rows.Add(newRow);
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            return res;
        }

        public DataTable FillRicZHDataToPlatezhTable(DataTable tbl, int iContrSource, string txtIshNumber, DateTime dtDateIsh, Logger_ufssprk_tools lLogger)
        {
            DataTable res = null;
            Int32 iCnt = 0;
            try
            {
                res = GetGibddPlatTable();
                foreach (DataRow row in tbl.Rows)
                {
                    // m_cmd.CommandText += " VALUES(:NUMBER, :NOMID, :DATID, :SUMM, :SUMM_DOC, :FIO_D, :DATE_DOC, :ISH_NUMBER, :DATE_ISH, :FL_USE, :NUM_DOC, :BORN_D, :DATE_VH, :SOURCE_ID, :PLAT_DESCR, :ADR_D)";
                    DataRow newRow = res.NewRow();
                    newRow["NUMBER"] = Convert.ToString(row["NOM_ID"]).TrimEnd(); // NUMBER и NOMID
                    newRow["NOMID"] = Convert.ToString(row["NOM_ID"]).TrimEnd(); // отличается только у ГИБДД
                    newRow["DATID"] = Convert.ToDateTime(row["DAT_ID"]);
                    newRow["SUMM"] = Convert.ToDouble(row["SUM_OST"]);
                    newRow["SUMM_DOC"] = Convert.ToDouble(row["SUM_PL"]);
                    newRow["NUM_DOC"] = Convert.ToString(row["NUM_DOK"]).TrimEnd(); //  +" ч/з " + Convert.ToString(row["NBANK"]).TrimEnd();
                    newRow["FIO_D"] = "ФИО не указано";
                    newRow["BORN_D"] = Convert.ToDateTime("01.01.1800"); // дата не заполяется
                    newRow["DATE_DOC"] = Convert.ToDateTime(row["DAT_PL"]); // дата оплаты
                    newRow["ISH_NUMBER"] = txtIshNumber.TrimEnd();
                    newRow["DATE_ISH"] = dtDateIsh;
                    newRow["DATE_VH"] = DateTime.Now;
                    newRow["FL_USE"] = Convert.ToInt32(0);
                    newRow["SOURCE_ID"] = iContrSource; // КРЦ = 3
                    newRow["PLAT_DESCR"] = Convert.ToString(row["NAIM_PL"]).TrimEnd() + " оплачено ч/з " + Convert.ToString(row["NBANK"]).TrimEnd(); ; // долг / госпошлина
                    newRow["ADR_D"] = Convert.ToString(row["ADRES"]).TrimEnd();

                    res.Rows.Add(newRow);
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
            }
            return res;
        }


        // если txtSql оставить "", то будет автоматом select * from tablename
        public DataTable ReadDbfFile(string txtPath, int nExtLength, string txtSql, Logger_ufssprk_tools lLogger)
        {
            File_funcs ff = new File_funcs();
            OleDbConnection DBFcon = null;
            OleDbCommand m_cmd = null;
            DataSet ds = null;
            DataTable tbl = null;

            try
            {
                string tablename = ff.GetTablename(txtPath, nExtLength);
                string txtFileDir = ff.GetFileDir(txtPath, nExtLength);

                ds = new DataSet();
                tbl = ds.Tables.Add(tablename);

                //  ChangeByte(openFileDialog1.FileName, 0x65, 30);
                DBFcon = new OleDbConnection();
                //DBFcon.ConnectionString = string.Format("Provider=VFPOLEDB.1;Data Source=" + openFileDialog1.FileName + ";Mode=Read;Collating Sequence=RUSSIAN;CODEPAGE=1251");
                DBFcon.ConnectionString = string.Format("Provider=VFPOLEDB.1;Data Source=" + txtPath + ";Mode=Read;Collating Sequence=RUSSIAN");
                DBFcon.Open();
                m_cmd = new OleDbCommand();
                m_cmd.Connection = DBFcon;
                if (txtSql.Length.Equals(0))
                    m_cmd.CommandText = "SELECT * FROM " + tablename;
                else m_cmd.CommandText = txtSql;
                using (OleDbDataReader rdr = m_cmd.ExecuteReader(CommandBehavior.Default))
                {
                    ds.Load(rdr, LoadOption.OverwriteChanges, tbl);
                    rdr.Close();
                }

                DBFcon.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage +="Ошибка при работе с данными. Будет предпринята повторная попытка обработать файл. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }

            return tbl;
        }

        public Int32 InsertPlatTable(DataTable tbl, OleDbConnection conGIBDD, int iContrSource, string txtIshNumber, DateTime dtDateIsh, Logger_ufssprk_tools lLogger)
        {
            Int32 iCnt = 0;
            OleDbTransaction tran = null;
            OleDbCommand m_cmd;
            string txtId = "";

            File_funcs ff = new File_funcs();
            
            try
            {
                // проверить подключение - а то может статься что не закрыли
                if (conGIBDD != null && conGIBDD.State != ConnectionState.Closed) conGIBDD.Close();

                conGIBDD.Open();
                tran = conGIBDD.BeginTransaction(IsolationLevel.ReadCommitted);

                foreach (DataRow row in tbl.Rows)
                {

                    m_cmd = new OleDbCommand();
                    m_cmd.Connection = conGIBDD;
                    m_cmd.Transaction = tran;
                    m_cmd.CommandText = "INSERT INTO GIBDD_PLATEZH (NUMBER, NOMID, DATID, SUMM, SUMM_DOC, NUM_DOC, FIO_D, BORN_D, DATE_DOC, ISH_NUMBER, DATE_ISH, DATE_VH, FL_USE, SOURCE_ID, PLAT_DESCR, ADR_D, VID_PL, INN)";
                    m_cmd.CommandText += " VALUES(:NUMBER, :NOMID, :DATID, :SUMM, :SUMM_DOC, :NUM_DOC, :FIO_D, :BORN_D, :DATE_DOC, :ISH_NUMBER, :DATE_ISH, :DATE_VH, :FL_USE, :SOURCE_ID, :PLAT_DESCR, :ADR_D, :VID_PL, :INN)";

                    string txtNumber = cutEnd(Convert.ToString(row["NUMBER"]), 40);
                    string txtNomId = txtNumber;
                    txtId = txtNumber;// для вывода ID строки в отладку ошибки
                    
                    // если это КЭСК - то есть и номер ИД и номер ИП
                    // Number - номер ИП; NomID = Номер ИД
                    if (iContrSource == 6)
                    {
                        txtNomId = cutEnd(Convert.ToString(row["NOMID"]), 40);
                        txtId = txtNomId;
                    }
                    
                    
                    
                    
                    m_cmd.Parameters.Add(new OleDbParameter(":NUMBER", txtNumber));
                    m_cmd.Parameters.Add(new OleDbParameter(":NOMID", txtNomId));
                    m_cmd.Parameters.Add(new OleDbParameter(":DATID", Convert.ToDateTime(row["DATID"]))); // Дата ИД
                    m_cmd.Parameters.Add(new OleDbParameter(":SUMM", Convert.ToDouble(row["SUMM"])));     // Сумма ИД
                    m_cmd.Parameters.Add(new OleDbParameter(":SUMM_DOC", Convert.ToDouble(row["SUMM_DOC"])));   //Сумма оплаты
                    m_cmd.Parameters.Add(new OleDbParameter(":NUM_DOC", cutEnd(Convert.ToString(row["NUM_DOC"]), 40)));   // номер квитанции
                    
                    string txtFioD = Convert.ToString(row["FIO_D"]).Trim();
                    txtFioD = ff.RemoveDoubleSpaces(txtFioD, 100);
                    
                    m_cmd.Parameters.Add(new OleDbParameter(":FIO_D", cutEnd(txtFioD, 160)));
                    m_cmd.Parameters.Add(new OleDbParameter(":BORN_D", Convert.ToDateTime(row["BORN_D"])));   // дата рождения должника
                    m_cmd.Parameters.Add(new OleDbParameter(":DATE_DOC", Convert.ToDateTime(row["DATE_DOC"]))); // Дата оплаты
                    m_cmd.Parameters.Add(new OleDbParameter(":ISH_NUMBER", cutEnd(Convert.ToString(row["ISH_NUMBER"]), 100)));   // исх номер
                    m_cmd.Parameters.Add(new OleDbParameter(":DATE_ISH", Convert.ToDateTime(row["DATE_ISH"])));   // дата исх 
                    m_cmd.Parameters.Add(new OleDbParameter(":DATE_VH", Convert.ToDateTime(row["DATE_VH"])));   // дата загрузки реестра
                    m_cmd.Parameters.Add(new OleDbParameter(":FL_USE", Convert.ToInt32(row["FL_USE"])));   // флаг - учтен/неучтен
                    m_cmd.Parameters.Add(new OleDbParameter(":SOURCE_ID", Convert.ToInt32(row["SOURCE_ID"])));   // источник - 1 МВД РК
                    m_cmd.Parameters.Add(new OleDbParameter(":PLAT_DESCR", cutEnd(Convert.ToString(row["PLAT_DESCR"]), 250)));   // вид платежа
                    m_cmd.Parameters.Add(new OleDbParameter(":ADR_D", cutEnd(Convert.ToString(row["ADR_D"]), 250)));   // адрес должника
                    
                    m_cmd.Parameters.Add(new OleDbParameter(":VID_PL", cutEnd(Convert.ToString(row["VID_PL"]), 20)));   // вид платежа
                    m_cmd.Parameters.Add(new OleDbParameter(":INN", cutEnd(Convert.ToString(row["INN"]), 12)));   // ИНН

                    int result = m_cmd.ExecuteNonQuery();

                    if (result != -1)
                    {
                        iCnt++;
                        //prbWritingDBF.PerformStep();
                    }
                }
                tran.Commit();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Номер строки = " + txtId + ". Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    //MessageBox.Show("Ошибка при работе с данными. Номер строки = " + txtId + ". Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                }
                if (tran != null)
                {
                    tran.Rollback();
                    iCnt = 0; // т.к. ни одной строки не загрузили
                }
            }
            catch (Exception ex)
            {
                //if (DBFcon != null) DBFcon.Close();
                lLogger.ErrMessage += "Ошибка приложения. Номер строки = " + txtId + ". Message: " + ex.ToString();
                iCnt = 0; // т.к. ни одной строки не загрузили
                //return false; 
            }
            
            conGIBDD.Close();
            return iCnt;
        }

        private DataTable RecFindIDNumInn(OleDbConnection con, string txtNumber, double nSumID, DateTime dtDatID, string txtInn, int nSqlType, int day, Logger_ufssprk_tools lLogger)
        {
            OleDbTransaction tran;
            string txtSql = "";
            decimal res = -1;
            DataTable dtRes = null;
            string txtTrimmedNum = "";
            if (nSqlType > 2) //  остальные варианты просто пока сократим
            {
                return dtRes;
            }
            try
            {
                // if (txtFullNom.Length.Equals(16)) txtTrimmedNum = txtFullNom.TrimStart('0');
                // TODO: нужно решить - будем ли мы пытаться добавлять 0, если номер имеет 14-15 знаков
                // такой критерий не кажется удачным - нужно будет придумать что-то получше, наверное

                txtSql = "select first 1 /* p.number, p.nomid, p.datid, p.fio_d, p.summ, */ p.* from gibdd_platezh p ";

                switch (nSqlType)
                {
                    case 1:
                        // CREATE INDEX I_ID_IDX_ID_DOC_NO ON I_ID (ID_DOCNO)
                        // if (txtFullNom.Length.Equals(16)) txtTrimmedNum = txtFullNom.TrimStart('0');
                        // - Полный или обрезанный номер ИД
                        // - дата ИД
                        // - ФИО должника
                        // txtNumber, double nSumID, DateTime dtDatID, string txtNameDolg, int nSqlType
                        txtSql += " where (p.number = '" + txtNumber + "' or p.nomid = '" + txtNumber + "'";
                        if (txtNumber.Length < 16)
                        {
                            txtSql += "  or p.number = '" + txtNumber.PadLeft(16, '0') + "'";
                        }
                        txtSql += ")";
                        txtSql += " and p.datid = '" + dtDatID.ToShortDateString() + "'";
                        txtSql += " and p.fio_d starting with '" + txtInn + "'";

                        // txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where  (i_id.debtcls in (22, 37, 38, 45)) and (d.docstatusid != -1) and (i_id.id_docno = '" + txtFullNom + "' or i_id.id_docno = '" + txtTrimmedNum + "')" + " and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "' and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        break;

                    case 2:
                        // - Полный или обрезанный номер ИД
                        // - ФИО должника
                        txtSql += " where (p.number = '" + txtNumber + "' or p.nomid = '" + txtNumber + "'";
                        if (txtNumber.Length < 16)
                        {
                            txtSql += "  or p.number = '" + txtNumber.PadLeft(16, '0') + "'";
                        }
                        txtSql += ")";
                        txtSql += " and p.fio_d starting with '" + txtInn + "'";

                        //txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where  (i_id.debtcls in (22, 37, 38, 45)) and (d.docstatusid != -1) and (i_id.id_docno = '" + txtFullNom + "' or i_id.id_docno = '" + txtTrimmedNum + "')" + " and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        break;

                    default:
                        break;
                }

                txtSql += " and p.fl_use = 0";
                txtSql += " and p.source_id = 1";

                // работать только если заполнен SQL
                if (txtSql.Length > 129) // больше не м.б. 0 - это минимальная длина
                {
                    if (con != null && con.State != ConnectionState.Closed) con.Close();
                    con.Open();
                    tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                    OleDbCommand cmd = new OleDbCommand(txtSql, con, tran);

                    DataSet ds = new DataSet();
                    dtRes = ds.Tables.Add("result");
                    using (OleDbDataReader rdr = cmd.ExecuteReader(CommandBehavior.Default))
                    {
                        ds.Load(rdr, LoadOption.OverwriteChanges, dtRes);
                        rdr.Close();
                    }

                    // res = Convert.ToDecimal(cmd.ExecuteScalar());

                    tran.Rollback();
                    con.Close();
                }
            }
            catch (OleDbException ole_ex)
            {
                //if (tran != null) {
                //tran.Rollback();
                //}

                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }


            if (con != null)
            {
                con.Close();
            }

            // рекурсия
            if ((dtRes == null) || (dtRes.Rows.Count == 0))
            {
                return RecFindIDNumInn(con, txtNumber, nSumID, dtDatID, txtInn, nSqlType + 1, day, lLogger);
            }
            else return dtRes;
        }

        private DataTable RecFindIDNumMVD2(OleDbConnection con, string txtNumber, double nSumID, DateTime dtDatID, string txtNameDolg, int nSqlType, int day, Logger_ufssprk_tools lLogger)
        {
            OleDbTransaction tran;
            string txtSql = "";
            decimal res = -1;
            DataTable dtRes = null;
            string txtTrimmedNum = "";
            if (nSqlType > 5) //  остальные варианты просто пока сократим
            {
                return dtRes;
            }
            try
            {
                // if (txtFullNom.Length.Equals(16)) txtTrimmedNum = txtFullNom.TrimStart('0');
                // TODO: нужно решить - будем ли мы пытаться добавлять 0, если номер имеет 14-15 знаков
                // такой критерий не кажется удачным - нужно будет придумать что-то получше, наверное
                
                txtSql = "select first 1 /* p.number, p.nomid, p.datid, p.fio_d, p.summ, */ p.* from gibdd_platezh p ";

                switch (nSqlType)
                {
                    case 1:
                        // CREATE INDEX I_ID_IDX_ID_DOC_NO ON I_ID (ID_DOCNO)
                        // if (txtFullNom.Length.Equals(16)) txtTrimmedNum = txtFullNom.TrimStart('0');
                        // - Полный или обрезанный номер ИД
                        // - дата ИД
                        // - ФИО должника
                        // txtNumber, double nSumID, DateTime dtDatID, string txtNameDolg, int nSqlType
                        txtSql += " where (p.number = '" + txtNumber + "' or p.nomid = '" + txtNumber + "'";
                        if (txtNumber.Length < 16)
                        {
                            txtSql += "  or p.number = '" + txtNumber.PadLeft(16, '0') + "'"; 
                        }
                        txtSql += ")";
                        txtSql += " and p.datid = '" + dtDatID.ToShortDateString() + "'";
                        txtSql += " and UPPER(p.fio_d) = '" + txtNameDolg.ToUpper() + "'";
 
                        // txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where  (i_id.debtcls in (22, 37, 38, 45)) and (d.docstatusid != -1) and (i_id.id_docno = '" + txtFullNom + "' or i_id.id_docno = '" + txtTrimmedNum + "')" + " and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "' and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        break;

                    case 2:
                        // - Полный или обрезанный номер ИД
                        // - ФИО должника
                        txtSql += " where (p.number = '" + txtNumber + "' or p.nomid = '" + txtNumber + "'";
                        if (txtNumber.Length < 16)
                        {
                            txtSql += "  or p.number = '" + txtNumber.PadLeft(16, '0') + "'";
                        }
                        txtSql += ")";
                        txtSql += " and UPPER(p.fio_d) = '" + txtNameDolg.ToUpper() + "'";
                        //txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where  (i_id.debtcls in (22, 37, 38, 45)) and (d.docstatusid != -1) and (i_id.id_docno = '" + txtFullNom + "' or i_id.id_docno = '" + txtTrimmedNum + "')" + " and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        break;

                    case 3:
                        // - Полный или обрезанный номер ИД
                        // - дата ИД
                        txtSql += " where (p.number = '" + txtNumber + "' or p.nomid = '" + txtNumber + "'";
                        if (txtNumber.Length < 16)
                        {
                            txtSql += "  or p.number = '" + txtNumber.PadLeft(16, '0') + "'";
                        }
                        txtSql += ")";
                        txtSql += " and p.datid = '" + dtDatID.ToShortDateString() + "'";

                        // txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where  (i_id.debtcls in (22, 37, 38, 45)) and (d.docstatusid != -1) and (i_id.id_docno = '" + txtFullNom + "' or i_id.id_docno = '" + txtTrimmedNum + "')" + " and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "'";
                        break;
                    case 4:
                        // - Полный или обрезанный номер ИД
                        txtSql += " where (p.number = '" + txtNumber + "' or p.nomid = '" + txtNumber + "'";
                        if (txtNumber.Length < 16)
                        {
                            txtSql += "  or p.number = '" + txtNumber.PadLeft(16, '0') + "'";
                        }
                        txtSql += ")";
                        
                        // txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where  (i_id.debtcls in (22, 37, 38, 45)) and (d.docstatusid != -1) and (i_id.id_docno = '" + txtFullNom + "' or i_id.id_docno = '" + txtTrimmedNum + "')";
                        break;

                    case 5:
                        //  - по короткому номеру ИД, дате ИД, сумме ИД
                        txtSql += " where (p.number = '" + txtNumber + "' or p.nomid = '" + txtNumber + "'";
                        if (txtNumber.Length < 16)
                        {
                            txtSql += "  or p.number = '" + txtNumber.PadLeft(16, '0') + "'";
                        }
                        txtSql += ")";
                        txtSql += " and p.datid = '" + dtDatID.ToShortDateString() + "'";
                        txtSql += " and p.summ  = " + nSumID.ToString().Replace(',', '.');
 
                        //txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where      ((i_id.debtcls = 22) or (i_id.debtcls = 37) or (i_id.debtcls = 38) or (i_id.debtcls = 45)) and (d.docstatusid != -1) and i_id.debtsum = " + nSumID.ToString().Replace(',', '.') + " and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "' and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "'";
                        break;

                    default:
                        break;
                }

                txtSql += " and p.fl_use = 0";
                txtSql += " and p.source_id = 1";

                // работать только если заполнен SQL
                if (txtSql.Length > 129) // больше не м.б. 0 - это минимальная длина
                {
                    if (con != null && con.State != ConnectionState.Closed) con.Close();
                    con.Open();
                    tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                    OleDbCommand cmd = new OleDbCommand(txtSql, con, tran);

                    DataSet ds = new DataSet();
                    dtRes = ds.Tables.Add("result");
                    using (OleDbDataReader rdr = cmd.ExecuteReader(CommandBehavior.Default))
                    {
                        ds.Load(rdr, LoadOption.OverwriteChanges, dtRes);
                        rdr.Close();
                    }

                    // res = Convert.ToDecimal(cmd.ExecuteScalar());

                    tran.Rollback();
                    con.Close();
                }
            }
            catch (OleDbException ole_ex)
            {
                //if (tran != null) {
                //tran.Rollback();
                //}

                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }


            if (con != null)
            {
                con.Close();
            }

            // рекурсия
            if ((dtRes == null) || (dtRes.Rows.Count == 0))
            {
                return RecFindIDNumMVD2(con, txtNumber, nSumID, dtDatID, txtNameDolg, nSqlType + 1, day, lLogger);
            }
            else return dtRes;
        }

        private decimal RecFindIDNumMVD(OleDbConnection con, string txtFullNom, string txtNomID, double nSumID, DateTime dtDatID, string txtNameDolg, int nSqlType, int day, Logger_ufssprk_tools lLogger)
        {
            OleDbTransaction tran;
            string txtSql = "";
            decimal res = -1;
            string txtTrimmedNum = "";
            if (nSqlType > 5) //  остальные варианты просто пока сократим
            {
                return res;
            }
            try
            {

                // старый SQL
                // txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where      ((i_id.debtcls = 22) or (i_id.debtcls = 37) or (i_id.debtcls = 38) or (i_id.debtcls = 45)) and (d.docstatusid != -1) and i_id.debtsum = " + nSumID.ToString().Replace(',', '.') + " and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "' and i_id.id_docno = '" + Convert.ToString(txtNomID) + "'";

                // предлагаю разработать новый вариант:
                // 1. поиск по полному номеру ГИБДД (отрезать 0 в начале если он есть)
                // 2. по короткому номеру ИД, дате ИД, сумме ИД
                // 3. проверять через LIKE %короткий номер ИД% дате ИД, сумме ИД
                // 4. по LIKE %короткий номер ИД% сумме ИД, ФИО должника
                // 5. по сумме ИД, ФИО должника, дате ИД

                // на четверг назначаем ультрабыструю сверку только по прямому попаданию

                // взыскатель - МВД
                // в четверг только 1 и 2 работают, остальные отдыхают
                if (txtFullNom.Length.Equals(16)) txtTrimmedNum = txtFullNom.TrimStart('0');

                switch (nSqlType)
                {
                    case 1:
                        // полный номер ИД (с обрезанием первых незначащих 0)
                        // в связи с тем, что ФИО должника тоже очень нужно, то сначала хотя бы номер + дата + ФИО
                        // потом номер + ФИО
                        // потом номер + дата

                        // CREATE INDEX I_ID_IDX_ID_DOC_NO ON I_ID (ID_DOCNO)

                        if (txtFullNom.Length.Equals(16)) txtTrimmedNum = txtFullNom.TrimStart('0');
                        //txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where  (i_id.debtcls in (22, 37, 38, 45)) and (d.docstatusid != -1) and (i_id.id_docno = '" + txtFullNom + "' or i_id.id_docno = '" + txtTrimmedNum + "')";
                        txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where  (i_id.debtcls in (22, 37, 38, 45)) and (d.docstatusid != -1) and (i_id.id_docno = '" + txtFullNom + "' or i_id.id_docno = '" + txtTrimmedNum + "')" + " and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "' and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        break;

                    case 2:
                        // полный номер ИД (с обрезанием первых незначащих 0)
                        // потом номер + ФИО
                        txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where  (i_id.debtcls in (22, 37, 38, 45)) and (d.docstatusid != -1) and (i_id.id_docno = '" + txtFullNom + "' or i_id.id_docno = '" + txtTrimmedNum + "')"  + " and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        break;

                    case 3:
                        // полный номер ИД (с обрезанием первых незначащих 0)
                        // потом номер + дата
                        txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where  (i_id.debtcls in (22, 37, 38, 45)) and (d.docstatusid != -1) and (i_id.id_docno = '" + txtFullNom + "' or i_id.id_docno = '" + txtTrimmedNum + "')" + " and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "'";
                        break;
                    case 4:
                        // полный номер ИД (с обрезанием первых незначащих 0)
                        // в связи с тем, что ФИО должника тоже очень нужно, то сначала хотя бы номер + дата + ФИО
                        // потом просто номер - как было раньше
                        txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where  (i_id.debtcls in (22, 37, 38, 45)) and (d.docstatusid != -1) and (i_id.id_docno = '" + txtFullNom + "' or i_id.id_docno = '" + txtTrimmedNum + "')";
                        break;

                    case 5:
                        // 2. по короткому номеру ИД, дате ИД, сумме ИД
                        txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where      ((i_id.debtcls = 22) or (i_id.debtcls = 37) or (i_id.debtcls = 38) or (i_id.debtcls = 45)) and (d.docstatusid != -1) and i_id.debtsum = " + nSumID.ToString().Replace(',', '.') + " and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "' and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "'";
                        break;

                    case 6:
                        // 3. по сумме ИД, ФИО должника, дате ИД
                        if ((day == 1) || (day == 7))
                            txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where      ((i_id.debtcls = 22) or (i_id.debtcls = 37) or (i_id.debtcls = 38) or (i_id.debtcls = 45)) and (d.docstatusid != -1) and i_id.debtsum = " + nSumID.ToString().Replace(',', '.') + " and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "' and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        else res = 0;
                        break;

                    case 7:
                        // 4. по LIKE %короткий номер ИД% сумме ИД, ФИО должника
                        if ((day == 2) || (day == 5)) 
                            txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where      ((i_id.debtcls = 22) or (i_id.debtcls = 37) or (i_id.debtcls = 38) or (i_id.debtcls = 45)) and (d.docstatusid != -1) and i_id.debtsum = " + nSumID.ToString().Replace(',', '.') + " and UPPER(i_id.id_docno) LIKE '%" + Convert.ToString(txtNomID.ToUpper()) + "%' and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        else res = 0;
                        break;
                    case 8:
                        // 5. проверять через LIKE %короткий номер ИД%, дате ИД, сумме ИД, ФИО должника
                        // убрали сумму ИД
                        if ((day == 3) || (day == 6))
                            //txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where      ((i_id.debtcls = 22) or (i_id.debtcls = 37) or (i_id.debtcls = 38) or (i_id.debtcls = 45)) and (d.docstatusid != -1) and i_id.debtsum = " + nSumID.ToString().Replace(',', '.') + " and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "' and UPPER(i_id.id_docno) LIKE '%" + Convert.ToString(txtNomID.ToUpper()) + "%'" + " and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                            txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where      ((i_id.debtcls = 22) or (i_id.debtcls = 37) or (i_id.debtcls = 38) or (i_id.debtcls = 45)) and (d.docstatusid != -1) and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "' and UPPER(i_id.id_docno) LIKE '%" + Convert.ToString(txtNomID.ToUpper()) + "%'" + " and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        // else res = 0; //  - закомментировал, т.к. это последний из вариантов и после него должен быть res = -1 для выхода
                        break;
                    default:
                        break;
                }

                // работать только если заполнен SQL
                if (txtSql.Length > 0)
                {
                    if (con != null && con.State != ConnectionState.Closed) con.Close();
                    con.Open();
                    tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                    OleDbCommand cmd = new OleDbCommand(txtSql, con, tran);
                    res = Convert.ToDecimal(cmd.ExecuteScalar());
                    tran.Rollback();
                    con.Close();
                }
            }
            catch (OleDbException ole_ex)
            {
                //if (tran != null) {
                //tran.Rollback();
                //}

                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }


            if (con != null)
            {
                con.Close();
            }

            // рекурсия
            if (res == 0)
            {
               return RecFindIDNumMVD(con, txtFullNom, txtNomID, nSumID, dtDatID, txtNameDolg, nSqlType + 1, day, lLogger);
            }
            else return res;
        }

        public bool FillNullSberFileNames(string txtConStrPKOSP, string constrGIBDD, Logger_ufssprk_tools lLogger)
        {

            OleDbConnection ConG, con;
            Int32 iCnt = 0;

            File_funcs ff = new File_funcs();

            try
            {
                ConG = new OleDbConnection(constrGIBDD);
                con = new OleDbConnection(txtConStrPKOSP);

                DataSet ds = new DataSet();
                DataTable tbl = ReadSberSpiDocLogs_WithNullFilename(ConG, lLogger);

                DateTime dtPrevDate = DateTime.MinValue;
                decimal nBaseID = 0;
                decimal nID = 0;
                DateTime dtDate = DateTime.MinValue;
                string txtDate = "";
                int iDiv = Convert.ToInt32(lLogger.OspNum);
                int i = 0;

                foreach (DataRow row in tbl.Rows)
                {
                    nID = Convert.ToDecimal(row["ID"]);
                    // if(nBaseID == 0) nBaseID = nID;

                    txtDate = Convert.ToString(row["PACKDATE"]);
                    if (!DateTime.TryParse(txtDate, out dtDate)) dtDate = DateTime.MinValue;

                    if ((dtDate != dtPrevDate) && (dtDate != DateTime.MinValue))
                    {
                        nBaseID = nID;
                        dtPrevDate = dtDate;
                        i = 0;
                    }


                    // 1SS, 2SS считаем по разнице (nID - nBaseID)+1 в рамках пакетов за одну дату
                    string txtSberOutFileName = ff.makenewSberFileName2(iDiv, dtDate) + '.' + ff.fileCode(i + 1) + "SS"; // N;

                    Logger_ufssprk_tools lLogger2 = new Logger_ufssprk_tools(constrGIBDD, nID);
                    lLogger2.UpdateLLogFileName(txtSberOutFileName);
                    iCnt++;
                    i++;
                }
                lLogger.UpdateLLogCount(iCnt);
                lLogger.WriteLLog("Загружено " + iCnt.ToString() + " имен реестров.");

            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // Console.WriteLine(DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.WriteLLog(DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                }
                return false;
            }
            catch (Exception ex)
            {
                //if (DBFcon != null) DBFcon.Close();
                //Console.WriteLine(DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString());
                lLogger.WriteLLog(DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString());
                return false;
            }

            return true;
        }


        public decimal FindIDNum(OleDbConnection con, string txtNomID, double nSumID, DateTime dtDatID, Logger_ufssprk_tools lLogger)
        {
            OleDbTransaction tran = null;
            string txtSql = "";
            decimal res = -1;
            try
            {
                // проверить подключение - а то может статься что не закрыли
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();

                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                // txtSql = "select d_ip_d.id from doc_ip_doc d_ip_d left join doc_ip d_ip on d_ip_d.id = d_ip.id left join document d on d_ip_d.id = d.id where ((d_ip_d.id_debtcls = 22) or (d_ip_d.id_debtcls = 37) or (d_ip_d.id_debtcls = 38) or (d_ip_d.id_debtcls = 45)) and (d.docstatusid != -1) and (d.docstatusid != 7) and (d.docstatusid != 10) and d_ip.id_debtsum = " + nSumID.ToString() + " and d_ip_d.id_docdate = '" + dtDatID.ToShortDateString() + "' and d_ip_d.id_docno = '" + Convert.ToString(txtNomID) + "'";
                // txtSql = "select i_id.ip_id         from i_id left join document d on i_id.ip_id = d.id where ((i_id.debtcls = 22) or (i_id.debtcls = 37) or (i_id.debtcls = 38) or (i_id.debtcls = 45)) and (d.docstatusid != -1) and (d.docstatusid != 7) and (d.docstatusid != 10) and i_id.debtsum = " + nSumID.ToString().Replace(',', '.') + " and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "' and i_id.id_docno = '" + Convert.ToString(txtNomID) + "'";
                // это вариант сверки по короткому номеру ИД, дате ИД, сумме ИД
                txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where      ((i_id.debtcls = 22) or (i_id.debtcls = 37) or (i_id.debtcls = 38) or (i_id.debtcls = 45)) and (d.docstatusid != -1) and i_id.debtsum = " + nSumID.ToString().Replace(',', '.') + " and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "' and i_id.id_docno = '" + Convert.ToString(txtNomID) + "'";
                // предлагаю разработать новый вариант:
                // 1. поиск по полному номеру ГИБДД (отрезать 0 в начале если он есть)
                // 2. по короткому номеру ИД, дате ИД, сумме ИД
                // 3. по короткому номеру ИД, сумме ИД, ФИО должника
                // 4. по сумме ИД, ФИО должника, дате ИД

                OleDbCommand cmd = new OleDbCommand(txtSql, con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                if (tran != null) {
                    tran.Rollback();
                }

                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }


            if (con != null)
            {
                con.Close();
            }

            return res;
        }



        private decimal RecFindIDNumRicZH(OleDbConnection con, string txtNomID, double nSumID, DateTime dtDatID, string txtNameDolg, int nSqlType, Logger_ufssprk_tools lLogger)
        {
            OleDbTransaction tran;
            string txtSql = "";
            decimal res = -1;
            if (nSqlType > 6)
            {
                return res;
            }
            try
            {

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                //txtSql = "select d_ip_d.id from doc_ip_doc d_ip_d left join doc_ip d_ip on d_ip_d.id = d_ip.id left join document d on d_ip_d.id = d.id where ((d_ip_d.id_debtcls = 22) or (d_ip_d.id_debtcls = 37) or (d_ip_d.id_debtcls = 38) or (d_ip_d.id_debtcls = 45)) and (d.docstatusid != -1) and (d.docstatusid != 7) and (d.docstatusid != 10) and d_ip.id_debtsum = " + nSumID.ToString() + " and d_ip_d.id_docdate = '" + dtDatID.ToShortDateString() + "' and d_ip_d.id_docno = '" + Convert.ToString(txtNomID) + "'";
                // есть план B - если не найдено по Номеру ИД, дате ИД, Сумме ИД и ФИО, то искать по без номера ИД. Дата ИД, Сумма и ФИО - достойный ключ
                //txtSql = "select i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and (d.docstatusid != 7) and (d.docstatusid != 10) and i_id.debtsum = " + nSumID.ToString().Replace(',', '.') + " and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "' and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "' and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                // этот вариант без ФИО должника - мало ли как его внесут в базу
                //txtSql = "select i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and (d.docstatusid != 7) and (d.docstatusid != 10) and i_id.debtsum = " + nSumID.ToString().Replace(',', '.') + " and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "' and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()); // +"' and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";

                // взыскатель - РИЦ ЖХ
                switch (nSqlType)
                {
                    case 1:
                        // фильтр номер, дата ИД, фио, сумма
                        txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and (UPPER(i_id.crdrcontr_name) LIKE '%РИЦ ЖХ%')  and i_id.debtsum = " + nSumID.ToString().Replace(',', '.') + "  and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "'  and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "' and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        break;

                    case 2:
                        // фильтр номер, дата ИД, сумма
                        txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and (UPPER(i_id.crdrcontr_name) LIKE '%РИЦ ЖХ%')  and i_id.debtsum = " + nSumID.ToString().Replace(',', '.') + "  and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "'  and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "'";
                        break;

                    case 3:
                        // фильтр номер, дата ИД, фио
                        txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and (UPPER(i_id.crdrcontr_name) LIKE '%РИЦ ЖХ%')  and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "'  and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "' and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        break;

                    case 4:
                        // фильтр номер, дата ИД,
                        txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and (UPPER(i_id.crdrcontr_name) LIKE '%РИЦ ЖХ%')  and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "'  and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "'";
                        break;
                    case 5:
                        // фильтр дата ИД, фио, сумма
                        txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and (UPPER(i_id.crdrcontr_name) LIKE '%РИЦ ЖХ%')  and i_id.debtsum = " + nSumID.ToString().Replace(',', '.') + "  and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "' and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        break;
                    case 6:
                        // фильтр номер, фио, сумма
                        txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and (UPPER(i_id.crdrcontr_name) LIKE '%РИЦ ЖХ%')  and i_id.debtsum = " + nSumID.ToString().Replace(',', '.') + " and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "' and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        break;
                    default:
                        break;
                }

                OleDbCommand cmd = new OleDbCommand(txtSql, con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                //if (tran != null) {
                //tran.Rollback();
                //}

                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }


            if (con != null)
            {
                con.Close();
            }

            // рекурсия
            if (res == 0)
            {
                return RecFindIDNumRicZH(con, txtNomID, nSumID, dtDatID, txtNameDolg, nSqlType + 1, lLogger);
            }
            else return res;
        }




        private decimal FindIP_IDbyNum(OleDbConnection con, string txtIPNO, Logger_ufssprk_tools lLogger)
        {
            decimal res = -1;
            try
            {

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select d_ip_d.id from doc_ip_doc d_ip_d join document d on d_ip_d.id = d.id where d.docstatusid in (1, 4, 9, 22, 23, 24) and d.doc_number = '" + txtIPNO + "'", con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return res;
        }

        // добавляем дату оплаты чтобы потом искать только те ИП, которые были оплачены до регистрации ИД - она нужна чтобы взять оплаты которые прошли после нее
        // DateTime dtDatePlat,
        public decimal RecFindIDNumTGK1(OleDbConnection con, string txtNomID, DateTime dtDatID, double nSumID, string txtNameDolg, string txtInn, int nSqlType, DateTime dtDatePlat, Logger_ufssprk_tools lLogger)
        {
            OleDbTransaction tran;
            string txtSql = "";

            decimal res = -1;
            if (nSqlType > 9)
            {
                return res;
            }
            try
            {
                string txtDatePlat = dtDatePlat.ToShortDateString();

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                switch (nSqlType)
                {   // Ном ИД, дата ИД, ФИО, ИНН Взыскатель - КЭСК
                    case 1:

                        txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id join document ip_d on i_id.ip_id = ip_d.id  join document i_id_d on i_id_d.id = i_id.id where i_id_d.doc_date <= '" + txtDatePlat + "' and  ip_d.docstatusid in (4, 9, 22, 23, 24) and i_id.ip_id is not null and  (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%ТГК%') or (UPPER(i_id.crdrcontr_name) LIKE '%ТЕРРИТОРИАЛЬНАЯ%ГЕНЕРИРУЮЩАЯ%КОМПАНИЯ%')) and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "'  and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "'" + " and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'" + " and i_id.dbtrinn = '" + txtInn + "'";
                        break;
                    // Ном ИД, дата ИД, ИНН Взыскатель - КЭСК
                    case 2: txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id join document ip_d on i_id.ip_id = ip_d.id  join document i_id_d on i_id_d.id = i_id.id where i_id_d.doc_date <= '" + txtDatePlat + "' and ip_d.docstatusid in (4, 9, 22, 23, 24) and i_id.ip_id is not null and  (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%ТГК%') or (UPPER(i_id.crdrcontr_name) LIKE '%ТЕРРИТОРИАЛЬНАЯ%ГЕНЕРИРУЮЩАЯ%КОМПАНИЯ%')) and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "'  and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "'" + " and i_id.dbtrinn = '" + txtInn + "'";
                        break;

                    // Ном ИД, дата ИД, ФИО Взыскатель - КЭСК
                    case 3: txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id join document ip_d on i_id.ip_id = ip_d.id  join document i_id_d on i_id_d.id = i_id.id where i_id_d.doc_date <= '" + txtDatePlat + "' and ip_d.docstatusid in (4, 9, 22, 23, 24) and i_id.ip_id is not null and  (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%ТГК%') or (UPPER(i_id.crdrcontr_name) LIKE '%ТЕРРИТОРИАЛЬНАЯ%ГЕНЕРИРУЮЩАЯ%КОМПАНИЯ%')) and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "'  and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "'" + " and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        break;

                    // Ном ИД, дата ИД Взыскатель - КЭСК
                    case 4: txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id join document ip_d on i_id.ip_id = ip_d.id  join document i_id_d on i_id_d.id = i_id.id where i_id_d.doc_date <= '" + txtDatePlat + "' and ip_d.docstatusid in (4, 9, 22, 23, 24) and i_id.ip_id is not null and  (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%ТГК%') or (UPPER(i_id.crdrcontr_name) LIKE '%ТЕРРИТОРИАЛЬНАЯ%ГЕНЕРИРУЮЩАЯ%КОМПАНИЯ%')) and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "'  and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "';";
                        break;

                    // Ном ИД, ИНН, Взыскатель - КЭСК
                    case 5: txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id join document ip_d on i_id.ip_id = ip_d.id  join document i_id_d on i_id_d.id = i_id.id where i_id_d.doc_date <= '" + txtDatePlat + "' and ip_d.docstatusid in (4, 9, 22, 23, 24) and i_id.ip_id is not null and  (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%ТГК%') or (UPPER(i_id.crdrcontr_name) LIKE '%ТЕРРИТОРИАЛЬНАЯ%ГЕНЕРИРУЮЩАЯ%КОМПАНИЯ%')) and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "'" + " and i_id.dbtrinn = '" + txtInn + "'";
                        break;

                    // Ном ИД, ФИО, Взыскатель - КЭСК
                    case 6: txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id join document ip_d on i_id.ip_id = ip_d.id  join document i_id_d on i_id_d.id = i_id.id where i_id_d.doc_date <= '" + txtDatePlat + "' and ip_d.docstatusid in (4, 9, 22, 23, 24) and i_id.ip_id is not null and  (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%ТГК%') or (UPPER(i_id.crdrcontr_name) LIKE '%ТЕРРИТОРИАЛЬНАЯ%ГЕНЕРИРУЮЩАЯ%КОМПАНИЯ%')) and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "'" + " and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        break;

                    // Дата ИД, ИНН, Взыскатель - КЭСК
                    case 7: txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id  join document i_id_d on i_id_d.id = i_id.id where i_id_d.doc_date <= '" + txtDatePlat + "' and (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%ТГК%') or (UPPER(i_id.crdrcontr_name) LIKE '%ТЕРРИТОРИАЛЬНАЯ%ГЕНЕРИРУЮЩАЯ%КОМПАНИЯ%')) and i_id.id_docdate = '" + dtDatID.ToShortDateString() + " and i_id.dbtrinn = '" + txtInn + "'";
                        break;

                    // Дата ИД, ФИО, Взыскатель - КЭСК
                    case 8: txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id join document ip_d on i_id.ip_id = ip_d.id  join document i_id_d on i_id_d.id = i_id.id where i_id_d.doc_date <= '" + txtDatePlat + "' and ip_d.docstatusid in (4, 9, 22, 23, 24) and i_id.ip_id is not null and  (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%ТГК%') or (UPPER(i_id.crdrcontr_name) LIKE '%ТЕРРИТОРИАЛЬНАЯ%ГЕНЕРИРУЮЩАЯ%КОМПАНИЯ%')) and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "' and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        break;

                    // Ном ИД, Сумма ИД, Взыскатель - КЭСК
                    case 9: txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id join document ip_d on i_id.ip_id = ip_d.id  join document i_id_d on i_id_d.id = i_id.id where i_id_d.doc_date <= '" + txtDatePlat + "' and ip_d.docstatusid in (4, 9, 22, 23, 24) and i_id.ip_id is not null and  (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%ТГК%') or (UPPER(i_id.crdrcontr_name) LIKE '%ТЕРРИТОРИАЛЬНАЯ%ГЕНЕРИРУЮЩАЯ%КОМПАНИЯ%')) and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "'" + " and i_id.debtsum = " + nSumID.ToString().Replace(',', '.');
                        break;


                    default:
                        break;
                }

                // проверять ИНН только если он заполнен
                if (txtInn.Length > 0 || ((nSqlType != 1) && (nSqlType != 2) && (nSqlType != 5) && (nSqlType != 7)))
                {
                    // для 1-6 и 9 проверяем что номер ИД заполнен
                    // для 1-4 7,8 проверяем дату ИД
                    // для 9 проверяем сумму ИД
                    if (
                        ((txtNomID.Length > 0) || (nSqlType == 7) || (nSqlType == 8))
                        && ((dtDatID.ToShortDateString() != "01.01.1800") || (nSqlType == 5) || (nSqlType == 6) || (nSqlType == 9))
                        && ((nSumID != -1) || (nSqlType != 9))
                        )
                    {
                        OleDbCommand cmd = new OleDbCommand(txtSql, con, tran);
                        res = Convert.ToDecimal(cmd.ExecuteScalar());
                        tran.Rollback();
                        con.Close(); 
                    }else{
                        res = 0;
                    }
                    
                }
                else res = 0; // чтобы не -1
            }
            catch (OleDbException ole_ex)
            {
                //if (tran != null) {
                //tran.Rollback();
                //}

                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }


            if (con != null)
            {
                con.Close();
            }

            // рекурсия
            if (res == 0)
            {
                return RecFindIDNumTGK1(con, txtNomID, dtDatID, nSumID, txtNameDolg, txtInn, nSqlType + 1, dtDatePlat, lLogger);
            }
            else return res;
        }

        public decimal RecFindIDNumKESK(OleDbConnection con, string txtNomID, DateTime dtDatID, double nSumID, string txtNameDolg, string txtInn, int nSqlType, Logger_ufssprk_tools lLogger)
        {
            OleDbTransaction tran;
            string txtSql = "";

            decimal res = -1;
            if (nSqlType > 9)
            {
                return res;
            }
            try
            {

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                switch (nSqlType)
                {   // Ном ИД, дата ИД, ФИО, ИНН Взыскатель - КЭСК
                    case 1: txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%КЭСК%') or (UPPER(i_id.crdrcontr_name) LIKE '%КАРЕЛЬСКАЯ%ЭНЕРГОСБЫТОВАЯ%')) and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "'  and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "'" + " and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'" + " and i_id.dbtrinn = '" + txtInn + "'";
                        break;
                    // Ном ИД, дата ИД, ИНН Взыскатель - КЭСК
                    case 2: txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%КЭСК%') or (UPPER(i_id.crdrcontr_name) LIKE '%КАРЕЛЬСКАЯ%ЭНЕРГОСБЫТОВАЯ%')) and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "'  and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "'" + " and i_id.dbtrinn = '" + txtInn + "'";
                        break;

                    // Ном ИД, дата ИД, ФИО Взыскатель - КЭСК
                    case 3: txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%КЭСК%') or (UPPER(i_id.crdrcontr_name) LIKE '%КАРЕЛЬСКАЯ%ЭНЕРГОСБЫТОВАЯ%')) and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "'  and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "'" + " and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        break;

                    // Ном ИД, дата ИД Взыскатель - КЭСК
                    case 4: txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%КЭСК%') or (UPPER(i_id.crdrcontr_name) LIKE '%КАРЕЛЬСКАЯ%ЭНЕРГОСБЫТОВАЯ%')) and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "'  and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "';";    
                        break;

                    // Ном ИД, ИНН, Взыскатель - КЭСК
                    case 5: txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%КЭСК%') or (UPPER(i_id.crdrcontr_name) LIKE '%КАРЕЛЬСКАЯ%ЭНЕРГОСБЫТОВАЯ%')) and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "'"  + " and i_id.dbtrinn = '" + txtInn + "'";
                        break;

                    // Ном ИД, ФИО, Взыскатель - КЭСК
                    case 6: txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%КЭСК%') or (UPPER(i_id.crdrcontr_name) LIKE '%КАРЕЛЬСКАЯ%ЭНЕРГОСБЫТОВАЯ%')) and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "'" + " and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        break;

                    // Дата ИД, ИНН, Взыскатель - КЭСК
                    case 7: txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%КЭСК%') or (UPPER(i_id.crdrcontr_name) LIKE '%КАРЕЛЬСКАЯ%ЭНЕРГОСБЫТОВАЯ%')) and i_id.id_docdate = '" + dtDatID.ToShortDateString() + " and i_id.dbtrinn = '" + txtInn + "'";
                        break;

                    // Дата ИД, ФИО, Взыскатель - КЭСК
                    case 8: txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%КЭСК%') or (UPPER(i_id.crdrcontr_name) LIKE '%КАРЕЛЬСКАЯ%ЭНЕРГОСБЫТОВАЯ%')) and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "' and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                        break;
                    
                    // Ном ИД, Сумма ИД, Взыскатель - КЭСК
                    case 9: txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%КЭСК%') or (UPPER(i_id.crdrcontr_name) LIKE '%КАРЕЛЬСКАЯ%ЭНЕРГОСБЫТОВАЯ%')) and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "'" + " and i_id.debtsum = " + nSumID.ToString().Replace(',', '.');
                        break;
                    
                    default:
                        break;
                }

                // проверять ИНН только если он заполнен
                if (txtInn.Length > 0 || ((nSqlType != 1) && (nSqlType != 2) && (nSqlType != 5) && (nSqlType != 7)))
                {
                    OleDbCommand cmd = new OleDbCommand(txtSql, con, tran);
                    res = Convert.ToDecimal(cmd.ExecuteScalar());
                    tran.Rollback();
                    con.Close();
                }
                else res = 0; // чтобы не -1
            }
            catch (OleDbException ole_ex)
            {
                //if (tran != null) {
                //tran.Rollback();
                //}

                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }


            if (con != null)
            {
                con.Close();
            }

            // рекурсия
            if (res == 0)
            {
                return RecFindIDNumKESK(con, txtNomID, dtDatID, nSumID, txtNameDolg, txtInn, nSqlType + 1, lLogger);
            }
            else return res;
        }
        // добавляем дату оплаты чтобы потом искать только те ИП, которые были оплачены до регистрации ИД - она нужна чтобы взять оплаты которые прошли после нее
        // DateTime dtDatePlat,
        public decimal RecFindIDNumKRC(OleDbConnection con, string txtNomID, DateTime dtDatID, double nSumID, int nSqlType, DateTime dtDatePlat, Logger_ufssprk_tools lLogger)
        {
            OleDbTransaction tran;
            string txtSql = "";

            decimal res = -1;
            if (nSqlType > 2)
            {
                return res;
            }
            try
            {
                string txtDatePlat = dtDatePlat.ToShortDateString();

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                switch (nSqlType)
                {
                    // txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and (UPPER(i_id.crdrcontr_name) LIKE '%РИЦ ЖХ%')  and i_id.debtsum = " + nSumID.ToString().Replace(',', '.') + "  and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "'  and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "' and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                    case 1:
                        // фильтр дата ИД, номер ИД, сумма
                        // txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%КРЦ%') or (UPPER(i_id.crdrcontr_name) LIKE '%КОМПЛЕКСНЫЙ РАСЧЕТНЫЙ ЦЕНТР%')) and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "'  and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "' and i_id.debtsum = " + nSumID.ToString().Replace(',', '.');
                        txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id join document ip_d on i_id.ip_id = ip_d.id join document i_id_d on i_id_d.id = i_id.id where i_id_d.doc_date <= '" + txtDatePlat + "' and ip_d.docstatusid in (4, 9, 22, 23, 24) and i_id.ip_id is not null and (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%КРЦ%') or (UPPER(i_id.crdrcontr_name) LIKE '%КОМПЛЕКСНЫЙ РАСЧЕТНЫЙ ЦЕНТР%')) and (UPPER(i_id.crdrcontr_name) NOT LIKE '%ЕКРЦ%') and ((i_id.id_docdate = '" + dtDatID.ToShortDateString() + "') or  (i_id.id_des_date = '" + dtDatID.ToShortDateString() + "')) and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "' and i_id.debtsum = " + nSumID.ToString().Replace(',', '.');
                        
                        // and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "'                        
                        // and((i_id.id_docdate = '" + dtDatID.ToShortDateString() + "') or  (i_id.id_des_date = '" + dtDatID.ToShortDateString() + "'))
                          
                        break;

                    case 2:
                        // номер, дата ИД
                        txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id join document ip_d on i_id.ip_id = ip_d.id  join document i_id_d on i_id_d.id = i_id.id where i_id_d.doc_date <= '" + txtDatePlat + "' and  ip_d.docstatusid in (4, 9, 22, 23, 24) and i_id.ip_id is not null and (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%КРЦ%') or (UPPER(i_id.crdrcontr_name) LIKE '%КОМПЛЕКСНЫЙ РАСЧЕТНЫЙ ЦЕНТР%'))  and (UPPER(i_id.crdrcontr_name) NOT LIKE '%ЕКРЦ%')  and ((i_id.id_docdate = '" + dtDatID.ToShortDateString() + "') or  (i_id.id_des_date = '" + dtDatID.ToShortDateString() + "')) and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "';";
                        break;

                    //case 3:
                    //    // дата ИД, фио
                    //    txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%КРЦ%') or (UPPER(i_id.crdrcontr_name) LIKE '%КОМПЛЕКСНЫЙ РАСЧЕТНЫЙ ЦЕНТР%')) and i_id.id_docdate = '" + dtDatID.ToShortDateString() + "' and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                    //    break;

                    //case 4:
                    //    // номер, ФИО
                    //    txtSql = "select first 1 i_id.ip_id from i_id join document d on i_id.ip_id = d.id where (d.docstatusid != -1) and ((UPPER(i_id.crdrcontr_name) LIKE '%КРЦ%') or (UPPER(i_id.crdrcontr_name) LIKE '%КОМПЛЕКСНЫЙ РАСЧЕТНЫЙ ЦЕНТР%')) and UPPER(i_id.id_docno) = '" + Convert.ToString(txtNomID.ToUpper()) + "' and UPPER(i_id.dbtrcontr_name) = '" + txtNameDolg.ToUpper() + "'";
                    //    break;

                    default:
                        break;
                }


                OleDbCommand cmd = new OleDbCommand(txtSql, con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                //if (tran != null) {
                //tran.Rollback();
                //}

                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }


            if (con != null)
            {
                con.Close();
            }

            // рекурсия
            if (res == 0)
            {
                return RecFindIDNumKRC(con, txtNomID, dtDatID, nSumID, nSqlType + 1, dtDatePlat, lLogger);
            }
            else return res;
        }

        public int GetDocCode(string txtDocCode)
        {
            int nRes = 0;

            // Тип документа
            // 1 - Арест; 2 - Обращение взыскания; 3 - Снятие ареста
            //  Постановление об обращении - O_IP_ACT_GACCOUNT_MONEY,
            // 1- O_IP_ACT_ARREST_ACCMONEY - Постановление о наложении ареста на ДС, находящиеся в банке или иной кредитной организации
            // 2- O_IP_ACT_GACCOUNT_MONEY - Постановление об обращении взыскания на ДС должника, находящиеся в банке или иной кредитной организации
            // 2-  O_IP_ACT_CURRENCY_ROUB - Постановление об обращении взыскания на ДС в валюте при исчислении долга в руб.
            // 3 -  O_IP_ACT_ENDARREST - Постановление о снятии ареста с ДС на счете
            // 5 - O_IP_ACT_ENDGACCOUNT_MONEY - Постановление об отмене постановления об обращении взыскания на ДС
            // // 5 -  O_IP_ACT_DBT_CANCEL -  Постановление об отмене мер по обращению взыскания на доходы должника

            switch (txtDocCode.Trim())
            {
                case "O_IP_ACT_ARREST_ACCMONEY": nRes = 4; break; // код 1 это внутренняя операция банка. верный код - 4
                case "O_IP_ACT_GACCOUNT_MONEY": nRes = 2; break;
                case "O_IP_ACT_ENDARREST": nRes = 3; break;
                case "O_IP_ACT_ENDGACCOUNT_MONEY": nRes = 5; break;
                // case "O_IP_ACT_CURRENCY_ROUB": nRes = 2; break;
            }

            return nRes;

        }

        public string InsertSberDocRowToTxt2(OleDbConnection PKOSP_con, DataRow row, string txtFileName, OspOptions OspParams, string txtAgreementCode, out string txtDoc_code, bool bUnloadLastRegNumber, Logger_ufssprk_tools lLogger, Logger_ufssprk_tools lErrLogger)
        {
            // 1 - нужны параметры из справочника ОСП. Возможно, их стоит передавать в виде какой-то структуры, где уже все данные будут проверены.
            // написать функцию - возвращающую параметры
            // 2 - как реагировать на отсутствие обязательных параметров?
            // договор предлагает писать null только если нет необязательных - обязательные должны быть,
            // то есть тогда строчка не отправляется вобще и выход false

            File_funcs ff = new File_funcs();
            DateTime DatZapr = DateTime.Today;
            DateTime dtDate;
            Decimal nYear = DateTime.Today.Year;
            string txtLastOldRegNumber = "";

            string txtFIO, txtDD_R, txtZAPROS;
            bool bNoYearBorn = false;

            string txtDataRow = ""; // формируемая строка с данными
            bool bDataError = false;
            bool bBirthPlaceDataError = false;
            string txtSkippedFields = "";

            // лог пока пустой
            txtDoc_code = "";

            try
            {
                // получить act_id
                string txtActId = "";
                Decimal nActId = 0;
                if(row.Table.Columns.Contains("ACT_ID")){
                    txtActId = Convert.ToString(row["ACT_ID"]).Trim();
                }
                
                Decimal.TryParse(txtActId, out nActId);
                

                if (bUnloadLastRegNumber) txtLastOldRegNumber = Convert.ToString(row["old_regnumber"]).Trim();

                //ID
                txtDataRow += "| id=";
                string txtAccID = Convert.ToString(row["acc_id"]).Trim();
                decimal nAccID = 0;
                if (!Decimal.TryParse(txtAccID, out nAccID))
                {
                    txtDataRow += "null";
                    bDataError = true;
                    txtSkippedFields += "id, ";

                }
                else
                {
                    if (nAccID.ToString().Length < 16) txtDataRow += nAccID.ToString();
                    else
                    {
                        txtDataRow += "null";
                        bDataError = true; // слишком длнинный ID - максимум 15
                        txtSkippedFields += "id, ";
                    }
                }
                txtDataRow += "| actype=";

                // Тип документа: Арест;Обращение взыскания;Снятие ареста; Отмена обращения
                string txtDocCode = Convert.ToString(row["doc_code"]).Trim();
                txtDoc_code = txtDocCode; // возвращаемый параметр
                int iDocCode = GetDocCode(txtDocCode);
                if (iDocCode > 0) txtDataRow += iDocCode.ToString();
                else
                {
                    txtDataRow += "null";
                    bDataError = true;
                    txtSkippedFields += "actype, ";
                }
                //string txtTempDataRow = "| execProcNumber=";
                txtDataRow += "| execProcNumber=";

                // Номер ИП r.IP_NUMBER
                string txtIpNumber = Convert.ToString(row["IP_NUMBER"]).Trim();
                if (txtIpNumber.Length > 0)
                {
                    // 20200826 т.к. СБЕР не обрабатывает теперь этот формат, то просто вписываем старый номер вместо номера ИП
                    // комментируем чтобы записать старый номер ИП
                    // txtDataRow += cutEnd(txtIpNumber, 50);
                    string txtOldRestrNum = txtIpNumber;
                    // если есть старый номер у отмены граничения
                    if ((txtDocCode.Equals("O_IP_ACT_ENDARREST") || txtDocCode.Equals("O_IP_ACT_ENDGACCOUNT_MONEY")) 
                        && bUnloadLastRegNumber && txtLastOldRegNumber.Length > 0){
                        // получить старый номер
                        txtOldRestrNum = GetOldRestictionNum(nActId, txtDocCode, PKOSP_con,lLogger);
                        // проверить что старый номер != текущему
                        //if(txtOldRestrNum != txtIpNumber){
                            //txtTempDataRow = "|execProcNumberOld=";
                            //txtDataRow += "|execProcNumberOld=" + txtOldRestrNum;
                        //}
                    }
                    // 20200826 записываем тут то, что у нас в txtOldRestrNum (по умолчанию там txtIpNumber)
                    txtDataRow += cutEnd(txtOldRestrNum, 50);
                }
                else
                {
                    txtDataRow += "null";
                    bDataError = true;
                    txtSkippedFields += "Номер ИП, ";
                }
                txtDataRow += "| execProcDate=";


                //Дата возб.ИП  r.IP_RISEDATE
                string txtIpRiseDate = Convert.ToString(row["IP_RISEDATE"]);
                DateTime dtIpRiseDate = DateTime.MaxValue;
                if (!DateTime.TryParse(txtIpRiseDate, out dtIpRiseDate))
                {
                    txtDataRow += "null";
                    bDataError = true;
                    txtSkippedFields += "Дата возб. ИП, ";
                }
                else
                {
                    txtDataRow += dtIpRiseDate.ToShortDateString();
                }
                txtDataRow += "| actNumber=";

                // Номер постановления r.DOC_NUMBER
                string txtDocNumber = Convert.ToString(row["DOC_NUMBER"]).Trim();
                if (txtDocNumber.Length > 0) txtDataRow += cutEnd(txtDocNumber, 50);
                else
                {
                    txtDataRow += "null";
                    bDataError = true;
                    txtSkippedFields += "Номер постановления, ";
                }
                txtDataRow += "| actDate=";

                //Дата постановления  r.DOC_DATE
                string txtDocDate = Convert.ToString(row["DOC_DATE"]);
                DateTime dtDocDate = DateTime.MaxValue;
                if (!DateTime.TryParse(txtDocDate, out dtDocDate))
                {
                    // если нет номера постановления - то ничего страшного
                    // попробуем номер ИП вписать
                    if (txtIpNumber.Length > 0) txtDataRow += txtIpNumber;
                    else txtDataRow += "null";
                    // txtDataRow += "null";
                    // bDataError = true;
                    // txtSkippedFields += "Дата постановления, ";
                }
                else
                {
                    txtDataRow += dtDocDate.ToShortDateString();
                }

                txtDataRow += "| execActNum=";
                // Номер ИД r.ID_NUMBER
                string txtIdNumber = Convert.ToString(row["ID_NUMBER"]).Trim();
                if (txtIdNumber.Length > 0) txtDataRow += cutEnd(txtIdNumber, 50);
                else
                {
                    // если нет номера ИД - то ничего страшного (есть ОСП где почему-то не вносят его)
                    // попробуем номер ИП вписать
                    if (txtIpNumber.Length > 0) txtDataRow += txtIpNumber;
                    else txtDataRow += "null";
                    //bDataError = true;
                    //txtSkippedFields += "Номер ИД, ";
                }


                // вместо номера ИД ставим ip_id
                // по просьбе Ивана из Волга-Сити, т.к. им нужно как-то видеть ID наших ПИЭВ постновлений
                //// !!! временно
                //txtDataRow += "| ip_id=";
                //string txtActId = Convert.ToString(row["ACT_ID"]).Trim();
                //if (txtActId.Length > 0)
                //{
                //    txtDataRow += txtActId;
                //}
                //else
                //{
                //    txtDataRow += "null";
                //}

                //// !!! временно


                txtDataRow += "| execActDate=";


                // Дата ИД - ID_DOCDATE
                string txtIdDocDate = Convert.ToString(row["ID_DOCDATE"]);
                DateTime dtIdDocDate = DateTime.MaxValue;
                if (!DateTime.TryParse(txtIdDocDate, out dtIdDocDate))
                {
                    txtDataRow += "null";
                    bDataError = true;
                    txtSkippedFields += "Дата ИД, ";
                }
                else
                {
                    txtDataRow += dtIdDocDate.ToShortDateString();
                }
                txtDataRow += "| receivTitle=";

                // Заявитель - параметр
                string txtZajavitel = OspParams.Zajavitel;
                if (txtZajavitel.Length > 0) txtDataRow += cutEnd(txtZajavitel, 95);
                //if (txtZajavitel.Length > 0) txtDataRow += txtZajavitel;
                else
                {
                    txtDataRow += "null";
                    bDataError = true;
                    txtSkippedFields += "Наименование заявителя, ";
                }
                txtDataRow += "| address=";

                // Адрес заявителя - параметр
                string txtZ_adr = OspParams.Z_adr;
                if (txtZ_adr.Length > 0) txtDataRow += cutEnd(txtZ_adr, 100);
                else
                {
                    txtDataRow += "null";
                    bDataError = true;
                    txtSkippedFields += "Адрес заявителя, ";
                }
                txtDataRow += "| bailiff=";


                // ФИО должностного лица r.SPI_FIO
                string txtSpiFio = Convert.ToString(row["SPI_FIO"]).Trim();
                txtSpiFio = ff.FamIO(txtSpiFio); // преобразовать в инициалы
                if (txtSpiFio.Length > 0) txtDataRow += cutEnd(txtSpiFio, 50);
                else
                {
                    // если нет ФИО СПИ, впишем null и посмотрим что Сбербанк сделает
                    txtDataRow += "null";
                    // bDataError = true;
                    // txtSkippedFields += "ФИО СПИ, ";
                }
                txtDataRow += "| summ=";

                // Сумма долга по ИД - IP_SUM1 - это скорректированная сумма
                // как оказалась - это вобще единственная сумма, которая передается, поэтому это acc.summa
                //  - сумма в строке сведения о ДС
                // 20160830 - теперь сюда будет выгружаться ext_restriction.ip_rest_debtsum
                // потому что сумма из строки ДС - это сумма на счете из ответа
                string txtIpSum = Convert.ToString(row["IP_SUM1"]);
                Decimal nIpSum = 0;
                if (!Decimal.TryParse(txtIpSum, out nIpSum))
                {
                    // если что-то не то, то впишем 0
                    txtDataRow += "0";
                    //txtDataRow += "null";
                    //bDataError = true;
                    //txtSkippedFields += "Сумма долга по ИД, ";
                }
                else
                {
                    txtDataRow += nIpSum.ToString().Replace(',', '.');
                }
                txtDataRow += "| accountNumber=";

                // Номер cчета платильщика ACC - необязательный параметр
                string txtAcc = Convert.ToString(row["ACC"]).Trim();
                if (txtAcc.Length > 0) txtDataRow += cutEnd(txtAcc, 25);
                else
                {
                    txtDataRow += "null";
                }
                txtDataRow += "| debtorFirstName=";

                // ФИО из 3 частей
                txtFIO = Convert.ToString(row["DEBTOR_NAME"]).Trim();

                // разобрать ФИО на 3 части
                string txtErrMess = "";
                string[] Names;
                Names = ff.parseFIO(txtFIO, out txtErrMess);
                if (txtErrMess.Length > 0)
                {
                    lLogger.ErrMessage += " \n" + txtErrMess;
                    //txtErrLog += " \n" + txtErrMess;
                    
                }
                txtFIO = "";
                // замена ; на , и дефис (-) на пробел
                // сначала Имя потом Фамилия потом Отчество
                if (Names.Length > 1) txtFIO += Convert.ToString(cutEnd(Names[1], 30)).Replace(';', ',').Replace('-', ' ');
                txtFIO += "| debtorLastName=";
                if (Names.Length > 0) txtFIO += Convert.ToString(cutEnd(Names[0], 30)).Replace(';', ',').Replace('-', ' ');
                txtFIO += "| debtorSecondName=";
                if (Names.Length > 2) txtFIO += Convert.ToString(cutEnd(Names[2], 30)).Replace(';', ',').Replace('-', ' ');
                // если вдруг какой косяк и есть 4-е имя типа ОГЛЫ
                if (Names.Length > 3) txtFIO += " " + Convert.ToString(Names[3]).Replace(';', ',').Replace('-', ' ');

                txtFIO = cutEnd(txtFIO, 126); // обрезать с конца, есть ОГЛЫ добавил лишних символов
                txtDataRow += txtFIO + "| debtorBornAddres=";


                // Место рождения r.DEBTOR_BIRTH_PLACE
                string txtPlaceB = Convert.ToString(row["DEBTOR_BIRTH_PLACE1"]).Trim();
                if (txtPlaceB.Length > 0) txtDataRow += cutEnd(txtPlaceB, 100);
                else
                {
                    txtDataRow += "null";

                    // лучше отправить с null и получить квитанцию, чем совсем не отправлять
                    /*
                    bDataError = true;
                    bBirthPlaceDataError = true;
                    txtSkippedFields += "Место рождения должника, ";
                    */
                }
                txtDataRow += "| debtorAddres=";

                // Адрес r.DEBTOR_ADR
                string txtAdrD = Convert.ToString(row["DEBTOR_ADR"]).Trim();
                if (txtAdrD.Length > 0) txtDataRow += cutEnd(txtAdrD, 100);
                else
                {
                    // лучше отправить с null и получить квитанцию, чем совсем не отправлять
                    txtDataRow += "null";
                    // bDataError = true;
                    // txtSkippedFields += "Адрес должника, ";
                }
                txtDataRow += "| debtorBirthYear=";

                // получить дату рождения и год рождения
                // Год рождения - i_id.dbtr_born_year
                // 1-проверить есть ли нормальная дата рождения и взять год оттуда
                // Дата рождения
                txtDD_R = Convert.ToString(row["DEBTOR_BIRTH_DATE1"]).Trim();
                dtDate = DateTime.MaxValue;


                if (!DateTime.TryParse(txtDD_R, out dtDate))
                {
                    dtDate = DateTime.MaxValue;
                    bNoYearBorn = true; // проблемы с датой рождения
                    bDataError = true;
                    txtSkippedFields += "Год рождения должника, ";
                }
                else
                {
                    // т.к. дата рождения хорошая
                    // пишем год рождения из даты рождения
                    txtDataRow += cutEnd(dtDate.Year.ToString(), 5);
                    txtDataRow += "| debtorBirth=";

                    // потом пишем саму дату рождения
                    txtDataRow += dtDate.ToShortDateString();
                    txtDataRow += "| bankname=";

                }

                // 2 - если дата рождения плохая - то взять год из dbtr_born_year
                // вобщем-то все это бессмысленно теперь - нет даты рождения - все равно не станем отправлять
                if (bNoYearBorn)
                {
                    string txtYearB = Convert.ToString(row["dbtr_born_year1"]).Trim();
                    int nYearB = 0;
                    if (!Int32.TryParse(txtYearB, out nYearB))
                    {
                        txtDataRow += "null";
                        txtDataRow += "| debtorBirth=";
                    }
                    else
                    {
                        // год рождения есть и он хороший - пишем его
                        txtDataRow += cutEnd(nYearB.ToString(), 5);
                        txtDataRow += "| debtorBirth=";
                    }

                    // т.к. дата рождения плохая - пишем null
                    txtDataRow += "null";
                    txtDataRow += "| bankname=";
                }

                // Банк получателя - параметр
                string txtBank = OspParams.Bank;
                if (txtBank.Length > 0) txtDataRow += cutEnd(txtBank, 200);
                else
                {
                    txtDataRow += "null";
                    bDataError = true;
                    txtSkippedFields += "Банк получателя, ";
                }
                txtDataRow += "| kpp=";

                // КПП - параметр
                string txtKpp = OspParams.Kpp;
                if (txtKpp.Length > 0) txtDataRow += cutEnd(txtKpp, 9);
                else
                {
                    txtDataRow += "null";
                    bDataError = true;
                    txtSkippedFields += "КПП, ";
                }
                txtDataRow += "| kbk=null";
                // КБК и ОКАТО - не заполняем, т.к. нечем
                txtDataRow += "| okato=null";

                txtDataRow += "| bik=";

                // БИК - параметр
                string txtBik = OspParams.Bik;
                if (txtBik.Length > 0) txtDataRow += cutEnd(txtBik, 20);
                else
                {
                    txtDataRow += "null";
                    bDataError = true;
                    txtSkippedFields += "БИК, ";
                }
                txtDataRow += "| ls=";

                // Номер ЛС - параметр
                string txtLs = OspParams.Ls;
                if (txtLs.Length > 0) txtDataRow += cutEnd(txtLs, 50);
                else
                {
                    txtDataRow += "null";
                    bDataError = true;
                    txtSkippedFields += "Номер л/с, ";
                }
                txtDataRow += "| account=";

                // Номер РС - параметр
                string txtRs = OspParams.Rs;
                if (txtRs.Length > 0) txtDataRow += cutEnd(txtRs, 20);
                else
                {
                    txtDataRow += "null";
                    bDataError = true;
                    txtSkippedFields += "Номер счета (р/с), ";
                }
                txtDataRow += "| inn=";

                // ИНН - параметр
                string txtInn = OspParams.Inn;
                if (txtInn.Length > 0) txtDataRow += cutEnd(txtInn, 12);
                else
                {
                    txtDataRow += "null";
                    bDataError = true;
                    txtSkippedFields += "ИНН заявителя, ";
                }

                txtDataRow += "| osbnumber=null";
                // № ОСБ - необязательный не заполняем

                txtDataRow += "| accountCurrency=";

                // Код валюты - CURRENCY_CODE (например '810')
                // преобразовать в формат букв (например 'RUB')
                // по совету сотрудника ЦСКО Волга-Сити Иван (обработка файлов) 	8 9524645062
                // теперь тут всегда RUB ставим

                txtDataRow += "RUB";

                //string txtCurrCode = Convert.ToString(row["CURRENCY_CODE"]).Trim();
                //if (txtCurrCode.Length > 0)
                //{
                //    txtCurrCode = recodeValute(txtCurrCode);
                //    txtDataRow += cutEnd(txtCurrCode, 3);
                //}
                //else
                //{
                //    // попробовть взять код из номера счета
                //    txtCurrCode = getLetterValuteCod(txtAcc);
                //    if (txtCurrCode.Length > 0)
                //        txtDataRow += cutEnd(txtCurrCode, 3);
                //    else
                //    {
                //        txtDataRow += "null";
                //        // лучше отправить с null и получить квитанцию, чем совсем не отправлять
                //        // bDataError = true;
                //        // txtSkippedFields += "Валюта счета, ";
                //    }
                //}

                txtDataRow += "| name=";


                // Короткое наименование ОСП - параметр
                string txtShortName = OspParams.ShortOspName;
                if (txtShortName.Length > 0) txtDataRow += cutEnd(txtShortName, 50).Trim();
                else
                {
                    // лучше отправить с null и получить квитанцию, чем совсем не отправлять
                    txtDataRow += "null";
                    // bDataError = true;
                    // txtSkippedFields += "Сокращенное название ОСП, ";
                }
                // txtDataRow += "|";  - это последний параметр, его закрывать разделителем не нужно

                //// !!! временно
                txtDataRow += "| actId=";
                // txtActId = Convert.ToString(row["ACT_ID"]).Trim(); - заполнено в начале функции
                if (txtActId.Length > 0)
                {
                    txtDataRow += txtActId;
                }
                else
                {
                    txtDataRow += "null";
                }

                //// !!! временно

                // записать строчку в файл
                if (!bDataError)
                {
                    // есть ощущение, что такая частая запись в файл в медогоре почему-то глючит...
                    // поэтому в этом варианет функции файл записывается в одном месте
                    // а сейчас просто вернем строку
                    //WriteTofile(txtDataRow, txtFileName, Encoding.UTF8);
                    // 
                    return txtDataRow;
                }
                else
                {
                    // отрезать пробел и запятую в конце
                    if (txtSkippedFields.Length > 2) txtSkippedFields = txtSkippedFields.Substring(0, txtSkippedFields.Length - 2);

                    if(lErrLogger == null)
                        lErrLogger = new Logger_ufssprk_tools(lLogger.ConStr, -1, 9, txtAgreementCode, 0, lLogger.OspNum, "Пакет документов, которые не были выгружены в Сбербанк, т.к. в них не заполнены обязательные поля.\n");
                    // nErrorPackID = CreateLLog(conGIBDD, 9, -1, txtAgreementCode, 0, "Пакет документов, которые не были выгружены в Сбербанк, т.к. в них не заполнены обязательные поля.\n");

                    // пишем в лог что запрос не выгружен
                    // хорошо бы написать номер постановления, если он есть.
                    //txtErrLog += " \nПостановление СПИ № " + txtDocNumber + " не было выгружено т.к. не заполнен один из обязательных параметров: " + txtSkippedFields + ".";
                    lLogger.ErrMessage += " \nПостановление СПИ № " + txtDocNumber + " не было выгружено т.к. не заполнен один из обязательных параметров: " + txtSkippedFields + ".";
                    lLogger.WriteLLog("Постановление СПИ № " + txtDocNumber + " не было выгружено т.к. не заполнен один из обязательных параметров: " + txtSkippedFields + " . Строка с данными = '" + txtDataRow + "'.\n");

                    lErrLogger.WriteLLog("Постановление СПИ № " + txtDocNumber + " не было выгружено т.к. не заполнен один из обязательных параметров: " + txtSkippedFields + " . Строка с данными = '" + txtDataRow + "'.\n");
                    lErrLogger.AppendLLogCount(1);
                    
                    InsertShortErrorKvit(PKOSP_con, nAccID, lLogger.logID, txtSkippedFields, lLogger);
                    // сделать ++ для количества запросов в логе пакета
                    // AppendLLogCount(conGIBDD, nErrorPackID, 1);

                    return "";
                }
            }
            catch (Exception ex)
            {
                // MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //txtErrLog += " \nОшибка приложения. Message: " + ex.ToString();
                return "";
            }
        }

        public decimal InsertShortErrorKvit(OleDbConnection PKOSP_con, decimal nAccID, decimal nErrorPackID, string txtSkippedFields, Logger_ufssprk_tools lLogger)
        {
            decimal nNewID = 0;
            string txtAgreementCode = "СБЕР_ЭДО_10";
            string txtAgentCode = "Б_СБЕР_10";
            string txtAgentDeptCode = "8628_ЭДО";
            decimal nAct_id = GetActIdByAccID(PKOSP_con, nAccID, lLogger);
            //string txtMessage = Convert.ToString(row["ProcNumberState"]).Trim();
            string txtMessage = "Постановление не было отправлено в Сбербанк т.к. отсутствуют обязательные параметры: " + txtSkippedFields;
            int nStatus = 2; // Возврат - отсутствуют, либо не корректны  обязательные реквизиты - постановление не принято к исполнению
            string txtDocCode = GetDocCodeByAccID(PKOSP_con, nAccID, lLogger);
            nNewID = InsertKvitIntTable(PKOSP_con, nAct_id, txtMessage, nStatus, txtDocCode, nErrorPackID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, lLogger);
            return nNewID;
        }

        public Int64 WriteSberDocsToTxtFedMvv(string constrGIBDD, string constrPKOSP, string m_fullpath, string txtFileName, DataTable dtSberDocs, string txtAgreementCode, int i, int split_limit, ref Dictionary<string, int> dictDocsCount, ref Dictionary<string, int> dictActIDsCount, ref string txtCommonUserLog, int iFileNum, bool bUnloadLastRegNumber, OspOptions paramOsp, Logger_ufssprk_tools lLogger)
        {
            // OleDbConnection conGIBDD;
            // conGIBDD = new OleDbConnection(constrGIBDD);

            OleDbConnection conPKOSP;
            conPKOSP = new OleDbConnection(constrPKOSP);

            Decimal nErrorPackID = 0;
            Decimal LLogID = 0;
            Int64 iCnt = 0;
            Int64 iECnt = 0;

            Int64 iTotalDocsCount = 0;

            Dictionary<string, int> LdictDocsCount = new Dictionary<string, int>();
            Dictionary<string, int> LdictActIDsCount = new Dictionary<string, int>();
            

            File_funcs ff = new File_funcs();

            Logger_ufssprk_tools lLogger2 = null;
            Logger_ufssprk_tools lErrLogger2 = null;
            ArrayList alActAndAcc = new ArrayList();

            try
            {
                if (File.Exists(string.Format(@"{0}\{1}", m_fullpath, txtFileName)))
                {
                    lLogger.WriteLLog("По пути " + string.Format(@"{0}\{1}", m_fullpath, txtFileName) + ", указанном в конфигурационном файле, существует файл. Выгрузка прекращена, очистите папку вручную, если это необходимо.");
                    lLogger.ErrMessage += "По пути " + string.Format(@"{0}\{1}", m_fullpath, txtFileName) + ", указанном в конфигурационном файле, существует файл. Выгрузка прекращена, очистите папку вручную, если это необходимо.";
                    return iCnt; // завершить программу выходом
                }

                int iDocCnt = 0;
                if (dtSberDocs != null) iDocCnt = dtSberDocs.Rows.Count;

                // писать в лог что что-то делаем (заполнить справочники для логов)
                // добавить тип пакета - постановления СПИ
                // INSERT INTO PACK_TYPE (ID, TYPE) VALUES (9, 'Выгрузка постановлений в Сбербанк')
                // INSERT INTO AGREEMENTS (ID, AGREEMENT_CODE, NAME_AGREEMENT, DESCRIPTION) VALUES (280, 'СБЕР_ЭДО_10', 'СБЕР_ЭДО_10', NULL);
                lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 1, 9, txtAgreementCode, 0, lLogger.OspNum, "Пакет постановлений СПИ в Сбербанк № " + i.ToString() + ".");
                int nOutRows = split_limit;
                // если текущий пакет последний, то 
                //if ((i-1) * split_limit + nOutRows > dtSberDocs.Rows.Count) nOutRows = dtSberDocs.Rows.Count - (i-1) * split_limit;
                if (i * split_limit + nOutRows > dtSberDocs.Rows.Count) nOutRows = dtSberDocs.Rows.Count - i * split_limit;


                // записать сколько всего строк в таблице, которую обрабатываем
                lLogger2.WriteLLog(" \nВсего подготовлено строк с постановлениями (по количеству счетов) для выгрузки:  " + nOutRows.ToString() + "\n");


                decimal nPackID, nID;
                string txtPackID, txtID, txtActID, txtGaccMoneyID, txtAcсID;

                // string txtCommonUserLog = "";
                string txtCommonDataString = "";
                string txtErrLog = ""; // список ошибок формирования строк реестра
                string txtActAndAcc = "";

                if ((dtSberDocs != null) && (dtSberDocs.Rows.Count > 0))
                {
                    //foreach (DataRow row in dtSberDocs.Rows)
                    //{
                    //for (int j = (i - 1) * split_limit; j < i * split_limit && j < dtSberDocs.Rows.Count; j++)
                    lLogger2.WriteLLog(" \n" + DateTime.Now.ToShortDateString() + ' ' + DateTime.Now.ToShortTimeString() + " Выгрузка реестра запущена.");
                    for (int j = i * split_limit; j < (i + 1) * split_limit && j < dtSberDocs.Rows.Count; j++)
                    {
                        
                        DataRow row = dtSberDocs.Rows[j];

                        nID = 0;
                        txtID = Convert.ToString(row["acc_id"]);
                        if (!Decimal.TryParse(txtID, out nID))
                        {
                            nID = -1;
                        }

                        txtGaccMoneyID = Convert.ToString(row["gaccount_money_id"]); 
                        txtActID = Convert.ToString(row["act_id"]);
                        txtAcсID = Convert.ToString(row["acc_id"]);
                        txtActAndAcc = txtAcсID + txtGaccMoneyID;

                        // проверить что такую строкучку не выгружали еще
                        if (!alActAndAcc.Contains(txtActAndAcc))
                        {
                            // TODO: дописать выгрузку в файл YSS файла с ограничениями
                            // после выгрузки каждого постанвления надо делать update
                            // на основании данных gaccount_money_id - > 19 Завершено  и act_id - > 50 Исполнено полностью


                            // лог ошибок записи - будем его собирать и отправлять на E-mail, теперь должен писаться в lLogger2
                            // string txtCurrUserLog = "";  // заменили на txtErrLog
                            string txtDataString = ""; // сама строка
                            string txtDoc_code = ""; // код документа для подсчета статистики в словаре
                            string txtActId = "";
                            txtDataString = InsertSberDocRowToTxt2(conPKOSP, row, string.Format(@"{0}\{1}", m_fullpath, txtFileName), paramOsp, txtAgreementCode, out txtDoc_code, bUnloadLastRegNumber, lLogger2, lErrLogger2);
                            // txtDataString = InsertSberDocRowToTxt2(con,      row, string.Format(@"{0}\{1}", m_fullpath, txtFileName), paramOsp, ref nErrorPackID, txtAgreementCode, bUnloadLastRegNumber, out txtCurrUserLog, out txtDoc_code);

                            if (txtDataString.Length == 0)
                            {
                                iECnt++; // считаем ошибки
                                // Ошибка уже записана внутри InsertSberDocRowToTxt2
                                //lLogger2.MemoryLLog("Ошибка! Постановление СПИ в Сбербанк  id = " + nID.ToString() + " обработать не удалось.\n");
                            }


                            if (txtDataString.Length > 0)
                            {
                                // отсчитать счетчиком кол-во строк
                                iCnt++;
                                txtCommonDataString += txtDataString + "\n";

                                // на основании данных gaccount_money_id - > 19 Завершено  и act_id - > 50 Исполнено полностью
                                decimal nActId = 0;
                                decimal nGaccMoneyId = 0;
                                if (!Decimal.TryParse(txtActID, out nActId)) nActId = 0;
                                if (!Decimal.TryParse(txtGaccMoneyID, out nGaccMoneyId)) nGaccMoneyId = 0;
                                
                                // проверить работает ли этот update
                                if (nActId > 0) SetDocumentStatus(conPKOSP, nActId, 50, lLogger2);
                                if (nGaccMoneyId > 0) SetDocumentStatus(conPKOSP, nGaccMoneyId, 19, lLogger2);


                                // также нужно считать по словарю сколько каких постановлений было успешно записано
                                if (txtDoc_code.Length > 0)
                                {
                                    if (!dictDocsCount.ContainsKey(txtDoc_code)) dictDocsCount.Add(txtDoc_code, 0);
                                    if (!LdictDocsCount.ContainsKey(txtDoc_code)) LdictDocsCount.Add(txtDoc_code, 0);
                                    // dictDocsCount[txtDoc_code]++; - тут теперь не считаем - смотри ниже подсчет кол-ва постановлений
                                }

                                // а вот количество постановлений надо считать иначе
                                
                                if (txtActId.Length > 0)
                                {

                                    if (!dictActIDsCount.ContainsKey(txtActId))
                                    {
                                        dictActIDsCount.Add(txtActId, 0);

                                        dictDocsCount[txtDoc_code]++; // именно тут мы на самом деле считаем кол-во документов каждого вида
                                    }

                                    if (!LdictActIDsCount.ContainsKey(txtActId))
                                    {
                                        LdictActIDsCount.Add(txtActId, 0);

                                        LdictDocsCount[txtDoc_code]++; // именно тут мы на самом деле считаем кол-во документов каждого вида
                                    }

                                    dictActIDsCount[txtActId]++;
                                    LdictActIDsCount[txtActId]++;
                                }


                                // записать в лог
                                //WritePackLog(con, nPackID, "Обработан запрос # " + iCnt.ToString() + " ext_request_id = " + iCnt.ToString() + " ext_request_id = " + nID.ToString() + "\n");

                                // положительные логи не пишем сразу, а копим, пока ошибка не будет.
                                // WriteLLog(conGIBDD, LLogID, "Обработано постановление СПИ в Сбербанк # строки = " + iCnt.ToString() + " id  = " + nID.ToString() + " act_id = " + txtActId + "\n");
                                // txtGoodLog += "Обработано постановление СПИ в Сбербанк # строки = " + iCnt.ToString() + " id  = " + nID.ToString() + " act_id = " + txtActId + "\n";
                                lLogger2.MemoryLLog("Обработано постановление СПИ в Сбербанк # строки = " + iCnt.ToString() + " id  = " + nID.ToString() + " act_id = " + txtActId + "\n");
                            }

                            alActAndAcc.Add(txtActAndAcc);
                        }
                    }

                    // сообщения об ошибках собираем в txtErrLog 
                    if (lLogger2.ErrMessage.Length > 0)
                    {
                        txtErrLog += lLogger2.ErrMessage;
                    }

                    // записать все что было в Memory + метку окончания
                    lLogger2.WriteLLog(" \n" + DateTime.Now.ToShortDateString() + ' ' + DateTime.Now.ToShortTimeString() + " Выгрузка постановлений окончена");

                    bool bFileWrited = false;
                    // записать файл
                    // убрать ненужные \n на конце
                    txtCommonDataString = txtCommonDataString.TrimEnd('\n');
                    if (ff.WriteTofile(txtCommonDataString, string.Format(@"{0}\{1}", m_fullpath, txtFileName), Encoding.UTF8))
                    {
                        bFileWrited = true;
                        // файл успешно записан, можно формировать отчет

                        // и записать в ИТ proceed = 1
                        if ((dtSberDocs != null) && (dtSberDocs.Rows.Count > 0))
                        {
                            //foreach (DataRow row in dtSberDocs.Rows)
                            //{
                            //for (int j = (i - 1) * split_limit; j < i * split_limit && j < dtSberDocs.Rows.Count; j++)

                            // закомментировал т.к. тут нет инт. таблиц - и их не нужно обновлять
                            //for (int j = i * split_limit; j < (i + 1) * split_limit && j < dtSberDocs.Rows.Count; j++)
                            //{
                            //    DataRow row = dtSberDocs.Rows[j];

                            //    UpdateRestrictionRow(conPKOSP, row, lLogger2);
                            //}

                            // записать количество
                            lLogger2.UpdateLLogCount(Convert.ToInt32(iCnt));

                        }
                        // 2 - обработано
                        lLogger2.UpdateLLogStatus(2);
                        lLogger2.UpdateLLogFileName(txtFileName);
                        lLogger2.WriteLLog(" \n" + DateTime.Now.ToShortDateString() + ' ' + DateTime.Now.ToShortTimeString() + " реестр постановлений для Сбербанка выгружен в файл: " + m_fullpath + "\\" + txtFileName + "\nВсего в файл выгружено строк (по числу счетов) о постановлениях СПИ: " + iCnt.ToString() + " \nОшибок формирования строк: " + iECnt.ToString() + "\n");
                    }
                    else
                    {
                        // потом сообщение об ошибке
                        lLogger2.WriteLLog(" \nОшибка! Записать строки в файл " + string.Format(@"{0}\{1}", m_fullpath, txtFileName) + " не удалось.\n");
                        lLogger2.ErrMessage += " \nОшибка! Записать строки в файл " + string.Format(@"{0}\{1}", m_fullpath, txtFileName) + " не удалось.\n";
                    }

                    // задача перестать считать строки совсем, только постановления - и отчет выдавать в конце


                    if (bFileWrited)
                    {
                        lLogger2.WriteLLog("\nОтчет о выгрузке постановлений в пакет № " + (i + iFileNum).ToString());
                        lLogger2.WriteLLog("\nВыгружено постановлений:");
                        int iDocsCount = 0;
                        foreach (string key in LdictDocsCount.Keys)
                        {
                            lLogger2.WriteLLog("\n" + GetDocName(key) + ": ");
                            lLogger2.WriteLLog(LdictDocsCount[key].ToString() + ";");
                            iDocsCount += LdictDocsCount[key];
                        }
                        lLogger2.WriteLLog(" \nИтого счетов в постановлениях:" + iCnt.ToString());
                        lLogger2.WriteLLog(" \nИтого постановлений:" + iDocsCount.ToString());
                        iTotalDocsCount += iDocsCount;
                    }

                    //if (txtCommonUserLog.Length > 0)
                    //{
                    //        report.AddToReport("<br /><p><h3>Сообщения об ошибках:</h3>");
                    //        report.AddToReport(txtCommonUserLog + "</p>");
                    //}

                }
                // сохранить сообщение об ощибке
                if (lLogger2.ErrMessage.Length > 0) lLogger.ErrMessage += lLogger2.ErrMessage;

                //if (!archive_folder_tofind.Equals(""))
                //{
                //    // функция сама с датами и копиями разберется
                //    Copy(string.Format(@"{0}\{1}", m_fullpath, tofind_name), archive_folder_tofind);
                //}
            }
            catch (Exception ex)
            {
                // вписать ошибку в лог
                if (lLogger2 != null)
                {
                    lLogger2.WriteLLog(" \nОшибка приложения. Message: " + ex.ToString());
                    lLogger.ErrMessage += lLogger2.ErrMessage;
                }

                lLogger.ErrMessage += (" \nОшибка приложения. Message: " + ex.ToString());

            }

            return iCnt;
        }

        public Int64 WriteSberDocsToTxt(string constrGIBDD, string constrPKOSP, string m_fullpath, string txtFileName, DataTable dtSberDocs, string txtAgreementCode, int i, int split_limit, ref Dictionary<string, int> dictDocsCount, ref Dictionary<string, int> dictActIDsCount, ref string txtCommonUserLog, int iFileNum, bool bUnloadLastRegNumber, OspOptions paramOsp, Logger_ufssprk_tools lLogger)
        {
            // OleDbConnection conGIBDD;
            // conGIBDD = new OleDbConnection(constrGIBDD);

             OleDbConnection conPKOSP;
             conPKOSP = new OleDbConnection(constrPKOSP);

            Decimal nErrorPackID = 0;
            Decimal LLogID = 0;
            Int64 iCnt = 0;
            Int64 iECnt = 0;

            Int64 iTotalDocsCount = 0;

            Dictionary<string, int> LdictDocsCount = new Dictionary<string, int>();
            Dictionary<string, int> LdictActIDsCount = new Dictionary<string, int>();

            File_funcs ff = new File_funcs();

            Logger_ufssprk_tools lLogger2 = null;
            Logger_ufssprk_tools lErrLogger2 = null;
            

            try
            {
                if (File.Exists(string.Format(@"{0}\{1}", m_fullpath, txtFileName)))
                {
                    lLogger.WriteLLog("По пути " + string.Format(@"{0}\{1}", m_fullpath, txtFileName) + ", указанном в конфигурационном файле, существует файл. Выгрузка прекращена, очистите папку вручную, если это необходимо.");
                    lLogger.ErrMessage += "По пути " + string.Format(@"{0}\{1}", m_fullpath, txtFileName) + ", указанном в конфигурационном файле, существует файл. Выгрузка прекращена, очистите папку вручную, если это необходимо.";
                    return iCnt; // завершить программу выходом
                }

                int iDocCnt = 0;
                if (dtSberDocs != null) iDocCnt = dtSberDocs.Rows.Count;

                // писать в лог что что-то делаем (заполнить справочники для логов)
                // добавить тип пакета - постановления СПИ
                // INSERT INTO PACK_TYPE (ID, TYPE) VALUES (9, 'Выгрузка постановлений в Сбербанк')
                // INSERT INTO AGREEMENTS (ID, AGREEMENT_CODE, NAME_AGREEMENT, DESCRIPTION) VALUES (280, 'СБЕР_ЭДО_10', 'СБЕР_ЭДО_10', NULL);
                lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 1, 9, txtAgreementCode, 0, lLogger.OspNum, "Пакет постановлений СПИ в Сбербанк № " + i.ToString() + ".");
                int nOutRows = split_limit;
                int nSberDocsRowCount = 0;
                if (dtSberDocs != null && dtSberDocs.Rows.Count > 0) nSberDocsRowCount = dtSberDocs.Rows.Count;
                // если текущий пакет последний, то 
                //if ((i-1) * split_limit + nOutRows > dtSberDocs.Rows.Count) nOutRows = dtSberDocs.Rows.Count - (i-1) * split_limit;
                if (i * split_limit + nOutRows > nSberDocsRowCount) nOutRows = nSberDocsRowCount - i * split_limit;
                

                // записать сколько всего строк в таблице, которую обрабатываем
                lLogger2.WriteLLog(" \nВсего подготовлено строк с постановлениями (по количеству счетов) для выгрузки:  " + nOutRows.ToString() + "\n");


                decimal nPackID, nID;
                string txtPackID, txtID;
                
                // string txtCommonUserLog = "";
                string txtCommonDataString = "";
                string txtErrLog = ""; // список ошибок формирования строк реестра

                if ((dtSberDocs != null) && (dtSberDocs.Rows.Count > 0))
                {
                    //foreach (DataRow row in dtSberDocs.Rows)
                    //{
                    //for (int j = (i - 1) * split_limit; j < i * split_limit && j < dtSberDocs.Rows.Count; j++)
                    lLogger2.WriteLLog(" \n" + DateTime.Now.ToShortDateString() + ' ' + DateTime.Now.ToShortTimeString() + " Выгрузка реестра запущена.");
                    for (int j = i * split_limit; j < (i + 1) * split_limit && j < nSberDocsRowCount; j++)
                    {
                        DataRow row = dtSberDocs.Rows[j];
                    
                        nID = 0;
                        txtID = Convert.ToString(row["acc_id"]);
                        if (!Decimal.TryParse(txtID, out nID))
                        {
                            nID = -1;
                        }

                        // лог ошибок записи - будем его собирать и отправлять на E-mail, теперь должен писаться в lLogger2
                        // string txtCurrUserLog = "";  // заменили на txtErrLog
                        string txtDataString = ""; // сама строка
                        string txtDoc_code = ""; // код документа для подсчета статистики в словаре
                        string txtActId = ""; 
                        txtDataString = InsertSberDocRowToTxt2(conPKOSP, row, string.Format(@"{0}\{1}", m_fullpath, txtFileName), paramOsp, txtAgreementCode, out txtDoc_code, bUnloadLastRegNumber, lLogger2, lErrLogger2);
                        // txtDataString = InsertSberDocRowToTxt2(con,      row, string.Format(@"{0}\{1}", m_fullpath, txtFileName), paramOsp, ref nErrorPackID, txtAgreementCode, bUnloadLastRegNumber, out txtCurrUserLog, out txtDoc_code);

                        if (txtDataString.Length == 0) {
                            iECnt++; // считаем ошибки
                            // Ошибка уже записана внутри InsertSberDocRowToTxt2
                            //lLogger2.MemoryLLog("Ошибка! Постановление СПИ в Сбербанк  id = " + nID.ToString() + " обработать не удалось.\n");
                        }


                        if(txtDataString.Length > 0)
                        {
                            // отсчитать счетчиком кол-во строк
                            iCnt++;
                            txtCommonDataString += txtDataString + "\n";
                            
                            // также нужно считать по словарю сколько каких постановлений было успешно записано
                            if (txtDoc_code.Length > 0)
                            {
                                if (!dictDocsCount.ContainsKey(txtDoc_code)) dictDocsCount.Add(txtDoc_code, 0);
                                if (!LdictDocsCount.ContainsKey(txtDoc_code)) LdictDocsCount.Add(txtDoc_code, 0);
                                // dictDocsCount[txtDoc_code]++; - тут теперь не считаем - смотри ниже подсчет кол-ва постановлений
                            }

                            // а вот количество постановлений надо считать иначе
                            txtActId = Convert.ToString(row["ACT_ID"]).Trim();
                            if (txtActId.Length > 0)
                            {

                                if (!dictActIDsCount.ContainsKey(txtActId))
                                {
                                    dictActIDsCount.Add(txtActId, 0);

                                    dictDocsCount[txtDoc_code]++; // именно тут мы на самом деле считаем кол-во документов каждого вида
                                }
                                
                                if (!LdictActIDsCount.ContainsKey(txtActId))
                                {
                                    LdictActIDsCount.Add(txtActId, 0);

                                    LdictDocsCount[txtDoc_code]++; // именно тут мы на самом деле считаем кол-во документов каждого вида
                                }
                                
                                dictActIDsCount[txtActId]++;
                                LdictActIDsCount[txtActId]++;
                            }


                            // записать в лог
                            //WritePackLog(con, nPackID, "Обработан запрос # " + iCnt.ToString() + " ext_request_id = " + iCnt.ToString() + " ext_request_id = " + nID.ToString() + "\n");

                            // положительные логи не пишем сразу, а копим, пока ошибка не будет.
                            // WriteLLog(conGIBDD, LLogID, "Обработано постановление СПИ в Сбербанк # строки = " + iCnt.ToString() + " id  = " + nID.ToString() + " act_id = " + txtActId + "\n");
                            // txtGoodLog += "Обработано постановление СПИ в Сбербанк # строки = " + iCnt.ToString() + " id  = " + nID.ToString() + " act_id = " + txtActId + "\n";
                            lLogger2.MemoryLLog("Обработано постановление СПИ в Сбербанк # строки = " + iCnt.ToString() + " id  = " + nID.ToString() + " act_id = " + txtActId + "\n");
                        }
                        
                        
                    }

                    // сообщения об ошибках собираем в txtErrLog 
                        if(lLogger2.ErrMessage.Length > 0){
                            txtErrLog += lLogger2.ErrMessage;
                        }

                    // записать все что было в Memory + метку окончания
                    lLogger2.WriteLLog(" \n" + DateTime.Now.ToShortDateString() + ' ' + DateTime.Now.ToShortTimeString() + " Выгрузка постановлений окончена");

                    bool bFileWrited = false;
                    // записать файл
                    // убрать ненужные \n на конце
                    txtCommonDataString = txtCommonDataString.TrimEnd('\n');
                    if (ff.WriteTofile(txtCommonDataString, string.Format(@"{0}\{1}", m_fullpath, txtFileName), Encoding.UTF8))
                    {
                        bFileWrited = true;
                        // файл успешно записан, можно формировать отчет
                        
                        // и записать в ИТ proceed = 1
                        if ((dtSberDocs != null) && (dtSberDocs.Rows.Count > 0))
                        {
                            //foreach (DataRow row in dtSberDocs.Rows)
                            //{
                            //for (int j = (i - 1) * split_limit; j < i * split_limit && j < dtSberDocs.Rows.Count; j++)
                            for (int j = i * split_limit; j < (i + 1) * split_limit && j < nSberDocsRowCount; j++)
                            {
                                DataRow row = dtSberDocs.Rows[j];

                                UpdateRestrictionRow(conPKOSP, row, lLogger2);
                            }

                            // записать количество
                            lLogger2.UpdateLLogCount(Convert.ToInt32(iCnt));
                            
                        }
                        // 2 - обработано
                        lLogger2.UpdateLLogStatus(2);
                        lLogger2.UpdateLLogFileName(txtFileName);
                        lLogger2.WriteLLog(" \n" + DateTime.Now.ToShortDateString() + ' ' + DateTime.Now.ToShortTimeString() + " реестр постановлений для Сбербанка выгружен в файл: " + m_fullpath + "\\" + txtFileName + "\nВсего в файл выгружено строк (по числу счетов) о постановлениях СПИ: " + iCnt.ToString() + " \nОшибок формирования строк: " + iECnt.ToString() + "\n");
                    }
                    else
                    {
                       // потом сообщение об ошибке
                        lLogger2.WriteLLog(" \nОшибка! Записать строки в файл " + string.Format(@"{0}\{1}", m_fullpath, txtFileName) +  " не удалось.\n");
                        lLogger2.ErrMessage += " \nОшибка! Записать строки в файл " + string.Format(@"{0}\{1}", m_fullpath, txtFileName) + " не удалось.\n";
                    }

                    // задача перестать считать строки совсем, только постановления - и отчет выдавать в конце

                    
                    if (bFileWrited)
                    {
                        lLogger2.WriteLLog("\nОтчет о выгрузке постановлений в пакет № " + (i+iFileNum).ToString());
                        lLogger2.WriteLLog("\nВыгружено постановлений:");
                        int iDocsCount = 0;
                        foreach (string key in LdictDocsCount.Keys)
                        {
                            lLogger2.WriteLLog("\n" + GetDocName(key) + ": ");
                            lLogger2.WriteLLog(LdictDocsCount[key].ToString() + ";");
                            iDocsCount += LdictDocsCount[key];
                        }
                        lLogger2.WriteLLog(" \nИтого счетов в постановлениях:" + iCnt.ToString());
                        lLogger2.WriteLLog(" \nИтого постановлений:" + iDocsCount.ToString());
                        iTotalDocsCount += iDocsCount;
                    }

                    //if (txtCommonUserLog.Length > 0)
                    //{
                    //        report.AddToReport("<br /><p><h3>Сообщения об ошибках:</h3>");
                    //        report.AddToReport(txtCommonUserLog + "</p>");
                    //}
                    
                }
                // сохранить сообщение об ощибке
                if(lLogger2.ErrMessage.Length > 0) lLogger.ErrMessage += lLogger2.ErrMessage;

                //if (!archive_folder_tofind.Equals(""))
                //{
                //    // функция сама с датами и копиями разберется
                //    Copy(string.Format(@"{0}\{1}", m_fullpath, tofind_name), archive_folder_tofind);
                //}
            }
            catch (Exception ex)
            {
                // вписать ошибку в лог
                if (lLogger2 != null)
                {
                    lLogger2.WriteLLog(" \nОшибка приложения. Message: " + ex.ToString());
                    lLogger.ErrMessage += lLogger2.ErrMessage;
                }

                lLogger.ErrMessage += (" \nОшибка приложения. Message: " + ex.ToString());
               
            }

            return iCnt;
        }

        public string GetDocName(string txtDocCode)
        {
            string txtRes = "";

            // Тип документа
            // 1 - Арест; 2 - Обращение взыскания; 3 - Снятие ареста
            //  Постановление об обращении - O_IP_ACT_GACCOUNT_MONEY,
            // 1- O_IP_ACT_ARREST_ACCMONEY - Постановление о наложении ареста на ДС, находящиеся в банке или иной кредитной организации
            // 2- O_IP_ACT_GACCOUNT_MONEY - Постановление об обращении взыскания на ДС должника, находящиеся в банке или иной кредитной организации
            // 2-  O_IP_ACT_CURRENCY_ROUB - Постановление об обращении взыскания на ДС в валюте при исчислении долга в руб.
            // 3 -  O_IP_ACT_ENDARREST - Постановление о снятии ареста с ДС на счете
            // 5 - O_IP_ACT_ENDGACCOUNT_MONEY - Постановление об отмене постановления об обращении взыскания на ДС
            // // 5 -  O_IP_ACT_DBT_CANCEL -  Постановление об отмене мер по обращению взыскания на доходы должника

            switch (txtDocCode.Trim())
            {
                case "O_IP_ACT_ARREST_ACCMONEY": txtRes = "Постановление о наложении ареста на ДС, находящиеся в банке или иной кредитной организации"; break;
                case "O_IP_ACT_GACCOUNT_MONEY": txtRes = "Постановление об обращении взыскания на ДС должника, находящиеся в банке или иной кредитной организации"; break;
                case "O_IP_ACT_ENDARREST": txtRes = "Постановление о снятии ареста с ДС на счете"; break;
                case "O_IP_ACT_ENDGACCOUNT_MONEY": txtRes = "Постановление об отмене постановления об обращении взыскания на ДС"; break;
                // case "O_IP_ACT_CURRENCY_ROUB": nRes = 2; break;
            }

            return txtRes;

        }

        public decimal GetChangeDbtReason(OleDbConnection con, string txtReasonName, Logger_ufssprk_tools lLogger)
        {
            OleDbTransaction tran = null;
            string txtSql = "";
            decimal res = -1;
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();

                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                txtSql = "select first 1 r.id from CHANGEDBT_REASON r where r.CHANGEDBT_REASON_DESCR = '" + txtReasonName + "'";

                OleDbCommand cmd = new OleDbCommand(txtSql, con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }

                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }


            if (con != null)
            {
                con.Close();
            }

            return res;
        }

        public DataTable GetEgrulData(OleDbConnection con, OleDbConnection conED, string txtInn, string txtKpp, ref string txtOldInn, ref string txtOldKpp, string txtOldAdr, string txtOldName, Logger_ufssprk_tools lLogger)
        {
            DataTable dtRes = null;
            OleDbTransaction tran = null;
            string txtSql = "select first 1 egrul.ul_name_namep as name, egrul.ul_address_text as adr from egrul where inn = '" + txtInn + "' and egrul.kpp = '" + txtKpp + "' order by egrul.idul desc";

            // string txtAdres, string txtNaimOrg, string txtInn, string txtKpp;
            
            // 1. проверить ИНН и КПП - если совпадает со старыми - то вернуть таблицу со старыми значениями
            if (txtInn.Equals(txtOldInn) && txtKpp.Equals(txtOldKpp))
            {
                dtRes = GetEgrulDataTable();
                DataRow row = dtRes.NewRow();
                row["adr"] = txtOldAdr;
                row["name"] = txtOldName;
                dtRes.Rows.Add(row);
                return dtRes;
            }
            else
            {
                // 2. если отличается - то сделать поиск по базе ОСП
                dtRes = GetDataTableFromFB(con, txtSql, "EGRUL", lLogger);
                
                // 3. если в базе ОСП не найдено - то искать без КПП
                if (dtRes == null || dtRes.Rows.Count == 0)
                {
                    txtSql = "select first 1 egrul.ul_name_namep as name, egrul.ul_address_text as adr from egrul where inn = '" + txtInn + "' order by egrul.idul desc";
                    dtRes = GetDataTableFromFB(con, txtSql, "EGRUL", lLogger);
                }
                // 4. если в базе ОСП не найдено и без КПП - то искать по ЭД
                if (dtRes == null || dtRes.Rows.Count == 0)
                {
                    txtSql = "select first 1 egrul.ul_name_namep as name, egrul.ul_address_text as adr from egrul where inn = '" + txtInn + "' and egrul.kpp = '" + txtKpp + "' order by egrul.idul desc";
                    dtRes = GetDataTableFromFB(conED, txtSql, "EGRUL", lLogger);
                }

                // 5. если в базе ЭД не найдено - то искать без КПП
                if (dtRes == null || dtRes.Rows.Count == 0)
                {
                    txtSql = "select first 1 egrul.ul_name_namep as name, egrul.ul_address_text as adr from egrul where inn = '" + txtInn + "' order by egrul.idul desc";
                    dtRes = GetDataTableFromFB(conED, txtSql, "EGRUL", lLogger);
                }
            }
            
            // 4. поменять txtInn и txtKpp
            txtOldInn = txtInn;
            txtOldKpp = txtKpp;

            // нужно ли менять OldName, OldAdr здесь?


            if (con != null)
            {
                con.Close();
            }

            return dtRes;
        }



        public decimal GetContrID(OleDbConnection con, int iSourceID, Logger_ufssprk_tools lLogger)
        {
            OleDbTransaction tran = null;
            string txtSql = "";
            decimal res = -1;
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();

                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                txtSql = "select entt_id from CONTR WHERE ID = " + Convert.ToString(iSourceID);

                OleDbCommand cmd = new OleDbCommand(txtSql, con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                if (tran != null) {
                    tran.Rollback();
                }

                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }


            if (con != null)
            {
                con.Close();
            }

            return res;
        }

        public decimal ID_InsertPlatDocTo_PK_OSP(OleDbConnection con, decimal nStatus, decimal nUserID, double nAmount, DateTime dtIdate, decimal nIP_ID, DateTime dtExtDocDate, string txtExtDocNum, decimal nContrID, string txtFIO_D, Logger_ufssprk_tools lLogger)
        {

            OleDbCommand cmdIP, cmd, cmdInsDoc, cmdInsI, cmdInsI_IP, cmdInsI_DEPOSIT, cmdInsI_OP_CS, cmdInsI_OP_CS_ENDDBT;
            Decimal newID, prevID;
            OleDbTransaction tran = null;
            DataSet dsIP_params;
            DataTable dtIP_params;
            decimal nIPNO_NUM = 0;
            string txtIP_DocNumber = "";
            decimal nSUSER_ID;
            string txtSUSER = "";
            string txtID_DEBTCLS_NAME = "";
            decimal nID_DEBTCLS = 0;
            string txtID_DEBTTEXT = "";
            string txtContrName = "";
            string txtContrAdr = "";
            decimal id_dbtr = 0;

            try
            {
                // самое лучшее решение - это выбрать contr_id из i_id и передать сюда

                dsIP_params = new DataSet();
                dtIP_params = dsIP_params.Tables.Add("IP_params");
                newID = 0;
                prevID = 0;
                id_dbtr = 0;

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();

                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // узнать параметры ИП по ИД

                cmdIP = new OleDbCommand();
                cmdIP.Connection = con;
                cmdIP.Transaction = tran;
                //cmdIP.CommandText = "select d_ip_d.id_dbtr_name, d_ip_d.id_dbtr_adr, d.docstatusid, d.doc_number, d_ip.id_dbtr, d_ip.ip_exec_prist, d_ip.ip_exec_prist_name, d_ip_d.id_docdate, d_ip.id_debttext, d_ip.ipno_num  from doc_ip_doc d_ip_d left join doc_ip d_ip on d_ip_d.id = d_ip.id left join document d on d_ip_d.id = d.id where d_ip_d.id = :IP_ID";
                cmdIP.CommandText = "select d_ip_d.id_dbtr_name, d_ip_d.id_dbtr_adr, d.docstatusid, d.doc_number, d_ip.id_dbtr, d_ip.ip_exec_prist, d_ip.ip_exec_prist_name, d_ip_d.id_docdate, d_ip.id_debttext, d_ip.ipno_num, d_ip_d.id_debtcls, d_ip.id_debtcls_name  from doc_ip_doc d_ip_d left join doc_ip d_ip on d_ip_d.id = d_ip.id left join document d on d_ip_d.id = d.id where d_ip_d.id = :IP_ID";
                cmdIP.Parameters.Add(new OleDbParameter(":IP_ID", Convert.ToDecimal(nIP_ID)));
                using (OleDbDataReader rdr = cmdIP.ExecuteReader(CommandBehavior.Default))
                {
                    dsIP_params.Load(rdr, LoadOption.OverwriteChanges, dtIP_params);
                    rdr.Close();
                }

                if ((dsIP_params != null) && (dsIP_params.Tables.Count > 0))
                {
                    txtIP_DocNumber = Convert.ToString(dsIP_params.Tables[0].Rows[0]["doc_number"]);
                    nIPNO_NUM = Convert.ToDecimal(dsIP_params.Tables[0].Rows[0]["ipno_num"]);
                    nSUSER_ID = Convert.ToDecimal(dsIP_params.Tables[0].Rows[0]["ip_exec_prist"]);
                    txtSUSER = Convert.ToString(dsIP_params.Tables[0].Rows[0]["ip_exec_prist_name"]);
                    txtID_DEBTCLS_NAME = Convert.ToString(dsIP_params.Tables[0].Rows[0]["id_debtcls_name"]);
                    nID_DEBTCLS = Convert.ToDecimal(dsIP_params.Tables[0].Rows[0]["id_debtcls"]);
                    txtID_DEBTTEXT = Convert.ToString(dsIP_params.Tables[0].Rows[0]["id_debttext"]);
                    txtContrName = Convert.ToString(dsIP_params.Tables[0].Rows[0]["id_dbtr_name"]); // теперь отправителем будет сам должник
                    txtContrAdr = Convert.ToString(dsIP_params.Tables[0].Rows[0]["id_dbtr_adr"]);

                    if (nSUSER_ID > 0)
                    {
                        nUserID = nSUSER_ID;
                    }
                }
                else
                {
                    return -1;
                }

                // получить новый ключ
                cmd = new OleDbCommand("SELECT gen_id(seq_document, 1) FROM RDB$DATABASE", con, tran);
                newID = Convert.ToDecimal(cmd.ExecuteScalar());

                // вставить DOCUMENT
                cmdInsDoc = new OleDbCommand();
                cmdInsDoc.Connection = con;
                cmdInsDoc.Transaction = tran;
                cmdInsDoc.CommandText = "insert into DOCUMENT (ID, METAOBJECTNAME, DOCSTATUSID, DOCUMENTCLASSID, CREATE_DATE, SUSER_ID, AMOUNT)";
                cmdInsDoc.CommandText += " VALUES (:ID, 'I_OP_CS_ENDDBT', :DOCSTATUSID, :DOCUMENTCLASSID, :CREATE_DATE, :SUSER_ID, :AMOUNT)";

                cmdInsDoc.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));

                //cmdInsDoc.Parameters.Add(new OleDbParameter(":DOCSTATUSID", Convert.ToDecimal(1)));
                cmdInsDoc.Parameters.Add(new OleDbParameter(":DOCSTATUSID", Convert.ToDecimal(nStatus)));

                cmdInsDoc.Parameters.Add(new OleDbParameter(":DOCUMENTCLASSID", Convert.ToDecimal(78)));
                //cmdInsDoc.Parameters.Add(new OleDbParameter(":PARENT_ID", Convert.ToDecimal(nID)));
                cmdInsDoc.Parameters.Add(new OleDbParameter(":CREATE_DATE", DateTime.Now));
                cmdInsDoc.Parameters.Add(new OleDbParameter(":SUSER_ID", Convert.ToDecimal(nUserID)));
                cmdInsDoc.Parameters.Add(new OleDbParameter(":AMOUNT", Convert.ToDouble(nAmount)));


                if (cmdInsDoc.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to document table parent_id = " + newID.ToString());
                    throw ex;
                }

                // вставить I
                // - Отправитель 	I.CONTR_NAME
                // - Адрес отправителя I.ADR


                cmdInsI = new OleDbCommand();
                cmdInsI.Connection = con;
                cmdInsI.Transaction = tran;
                cmdInsI.CommandText = "insert into I (ID, PAGECNT, APPNCNT, SECURTYPE, APPBNPAGECNT, I_IDATE, EXTDOCDATE, EXTDOCNO, CONTR, CONTR_NAME, ADR, OFF_SPECIAL_CONTROL, CONTR_IS_INITIATOR, DOC_ELECTRON)";
                cmdInsI.CommandText += "  VALUES (:ID, 1, 0, 2, 0, :I_IDATE, :EXTDOCDATE, :EXTDOCNO, :CONTR, :CONTR_NAME, :ADR, 0, 0, 0)";
                
                cmdInsI.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                //cmdInsI.Parameters.Add(new OleDbParameter(":I_IDATE", dtIdate));
                cmdInsI.Parameters.Add(new OleDbParameter(":I_IDATE", DateTime.Today));
                cmdInsI.Parameters.Add(new OleDbParameter(":EXTDOCDATE", dtExtDocDate));
                cmdInsI.Parameters.Add(new OleDbParameter(":EXTDOCNO", txtExtDocNum));
                cmdInsI.Parameters.Add(new OleDbParameter(":CONTR", nContrID));
                cmdInsI.Parameters.Add(new OleDbParameter(":CONTR_NAME", txtContrName));
                cmdInsI.Parameters.Add(new OleDbParameter(":ADR", txtContrAdr));
                // новое поле - ставим 1 чтобы не было на контроле
                
                // 20151006 - поставил ContrIsInitiator="false"
                // 20151006 - поставил OffSpecialControl="false"

                if (cmdInsI.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to I table id = " + newID.ToString());
                    throw ex;

                }


                // вставить I_IP


                cmdInsI_IP = new OleDbCommand();
                cmdInsI_IP.Connection = con;
                cmdInsI_IP.Transaction = tran;
                cmdInsI_IP.CommandText = "insert into I_IP (ID, IP_DOC_NUMBER,IP_ID, IPNO_NUM, ID_DEBTCLS, IP_EXEC_PRIST, IP_EXEC_PRIST_NAME)";
                cmdInsI_IP.CommandText += "  VALUES (:ID, :IP_DOC_NUMBER, :IP_ID, :IPNO_NUM, :ID_DEBTCLS, :IP_EXEC_PRIST, :IP_EXEC_PRIST_NAME)";

                cmdInsI_IP.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdInsI_IP.Parameters.Add(new OleDbParameter(":IP_DOC_NUMBER", Convert.ToString(txtIP_DocNumber)));
                cmdInsI_IP.Parameters.Add(new OleDbParameter(":IP_ID", Convert.ToDecimal(nIP_ID)));
                cmdInsI_IP.Parameters.Add(new OleDbParameter(":IPNO_NUM", Convert.ToDecimal(nIPNO_NUM)));
                cmdInsI_IP.Parameters.Add(new OleDbParameter(":ID_DEBTCLS", nID_DEBTCLS));
                cmdInsI_IP.Parameters.Add(new OleDbParameter(":IP_EXEC_PRIST", Convert.ToDecimal(nSUSER_ID)));
                cmdInsI_IP.Parameters.Add(new OleDbParameter(":IP_EXEC_PRIST_NAME", Convert.ToString(txtSUSER)));
                
                if (cmdInsI_IP.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to I_IP table id = " + newID.ToString());
                    throw ex;
                }


                // вставить I_DEPOSIT 

                cmdInsI_DEPOSIT = new OleDbCommand();
                cmdInsI_DEPOSIT.Connection = con;
                cmdInsI_DEPOSIT.Transaction = tran;
                cmdInsI_DEPOSIT.CommandText = "insert into I_DEPOSIT (ID)";
                cmdInsI_DEPOSIT.CommandText += "  VALUES (:ID)";
                cmdInsI_DEPOSIT.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));

                if (cmdInsI_DEPOSIT.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to I_DEPOSIT  table id = " + newID.ToString());
                    throw ex;

                }

                // вставить I_OP_CS
                // тут есть параметр - причина.
                // штраф ГИБДД не подходит для всего под
                // 101
                // Погашение взыскателю (РИЦ ЖХ)

                // 102
                // Погашение взыскателю (КРЦ)


                cmdInsI_OP_CS = new OleDbCommand();
                cmdInsI_OP_CS.Connection = con;
                cmdInsI_OP_CS.Transaction = tran;
                cmdInsI_OP_CS.CommandText = "insert into I_OP_CS (ID, CHANGEDBT_REASON_ID, CHANGEDBT_REASON_DESCR, I_OP_CS_CHANGESUM)";
                cmdInsI_OP_CS.CommandText += "  VALUES (:ID, 3, 'Оплата штрафа в ГИБДД', :I_OP_CS_CHANGESUM)";
                cmdInsI_OP_CS.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdInsI_OP_CS.Parameters.Add(new OleDbParameter(":I_OP_CS_CHANGESUM", Convert.ToDouble(nAmount)));

                if (cmdInsI_OP_CS.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to I_OP_CS  table id = " + newID.ToString());
                    throw ex;

                }

                // вставить I_OP_CS_ENDDBT

                cmdInsI_OP_CS_ENDDBT = new OleDbCommand();
                cmdInsI_OP_CS_ENDDBT.Connection = con;
                cmdInsI_OP_CS_ENDDBT.Transaction = tran;
                cmdInsI_OP_CS_ENDDBT.CommandText = "insert into I_OP_CS_ENDDBT (ID, DOC_DATE_F)";
                cmdInsI_OP_CS_ENDDBT.CommandText += "  VALUES (:ID, :DOC_DATE_F)";
                cmdInsI_OP_CS_ENDDBT.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdInsI_OP_CS_ENDDBT.Parameters.Add(new OleDbParameter(":DOC_DATE_F", dtExtDocDate));

                if (cmdInsI_OP_CS_ENDDBT.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to I_OP_CS_ENDDBT  table id = " + newID.ToString());
                    throw ex;

                }

                tran.Commit();
                con.Close();

                return newID;

            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    //MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }
            return -1;
        }
        
        public bool UpdateGibddPlatezhLong(OleDbConnection conG, string txtNumber, string txtNumDoc, string txtFioD, string txtIshNumber, double nSum, int iValue, int iContrSource, Logger_ufssprk_tools lLogger)
        {

            OleDbCommand cmdU;
            OleDbTransaction tran = null;

            try
            {
                if (conG != null && conG.State != ConnectionState.Closed) conG.Close();
                conG.Open();

                tran = conG.BeginTransaction(IsolationLevel.ReadCommitted);

                // вставить MVV_DATA_RESPONSE

                cmdU = new OleDbCommand();
                cmdU.Connection = conG;
                cmdU.Transaction = tran;
                //cmdU.CommandText = "update GIBDD_PLATEZH SET FL_USE = :FL_USE WHERE NUMBER = :NUMBER and SOURCE_ID = :SOURCE_ID and NUM_DOC = :NUM_DOC";
                cmdU.CommandText = "update GIBDD_PLATEZH SET FL_USE = :FL_USE WHERE NUMBER = :NUMBER and SOURCE_ID = :SOURCE_ID and NUM_DOC = :NUM_DOC";
                cmdU.CommandText += " and FIO_D = :FIO_D and ISH_NUMBER = :ISH_NUMBER and SUMM_DOC = :SUMM_DOC";


                cmdU.Parameters.Add(new OleDbParameter(":FL_USE", iValue));
                cmdU.Parameters.Add(new OleDbParameter(":NUMBER", txtNumber));
                cmdU.Parameters.Add(new OleDbParameter(":SOURCE_ID", iContrSource));
                cmdU.Parameters.Add(new OleDbParameter(":NUM_DOC", txtNumDoc));
                cmdU.Parameters.Add(new OleDbParameter(":FIO_D", txtFioD));
                cmdU.Parameters.Add(new OleDbParameter(":ISH_NUMBER", txtIshNumber));
                cmdU.Parameters.Add(new OleDbParameter(":SUMM_DOC", Convert.ToDouble(nSum)));

                if (cmdU.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error updating row in GIBDD_PLATEZH table NUMBER = " + txtNumber);
                    throw ex;
                }

                tran.Commit();
                conG.Close();

                return true;
            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (conG != null)
                {
                    conG.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (conG != null)
                {
                    conG.Close();
                }
            }
            return false;
        }


        public bool UpdateGibddPlatezh(OleDbConnection conG, string txtNumber, string txtNumDoc, int iValue, int iContrSource, Logger_ufssprk_tools lLogger)
        {

            OleDbCommand cmdU;
            OleDbTransaction tran = null;

            try
            {
                if (conG != null && conG.State != ConnectionState.Closed) conG.Close();
                conG.Open();

                tran = conG.BeginTransaction(IsolationLevel.ReadCommitted);

                // вставить MVV_DATA_RESPONSE

                cmdU = new OleDbCommand();
                cmdU.Connection = conG;
                cmdU.Transaction = tran;
                cmdU.CommandText = "update GIBDD_PLATEZH SET FL_USE = :FL_USE WHERE NUMBER = :NUMBER and SOURCE_ID = :SOURCE_ID and NUM_DOC = :NUM_DOC";

                cmdU.Parameters.Add(new OleDbParameter(":FL_USE", iValue));
                cmdU.Parameters.Add(new OleDbParameter(":NUMBER", txtNumber));
                cmdU.Parameters.Add(new OleDbParameter(":SOURCE_ID", iContrSource));
                cmdU.Parameters.Add(new OleDbParameter(":NUM_DOC", txtNumDoc));
                

                if (cmdU.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error updating row in GIBDD_PLATEZH table NUMBER = " + txtNumber);
                    throw ex;
                }

                tran.Commit();
                conG.Close();

                return true;
            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (conG != null)
                {
                    conG.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (conG != null)
                {
                    conG.Close();
                }
            }
            return false;
        }


        public decimal ID_InsertOtherIP_DocTo_PK_OSP(OleDbConnection con, decimal nStatus, decimal nUserID, DateTime dtIdate, decimal nIP_ID, DateTime dtExtDocDate, string txtExtDocNum, string txtContent, decimal nContrID, Logger_ufssprk_tools lLogger)
        {

            OleDbCommand cmdIP, cmd, cmdInsDoc, cmdInsI, cmdInsI_IP, cmdInsI_IP_OTHER;
            Decimal newID, prevID;
            OleDbTransaction tran = null;
            DataSet dsIP_params;
            DataTable dtIP_params;
            decimal nIPNO_NUM = 0;
            string txtIP_DocNumber = "";
            decimal nSUSER_ID;
            string txtSUSER = "";
            string txtID_DEBTCLS_NAME = "";
            decimal nID_DEBTCLS = 0;
            string txtContrName = "";
            string txtContrAdr = "";

            try
            {
                txtContrName = GetLegal_Name(nContrID, con, lLogger);
                txtContrAdr = GetLegal_Adr(nContrID, con, lLogger);

                dsIP_params = new DataSet();
                dtIP_params = dsIP_params.Tables.Add("IP_params");
                newID = 0;
                prevID = 0;

                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);

                // узнать параметры ИП по ИД

                cmdIP = new OleDbCommand();
                cmdIP.Connection = con;
                cmdIP.Transaction = tran;
                cmdIP.CommandText = "select d.docstatusid, d.doc_number, d_ip.ip_exec_prist, d_ip.ip_exec_prist_name, d_ip_d.id_docdate, d_ip.id_debttext, d_ip.ipno_num, d_ip_d.id_debtcls  from doc_ip_doc d_ip_d left join doc_ip d_ip on d_ip_d.id = d_ip.id left join document d on d_ip_d.id = d.id where d_ip_d.id = :IP_ID";
                cmdIP.Parameters.Add(new OleDbParameter(":IP_ID", Convert.ToDecimal(nIP_ID)));
                using (OleDbDataReader rdr = cmdIP.ExecuteReader(CommandBehavior.Default))
                {
                    dsIP_params.Load(rdr, LoadOption.OverwriteChanges, dtIP_params);
                    rdr.Close();
                }

                if ((dsIP_params != null) && (dsIP_params.Tables.Count > 0))
                {
                    txtIP_DocNumber = Convert.ToString(dsIP_params.Tables[0].Rows[0]["doc_number"]);
                    nIPNO_NUM = Convert.ToDecimal(dsIP_params.Tables[0].Rows[0]["ipno_num"]);
                    nSUSER_ID = Convert.ToDecimal(dsIP_params.Tables[0].Rows[0]["ip_exec_prist"]);
                    txtSUSER = Convert.ToString(dsIP_params.Tables[0].Rows[0]["ip_exec_prist_name"]);
                    txtID_DEBTCLS_NAME = Convert.ToString(dsIP_params.Tables[0].Rows[0]["id_debttext"]);
                    nID_DEBTCLS = Convert.ToDecimal(dsIP_params.Tables[0].Rows[0]["id_debtcls"]);
                    if (nSUSER_ID > 0)
                    {
                        nUserID = nSUSER_ID;
                    }
                }
                else
                {
                    return -1;
                }

                // получить новый ключ
                cmd = new OleDbCommand("SELECT gen_id(seq_document, 1) FROM RDB$DATABASE", con, tran);
                newID = Convert.ToDecimal(cmd.ExecuteScalar());

                // вставить DOCUMENT
                cmdInsDoc = new OleDbCommand();
                cmdInsDoc.Connection = con;
                cmdInsDoc.Transaction = tran;
                cmdInsDoc.CommandText = "insert into DOCUMENT (ID, METAOBJECTNAME, DOCSTATUSID, DOCUMENTCLASSID, CREATE_DATE, SUSER_ID)";
                cmdInsDoc.CommandText += " VALUES (:ID, 'I_IP_OTHER', :DOCSTATUSID, :DOCUMENTCLASSID, :CREATE_DATE, :SUSER_ID)";

                cmdInsDoc.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));

                //cmdInsDoc.Parameters.Add(new OleDbParameter(":DOCSTATUSID", Convert.ToDecimal(1)));
                cmdInsDoc.Parameters.Add(new OleDbParameter(":DOCSTATUSID", Convert.ToDecimal(nStatus)));

                // cmdInsDoc.Parameters.Add(new OleDbParameter(":DOCUMENTCLASSID", Convert.ToDecimal(11))); // класс документооборота для объекта I - Ыходящий документ
                cmdInsDoc.Parameters.Add(new OleDbParameter(":DOCUMENTCLASSID", Convert.ToDecimal(272))); // класс документооборота для объекта I - Ыходящий документ

                //cmdInsDoc.Parameters.Add(new OleDbParameter(":PARENT_ID", Convert.ToDecimal(nID)));
                cmdInsDoc.Parameters.Add(new OleDbParameter(":CREATE_DATE", DateTime.Now));
                cmdInsDoc.Parameters.Add(new OleDbParameter(":SUSER_ID", Convert.ToDecimal(nUserID)));
                //cmdInsDoc.Parameters.Add(new OleDbParameter(":AMOUNT", Convert.ToDouble(nAmount)));


                if (cmdInsDoc.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to document table parent_id = " + newID.ToString());
                    throw ex;
                }

                // вставить I

                cmdInsI = new OleDbCommand();
                cmdInsI.Connection = con;
                cmdInsI.Transaction = tran;
                cmdInsI.CommandText = "insert into I (ID, PAGECNT, APPNCNT, SECURTYPE, APPBNPAGECNT, I_IDATE, EXTDOCDATE, EXTDOCNO, CONTR, CONTR_NAME, ADR, EXECUTOR, EXECUTOR_NAME, OFF_SPECIAL_CONTROL, CONTR_IS_INITIATOR)";
                cmdInsI.CommandText += "  VALUES (:ID, 1, 0, 2, 0, :I_IDATE, :EXTDOCDATE, :EXTDOCNO, :CONTR, :CONTR_NAME, :ADR, :EXECUTOR, :EXECUTOR_NAME, :OFF_SPECIAL_CONTROL, :CONTR_IS_INITIATOR)";
                cmdInsI.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                //cmdInsI.Parameters.Add(new OleDbParameter(":I_IDATE", dtIdate));
                cmdInsI.Parameters.Add(new OleDbParameter(":I_IDATE", DateTime.Today));
                cmdInsI.Parameters.Add(new OleDbParameter(":EXTDOCDATE", dtExtDocDate));
                cmdInsI.Parameters.Add(new OleDbParameter(":EXTDOCNO", txtExtDocNum));
                cmdInsI.Parameters.Add(new OleDbParameter(":CONTR", nContrID));
                cmdInsI.Parameters.Add(new OleDbParameter(":CONTR_NAME", txtContrName));
                cmdInsI.Parameters.Add(new OleDbParameter(":ADR", txtContrAdr));
                cmdInsI.Parameters.Add(new OleDbParameter(":EXECUTOR", Convert.ToDecimal(nSUSER_ID)));
                cmdInsI.Parameters.Add(new OleDbParameter(":EXECUTOR_NAME", Convert.ToString(txtSUSER)));
                // новое поле - ставим 1 чтобы не было на контроле
                cmdInsI.Parameters.Add(new OleDbParameter(":OFF_SPECIAL_CONTROL", 1));
                cmdInsI.Parameters.Add(new OleDbParameter(":CONTR_IS_INITIATOR", 1));
                

                if (cmdInsI.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to I table id = " + newID.ToString());
                    throw ex;

                }


                // вставить I_IP

                cmdInsI_IP = new OleDbCommand();
                cmdInsI_IP.Connection = con;
                cmdInsI_IP.Transaction = tran;
                cmdInsI_IP.CommandText = "insert into I_IP (ID, IP_DOC_NUMBER,IP_ID, IPNO_NUM, ID_DEBTCLS, IP_EXEC_PRIST, IP_EXEC_PRIST_NAME)";
                cmdInsI_IP.CommandText += "  VALUES (:ID, :IP_DOC_NUMBER, :IP_ID, :IPNO_NUM, :ID_DEBTCLS, :IP_EXEC_PRIST, :IP_EXEC_PRIST_NAME)";

                cmdInsI_IP.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdInsI_IP.Parameters.Add(new OleDbParameter(":IP_DOC_NUMBER", Convert.ToString(txtIP_DocNumber)));
                cmdInsI_IP.Parameters.Add(new OleDbParameter(":IP_ID", Convert.ToDecimal(nIP_ID)));
                cmdInsI_IP.Parameters.Add(new OleDbParameter(":IPNO_NUM", Convert.ToDecimal(nIPNO_NUM)));
                cmdInsI_IP.Parameters.Add(new OleDbParameter(":ID_DEBTCLS", nID_DEBTCLS));
                cmdInsI_IP.Parameters.Add(new OleDbParameter(":IP_EXEC_PRIST", Convert.ToDecimal(nSUSER_ID)));
                cmdInsI_IP.Parameters.Add(new OleDbParameter(":IP_EXEC_PRIST_NAME", Convert.ToString(txtSUSER)));

                if (cmdInsI_IP.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to I_IP table id = " + newID.ToString());
                    throw ex;
                }


                cmdInsI_IP_OTHER = new OleDbCommand();
                cmdInsI_IP_OTHER.Connection = con;
                cmdInsI_IP_OTHER.Transaction = tran;
                cmdInsI_IP_OTHER.CommandText = "insert into I_IP_OTHER (ID, INDOC_TYPE, INDOC_TYPE_NAME, I_IP_OTHER_CONTENT)";
                cmdInsI_IP_OTHER.CommandText += "  VALUES (:ID, :INDOC_TYPE, :INDOC_TYPE_NAME, :I_IP_OTHER_CONTENT)";
                cmdInsI_IP_OTHER.Parameters.Add(new OleDbParameter(":ID", Convert.ToDecimal(newID)));
                cmdInsI_IP_OTHER.Parameters.Add(new OleDbParameter(":INDOC_TYPE", Convert.ToInt32(37)));
                cmdInsI_IP_OTHER.Parameters.Add(new OleDbParameter(":INDOC_TYPE_NAME", Convert.ToString("Сопроводительное письмо")));
                cmdInsI_IP_OTHER.Parameters.Add(new OleDbParameter(":I_IP_OTHER_CONTENT", txtContent));

                if (cmdInsI_IP_OTHER.ExecuteNonQuery() == -1)
                {
                    Exception ex = new Exception("Error inserting new row to I_IP_OTHER  table id = " + newID.ToString());
                    throw ex;

                }

                tran.Commit();
                con.Close();

                return newID;

            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (con != null)
                {
                    con.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                // MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (con != null)
                {
                    con.Close();
                }
            }
            return -1;
        }


        public bool DeleteUsedGibddPlat(OleDbConnection conG, int iContrSource, bool flDeleteUsed, bool flDeleteOld, Logger_ufssprk_tools lLogger)
        {

            OleDbCommand cmdD, cmdOldD;
            OleDbTransaction tran = null;

            try
            {
                if ((conG == null) || (conG.State.Equals(ConnectionState.Closed)))
                {
                    conG.Open();
                }

                tran = conG.BeginTransaction(IsolationLevel.ReadCommitted);

                // если флаг удалять учтенные стоит
                if (flDeleteUsed)
                {

                    // удалить все что FL_USE = 1

                    cmdD = new OleDbCommand();
                    cmdD.Connection = conG;
                    cmdD.Transaction = tran;
                    cmdD.CommandText = "DELETE FROM GIBDD_PLATEZH WHERE FL_USE = 1 AND SOURCE_ID = " + iContrSource.ToString();

                    if (cmdD.ExecuteNonQuery() == -1)
                    {
                        Exception ex = new Exception("Error deleteting rows from GIBDD_PLATEZH.");
                        throw ex;
                    }
                }

                // если флаг удалять старые стоит
                if (flDeleteOld)
                {
                    // Удаление перед сверкой информации о тех ИД, которые были выданы 1 год и 10 дней назад (10 дней на вступление в силу)
                    cmdOldD = new OleDbCommand();
                    cmdOldD.Connection = conG;
                    cmdOldD.Transaction = tran;
                    //cmdOldD.CommandText = "DELETE FROM GIBDD_PLATEZH WHERE DATID < '" + DateTime.Today.AddYears(-1).AddDays(-10).ToShortDateString() + "'";
                    cmdOldD.CommandText = "DELETE FROM GIBDD_PLATEZH WHERE FL_USE = 0 AND DATID < '" + DateTime.Today.AddYears(-2).AddDays(-10).ToShortDateString() + "' AND SOURCE_ID = " + iContrSource.ToString();

                    if (cmdOldD.ExecuteNonQuery() == -1)
                    {
                        Exception ex = new Exception("Error deleteting rows from GIBDD_PLATEZH.");
                        throw ex;
                    }
                }

                tran.Commit();
                conG.Close();

                return true;
            }
            catch (OleDbException ole_ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                if (conG != null)
                {
                    conG.Close();
                }
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                if (conG != null)
                {
                    conG.Close();
                }
            }
            return false;
        }

        public bool FillKeskContr(OleDbConnection conPKOSP, OleDbConnection conGibdd, Logger_ufssprk_tools lLogger)
        {
            OleDbTransaction tranPKOSP = null;
            OleDbTransaction tranGibdd = null;
            string txtSql = "";

            try
            {
                if (conGibdd != null && conGibdd.State != ConnectionState.Closed) conGibdd.Close();
                conGibdd.Open();

                tranGibdd = conGibdd.BeginTransaction(IsolationLevel.ReadCommitted);

                txtSql = "select entt_id from CONTR WHERE ID = 6"; // 6 - КЭСК

                decimal nId = 0;

                OleDbCommand cmd = new OleDbCommand(txtSql, conGibdd, tranGibdd);
                nId = Convert.ToDecimal(cmd.ExecuteScalar());
                tranGibdd.Rollback();
                conGibdd.Close();

                // найти КЭСК и вставить в CONTR
                if (nId <= 0)
                {
                    txtSql = "select  first 1 entt_id from entity where UPPER(entity.entt_full_name) LIKE '%КАРЕЛЬСКАЯ%ЭНЕРГОСБЫТОВАЯ%'";
                    if (conPKOSP != null && conPKOSP.State != ConnectionState.Closed) conPKOSP.Close();
                    conPKOSP.Open();

                    tranPKOSP = conPKOSP.BeginTransaction(IsolationLevel.ReadCommitted);
                    cmd = new OleDbCommand(txtSql, conPKOSP, tranPKOSP);
                    nId = Convert.ToDecimal(cmd.ExecuteScalar());
                    tranPKOSP.Rollback();
                    conPKOSP.Close();

                    // если что-то таки было получено, то закинуть это дело в CONTR
                    if (nId > 0)
                    {
                        if (conGibdd != null && conGibdd.State != ConnectionState.Closed) conGibdd.Close();
                        conGibdd.Open();

                        tranGibdd = conGibdd.BeginTransaction(IsolationLevel.ReadCommitted);

                        txtSql = "update CONTR set entt_id = " + nId.ToString() + " WHERE ID = 6"; // 6 - КЭСК

                        cmd = new OleDbCommand(txtSql, conGibdd, tranGibdd);
                        cmd.ExecuteNonQuery();
                        tranGibdd.Commit();
                        conGibdd.Close();
                    }
                }
            }
            catch (OleDbException ole_ex)
            {
                if (tranGibdd != null)
                {
                    tranGibdd.Rollback();
                }

                if (tranPKOSP != null)
                {
                    tranPKOSP.Rollback();
                }

                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
                return false;
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                return false;
            }


            if (conPKOSP != null)
            {
                conPKOSP.Close();
            }

            if (conGibdd != null)
            {
                conGibdd.Close();
            }

            return true;
        }

        // Сверка 2- это поиск не по базе ПК ОСП, а наоборот - ищем среди оплаченных штрафов то,
        // что есть непогашенного в нашей базе
        // пока только для ГИБДД
        public bool Sverka2(string txtConStrPKOSP, string constrGIBDD, decimal mvd_id, string txtLogFileName, Logger_ufssprk_tools lLogger)
        {
            // нужно проводить сверку в 3 этапа - сначала 1 - МВД, потом 2 - РИЦ ЖХ, 3 - КРЦ теоретически, можно все объединить, нужен справочник только.
            // в справочнике пусть будет entt_id контрагента 
            int iContrSource = 1;// источник - 1 МВД; 2 - РИЦ ЖХ, 3 - КРЦ
            decimal nUserID = 8992; // SYSDBA
            decimal nContrID = 0; // код контрагента (МВД, РИЦ ЖХ)

            string tablename = "GIBDD_PLATEZH";
            OleDbConnection ConG, con;
            Int32 iCnt = 0;
            Int32 iPercent = 0;
            Int32 iFoundCnt = 0;
            Int32 iSourceID = 0;
            decimal nID;
            string txtID;

            File_funcs ff = new File_funcs();

            try
            {
                ConG = new OleDbConnection(constrGIBDD);
                con = new OleDbConnection(txtConStrPKOSP);
                
                // все это не нужно - потому что другой алгоритм поиска теперь
                // ИНН юр. лица - 10 символов
                // пока 12 символов - ИНН для ИП не рассматриваем
                // Regex regex_inn = new Regex("^(\\d{10})", RegexOptions.Singleline| RegexOptions.CultureInvariant | RegexOptions.Compiled);
                // MatchCollection myMatchCollInn;
                
                decimal nReasonCode = GetChangeDbtReason(con, "Оплата штрафа в ГИБДД", lLogger);

                // проверить что КЭСК заполнен и если нет - то заполнить
                // FillKeskContr(con, ConG, lLogger);


                // удалить все учтенные и все использованные
                // не нужно этого делать - пусть будут в базе - хоть откатить и проверить если что будет возможность
                // DeleteUsedGibddPlat(ConG, 1, false, true, lLogger);

                DataSet ds = new DataSet();
                
                // string txtSql = "SELECT * FROM " + tablename + " WHERE  FL_USE = 0  ORDER BY SOURCE_ID, CHAR_LENGTH(number), DATID desc"; // выбрать только те, которые еще не были рассмотрены
                // выбрать ИП по штрафам МВД на статусах ЖЦ в Исполнении
                string txtSql = "select ip.id, ip.id_docno, ip.id_docdate, ip.id_dbtr_name, doc_ip.id_debtsum, COALESCE(ip.id_dbtr_inn, '') id_dbtr_inn from doc_ip_doc ip join doc_ip on doc_ip.id = ip.id join document d on d.id = ip.id where d.docstatusid in (4, 9, 22, 23, 24) and ip.id_debtcls in (22, 37, 38, 45)";
           
                
                // DataTable tbl = GetDataTableFromFB(ConG, txtSql, tablename, lLogger);
                DataTable tbl = GetDataTableFromFB(con, txtSql, tablename, lLogger);
                if (tbl != null)
                {
                    Console.WriteLine(DateTime.Now.ToString() + " В реестре ИП из ПК ОСП для сверки c базой оплаченных штрафов МВД содержится " + tbl.Rows.Count.ToString() + " строк.");
                }

                string txtContent = "";

                // день недели от 1 до 7
                int day = ((int)DateTime.Now.DayOfWeek == 0) ? 7 : (int)DateTime.Now.DayOfWeek;

                //AlterIndxI_ID(con, true);

                lLogger.WriteTofile(DateTime.Now.ToString() + "проводится сверка.", txtLogFileName);

                foreach (DataRow row in tbl.Rows)
                {
                    iCnt++;
                    if (iPercent <= 100 * iCnt / tbl.Rows.Count)
                    {
                        //Console.Clear();
                        iPercent++;
                        Console.Write("\b\b\b" + iPercent.ToString() + "%");
                    }


                    // получить и распарсить параметры из строки

                    txtID = Convert.ToString(row["id"]).TrimEnd();
                    if (!Decimal.TryParse(txtID, out nID))
                    {
                        nID = 0;
                    }

                    string txtIdDocno = Convert.ToString(row["id_docno"]).TrimEnd();
                    string txtIdDocdate = Convert.ToString(row["id_docdate"]).TrimEnd();
                    DateTime dtIdDocdate = DateTime.MaxValue;
                    DateTime.TryParse(txtIdDocdate, out dtIdDocdate);
                    string txtIdDbtrName = Convert.ToString(row["id_dbtr_name"]).TrimEnd();

                    string txtIdDebtSum = Convert.ToString(row["id_debtsum"]).TrimEnd();
                    double nIdDebtSum = 0;
                    Double.TryParse(txtIdDebtSum, out nIdDebtSum);

                    string txtDbtrInn = Convert.ToString(row["id_dbtr_inn"]).TrimEnd();


                    // все делаем по прежней схеме - но меняем sql запросы и параметры т.к. теперь другой источник и база для поиска
                    // раньше было 5 сверок последовательно
                    // важным может быть проверка - нужно ли проверять отсечение 0 в начале номера ИД


                    // сделать запрос в базу ufssprk-tools для поиска нужного ИП

                    decimal id = 0;
                    // теперь id заранее известен - потому что в row у нас сведения из ПК ОСП
                    id = nID;

                    // из базы оплаченных штрафов ufssprk-tools сведения будем получать как dataTable
                    DataTable dtResult = null;
                    iSourceID = 1; // пока работаем только с МВД-ГИБДД


                    if (iSourceID == 1) // если это МВД - то это один вид SQL select
                    {
                        //id = FindIDNum(con, txtNomID, nSumID, dtDatID, lLogger);

                        if (txtDbtrInn.Length > 0) // сначала ищем по ИНН
                        {
                            dtResult = RecFindIDNumInn(ConG, txtIdDocno, nIdDebtSum, dtIdDocdate, txtDbtrInn, 1, day, lLogger);
                        }

                        if (dtResult == null || dtResult.Rows.Count == 0)  // потом ищем по ФИО
                        {
                            dtResult = RecFindIDNumMVD2(ConG, txtIdDocno, nIdDebtSum, dtIdDocdate, txtIdDbtrName, 1, day, lLogger);
                        }
                    }
                        

                        if (dtResult != null)
                        {
                            if (dtResult.Rows.Count > 0) // там должна быть 1 строка т.к. select first 1
                            {
                                DataRow gibdd_row = dtResult.Rows[0];
                                iFoundCnt++;
                                // достать параметры
                                // номер
                                // номер реестра
                                // дата реестра? м.б. входящая дата - или ну ее нафик?
                                // 
                                // так делать не будем как ниже - по номеру платежного документа и номеру ИД можно
                                // много лишнего зацепить при обновлении - нужно добавить поле ISH_NUMBER и FIO_D
                                // также строки с суммами будем смотреть - т.к. 1 строка - одна сумма

                                // update GIBDD_PLATEZH SET FL_USE = :FL_USE WHERE NUMBER = :NUMBER
                                // and SOURCE_ID = :SOURCE_ID and NUM_DOC = :NUM_DOC";
                                // and FIO_D = :FIO_D and ISH_NUMBER = :ISH_NUMBER and SUMM = :SUMM

                                string txtIshNumber = Convert.ToString(gibdd_row["ISH_NUMBER"]);
                                string txtFIO_D = Convert.ToString(gibdd_row["FIO_D"]).TrimEnd();
                                string txtFullNom = Convert.ToString(gibdd_row["NUMBER"]).TrimEnd();
                                string txtNumKvit = Convert.ToString(gibdd_row["NUM_DOC"]).TrimEnd();
                                Double nSumID = Convert.ToDouble(gibdd_row["SUMM"]);

                                // string txtFullNom = Convert.ToString(row["NUMBER"]).TrimEnd();
                                string txtNomID = Convert.ToString(gibdd_row["NOMID"]).TrimEnd();
                                DateTime dtDatID = Convert.ToDateTime(gibdd_row["DATID"]);
                                // Double nSumID = Convert.ToDouble(row["SUMM"]);
                                Double nSumDoc = Convert.ToDouble(gibdd_row["SUMM_DOC"]);
                                // string txtNumKvit = Convert.ToString(row["NUM_DOC"]).TrimEnd();
                                // string txtFIO_D = Convert.ToString(row["FIO_D"]).TrimEnd();

                                txtFIO_D = ff.RemoveDoubleSpaces(txtFIO_D, 200);

                                DateTime dtBornD = Convert.ToDateTime(gibdd_row["BORN_D"]);
                                DateTime dtDateDoc = Convert.ToDateTime(gibdd_row["DATE_DOC"]);
                                string txtExtDocNum = Convert.ToString(gibdd_row["ISH_NUMBER"]);
                                DateTime dtExtDocDate = Convert.ToDateTime(gibdd_row["DATE_ISH"]);
                                DateTime dtReestrVhodDate = Convert.ToDateTime(gibdd_row["DATE_VH"]);
                                string txtSourceID = Convert.ToString(gibdd_row["SOURCE_ID"]).TrimEnd();
                                string txtPlatDescr = Convert.ToString(gibdd_row["PLAT_DESCR"]).TrimEnd();
                                string txtAdr = Convert.ToString(gibdd_row["ADR_D"]).TrimEnd();
                                string txtInn = Convert.ToString(gibdd_row["INN"]).TrimEnd();


                                Int32.TryParse(txtSourceID, out iSourceID);

                                // заполнить txtContent
                                txtContent = "Должник " + txtFIO_D + " ";

                                if (!dtBornD.Equals(Convert.ToDateTime("01.01.1800")))
                                {
                                    txtContent += "(дата рождения " + dtBornD.ToShortDateString() + ") ";
                                }
                                if (txtAdr.Length > 0)
                                {
                                    txtContent += " зарегистрированный по адресу: " + txtAdr;
                                }
                                txtContent += " " + dtDateDoc.ToShortDateString() + " оплатил " + ff.Money_ToStr(nSumDoc) + " № документа об оплате " + txtNumKvit;

                                txtContent += " по ИД № " + txtFullNom + " от " + dtDatID.ToShortDateString() + ".";


                                if (txtPlatDescr.Length > 0)
                                {
                                    txtContent += " Пояснение к платежу: " + txtPlatDescr + ".";
                                }

                                //MessageBox.Show("Нашли ИД № " + txtNomID + ". IP_ID = " + id.ToString(), "Внимание!", MessageBoxButtons.OK);

                                string txtNumber = Convert.ToString(gibdd_row["NUMBER"]).TrimEnd(); // тут нужен номер без обрезанного ноля
                                nContrID = GetContrID(ConG, iSourceID, lLogger);

                                // I_OP_CS_ENDDBT - Новый (1)
                                // I_IP_OTHER - Зарегистрирован (2)

                                string txtAgent_Code = "ГИБДД_10";

                                string txtIpNo = FindIpNoByIP_ID(con, id, lLogger);


                                // будет ли проблемой указать код для причины изменения долга Оплата штрафа в ГИБДД
                                // если это административка МВД?
                                // нужна консультация Коуру или кого-то из КРО или СПИ

                                // !!! 20160511 - временно внедряю только в медгоре

                                if (txtIpNo.Length > 0)
                                {
                                    string txtDebtorAdr = txtAdr;
                                    DateTime dtDebtorBirthDate = dtBornD;
                                    int nYearB = 0;
                                    if (dtBornD.Equals(Convert.ToDateTime("01.01.1800")))
                                    {
                                        nYearB = 0;
                                    }
                                    else
                                    {
                                        nYearB = dtBornD.Year;
                                    }
                                    InsertExtDebtFix(con, txtNumber, txtNumKvit, txtIpNo, dtDateDoc, dtDatID, nSumDoc, txtFIO_D, lLogger.logID, txtAgent_Code, txtAgent_Code, txtAgent_Code, txtDebtorAdr, nYearB, dtDebtorBirthDate, nReasonCode, lLogger);
                                }


                                // 20160518- после пилота в Сегеже внедряем (Каксимкова подтвердила что проблем не возникло)
                                // ID_InsertPlatDocTo_PK_OSP(con, 1, nUserID, nSumDoc, DateTime.Today, id, dtDateDoc, txtNumKvit, nContrID, txtFIO_D, lLogger);

                                // обновление будет теперь другим - переписать
                                // UpdateGibddPlatezh(ConG, txtNumber, txtNumKvit, 1, iSourceID, lLogger);
                                UpdateGibddPlatezhLong(ConG, txtNumber, txtNumKvit, txtFIO_D, txtIshNumber, nSumDoc, 1, iSourceID, lLogger);



                                // 20160504 - закомментировал, чтобы протестировать на медгоре можно ли так жить

                                // 20160518- после пилота в Сегеже внедряем
                                InsertExtReport(con, id, txtContent, lLogger.logID, txtAgent_Code, txtAgent_Code, txtAgent_Code, lLogger);
                                // ID_InsertOtherIP_DocTo_PK_OSP(con, 2, nUserID, dtReestrVhodDate, id, dtExtDocDate, txtExtDocNum, txtContent, nContrID, lLogger);

                                lLogger.WriteTofile(DateTime.Now.ToString() + " " + txtContent + " № ИП = " + txtIpNo + ".", txtLogFileName); // пишем в лог

                            }
                        }
                }

                //AlterIndxI_ID(con, false);

                // Console.WriteLine(DateTime.Now.ToString() + " Данные успешно проверены. Найдено " + iFoundCnt.ToString() + " ИД.");

                lLogger.WriteTofile(DateTime.Now.ToString() + " сверка окончена успешно. Найдено " + iFoundCnt.ToString() + " ИД.", txtLogFileName);

            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // Console.WriteLine(DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.WriteTofile(DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, txtLogFileName);
                }
                return false;
            }
            catch (Exception ex)
            {
                //if (DBFcon != null) DBFcon.Close();
                //Console.WriteLine(DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString());
                lLogger.WriteTofile(DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString(), txtLogFileName);
                return false;
            }

            return true;
        }

        public bool Sverka(string txtConStrPKOSP, string constrGIBDD, decimal mvd_id, string txtLogFileName, Logger_ufssprk_tools lLogger)
        {
            // нужно проводить сверку в 3 этапа - сначала 1 - МВД, потом 2 - РИЦ ЖХ, 3 - КРЦ теоретически, можно все объединить, нужен справочник только.

            // теперь этап 1 - МВД убираем - он реализован через Sverka2

            // в справочнике пусть будет entt_id контрагента 
            int iContrSource = 2;// источник - 1 МВД; 2 - РИЦ ЖХ, 3 - КРЦ
            // пора добавить нового - ТГК-1 с кодом
            decimal nUserID = 8992; // SYSDBA
            decimal nContrID = 0; // код контрагента (МВД, РИЦ ЖХ)

            string tablename = "GIBDD_PLATEZH";
            OleDbConnection ConG, con;
            Int32 iCnt = 0;
            Int32 iPercent = 0;
            Int32 iFoundCnt = 0;
            Int32 iSourceID = 0;

            File_funcs ff = new File_funcs();

            try
            {
                ConG = new OleDbConnection(constrGIBDD);
                con = new OleDbConnection(txtConStrPKOSP);

                // проверить что КЭСК заполнен и если нет - то заполнить
                FillKeskContr(con, ConG, lLogger);
                

                // удалить все учтенные и все использованные
                // не нужно этого делать - пусть будут в базе - хоть откатить и проверить если что будет возможность
                // DeleteUsedGibddPlat(ConG, 1, false,true, lLogger);

                DataSet ds = new DataSet();
                // основная выборка
                //string txtSql = "SELECT * FROM " + tablename + " WHERE  FL_USE = 0 AND SOURCE_ID = 3 ORDER BY SOURCE_ID"; // выбрать только те, которые еще не были рассмотрены
                
                //!!! ВЕРНУТЬ
                
                // string txtSql = "SELECT * FROM " + tablename + " WHERE  FL_USE = 0  ORDER BY SOURCE_ID, CHAR_LENGTH(number), DATID desc"; // выбрать только те, которые еще не были рассмотрены

                // убрал из выбрки SOURCE_ID = 1 - оплаченные штрафы МВД
                
                // !!! ниже вернуть после тестов 20170829
                // вернул 20170831
                 string txtSql = "SELECT * FROM " + tablename + " WHERE SOURCE_ID != 1 and FL_USE = 0  ORDER BY SOURCE_ID, CHAR_LENGTH(number), DATID desc"; // выбрать только те, которые еще не были рассмотрены
                
                // !!! ниже убрать после тестов 20170829
                // убрано 20170831
                //string txtSql = "SELECT * FROM " + tablename + " WHERE SOURCE_ID != 1 and FL_USE = 0 and num_doc = '353522'  ORDER BY SOURCE_ID, CHAR_LENGTH(number), DATID desc"; // выбрать только те, которые еще не были рассмотрены

                 //чтобы выбрать только ТГК-1 20170303
                // string txtSql = "SELECT * FROM " + tablename + " WHERE SOURCE_ID = 7 and FL_USE = 0  ORDER BY SOURCE_ID, CHAR_LENGTH(number), DATID desc"; // выбрать только те, которые еще не были рассмотрены
                


                //!!! УБРАТЬ

                // string txtSql = "SELECT * FROM " + tablename + " WHERE  FL_USE = 0 and SOURCE_ID = 1 and NUMBER = '18810010130001723866'  ORDER BY SOURCE_ID, CHAR_LENGTH(number), DATID desc"; // выбрать только те, которые еще не были рассмотрены

                //string txtSql = "SELECT * FROM " + tablename + " WHERE  number = '0111220140000606' ORDER BY SOURCE_ID DESC"; // выбрать только те, которые еще не были рассмотрены

                // string txtSql = "SELECT * FROM gibdd_platezh WHERE  FL_USE = 1 and nomid='18810010130001982810' ORDER BY SOURCE_ID"; // выбрать конкретный ИД

                // string txtSql = "SELECT * FROM gibdd_platezh WHERE  FL_USE = 1 and nomid='0032334023101301' ORDER BY SOURCE_ID"; // выбрать конкретный ИД

                // string txtSql = "SELECT * FROM " + tablename + " WHERE  FL_USE = 0 and SOURCE_ID = 6  ORDER BY SOURCE_ID, CHAR_LENGTH(number), DATID desc"; // выбрать только те, которые еще не были рассмотрены


                // дополнительная выборка
                // string txtSql = "SELECT * FROM " + tablename + " WHERE  FL_USE = 0 and nomid='027247' ORDER BY SOURCE_ID"; // выбрать только те, которые еще не были рассмотрены


                //string txtSql = "SELECT * FROM " + tablename + " WHERE  FL_USE = 0 AND SOURCE_ID = " + iContrSource.ToString(); // выбрать только те, которые еще не были рассмотрены
                DataTable tbl = GetDataTableFromFB(ConG, txtSql, tablename, lLogger);
                if (tbl != null)
                {
                    Console.WriteLine(DateTime.Now.ToString() + " В реестрах от компаний ЖКХ для сверки содержится " + tbl.Rows.Count.ToString() + " строк.");
                }

                string txtContent = "";
                
                // день недели от 1 до 7
                int day = ((int)DateTime.Now.DayOfWeek == 0) ? 7 : (int)DateTime.Now.DayOfWeek;

                //AlterIndxI_ID(con, true);

                lLogger.WriteTofile(DateTime.Now.ToString() + "проводится сверка.", txtLogFileName);

                foreach (DataRow row in tbl.Rows)
                {
                    iCnt++;
                    if (iPercent <= 100 * iCnt / tbl.Rows.Count)
                    {
                        //Console.Clear();
                        iPercent++;
                        Console.Write("\b\b\b" + iPercent.ToString() + "%");
                    }

                    string txtFullNom = Convert.ToString(row["NUMBER"]).TrimEnd();
                    string txtNomID = Convert.ToString(row["NOMID"]).TrimEnd();
                    DateTime dtDatID = Convert.ToDateTime(row["DATID"]);
                    Double nSumID = Convert.ToDouble(row["SUMM"]);
                    Double nSumDoc = Convert.ToDouble(row["SUMM_DOC"]);
                    string txtNumKvit = Convert.ToString(row["NUM_DOC"]).TrimEnd();
                    string txtFIO_D = Convert.ToString(row["FIO_D"]).TrimEnd();
                    txtFIO_D = ff.RemoveDoubleSpaces(txtFIO_D, 100);
                    DateTime dtBornD = Convert.ToDateTime(row["BORN_D"]);
                    DateTime dtDateDoc = Convert.ToDateTime(row["DATE_DOC"]);
                    string txtExtDocNum = Convert.ToString(row["ISH_NUMBER"]);
                    DateTime dtExtDocDate = Convert.ToDateTime(row["DATE_ISH"]);
                    DateTime dtReestrVhodDate = Convert.ToDateTime(row["DATE_VH"]);
                    string txtSourceID = Convert.ToString(row["SOURCE_ID"]).TrimEnd();
                    string txtPlatDescr = Convert.ToString(row["PLAT_DESCR"]).TrimEnd();
                    string txtAdr = Convert.ToString(row["ADR_D"]).TrimEnd();
                    string txtInn = Convert.ToString(row["INN"]).TrimEnd();

                    Int32.TryParse(txtSourceID, out iSourceID);

                    // сделать запрос в базу ПК ОСП для поиска такого номера ИД

                    decimal id = 0;
                    // закомментировал то, что относится к обработке МВД (iSourceID == 1)
                    /*
                    if (iSourceID == 1) // если это МВД - то это один вид SQL select
                    {
                        //id = FindIDNum(con, txtNomID, nSumID, dtDatID, lLogger);

                        id = RecFindIDNumMVD(con, txtFullNom, txtNomID, nSumID, dtDatID, txtFIO_D, 1, day, lLogger);
                    }
                    else
                    */
                    if (iSourceID == 2) // если это РИЦ ЖХ - то это другой вид SQL select
                    {
                        //id = FindIDNumRicZH(con, txtNomID, nSumID, dtDatID, txtFIO_D, lLogger);

                        id = RecFindIDNumRicZH(con, txtNomID, nSumID, dtDatID, txtFIO_D, 1, lLogger);

                        // если номер ИД начинается с СП и потом нет пробела - поискать с пробелом и наоборот
                        string txtNewNomID = "";
                        if (id == -1)
                        {
                            txtNewNomID = ff.ReplaceSudPrikazStartSymbol(txtNomID, ' ');
                            if (!txtNomID.Equals(txtNewNomID))
                            {
                                id = RecFindIDNumRicZH(con, txtNewNomID, nSumID, dtDatID, txtFIO_D, 1, lLogger);
                            }
                        }

                        if (id == -1)
                        {
                            txtNewNomID = ff.ReplaceSudPrikazStartSymbol(txtNomID, '-');
                            if (!txtNomID.Equals(txtNewNomID))
                            {
                                id = RecFindIDNumRicZH(con, txtNewNomID, nSumID, dtDatID, txtFIO_D, 1, lLogger);
                                //id = RecFindIDNumKRC(con, txtNewNomID, dtDatID, txtFIO_D, 1, lLogger);
                            }
                        }

                    }
                    else if (iSourceID == 3) // если это КРЦ
                    {
                        id = RecFindIDNumKRC(con, txtNomID, dtDatID, nSumID, 1, dtDateDoc, lLogger);

                        // если номер ИД начинается с СП и потом нет пробела - поискать с пробелом и наоборот
                        string txtNewNomID = "";
                        if (id == -1)
                        {
                            txtNewNomID = ff.ReplaceSudPrikazStartSymbol(txtNomID, ' ');
                            if (!txtNomID.Equals(txtNewNomID))
                            {
                                id = RecFindIDNumKRC(con, txtNewNomID, dtDatID, nSumID, 1, dtDateDoc, lLogger);
                            }
                        }

                        if (id == -1)
                        {
                            txtNewNomID = ff.ReplaceSudPrikazStartSymbol(txtNomID, '-');
                            if (!txtNomID.Equals(txtNewNomID))
                            {
                                id = RecFindIDNumKRC(con, txtNewNomID, dtDatID, nSumID, 1, dtDateDoc, lLogger);
                            }
                        }

                    }
                    else if (iSourceID == 6) // КЭСК - присылают и номер ИП (если у них он есть) и еще данные
                    {
                        if (txtFullNom.Length > 0)
                        {
                            id = FindIP_IDbyNum(con, txtFullNom, lLogger);
                        }
                        else
                        {
                            // 1 - поиск НомИД, ДатИД, Взыскатель - КЭСК
                            // 2 - поиск ДатаИД, СуммИД, Взыскатель - КЭСК
                            id = RecFindIDNumKESK(con, txtNomID, dtDatID, nSumID, txtFIO_D, txtInn, 1, lLogger);

                            // если номер ИД начинается с СП и потом нет пробела - поискать с пробелом и наоборот
                            string txtNewNomID = "";
                            if (id == -1)
                            {
                                txtNewNomID = ff.ReplaceSudPrikazStartSymbol(txtNomID, ' ');
                                if (!txtNomID.Equals(txtNewNomID))
                                {
                                    id = RecFindIDNumKESK(con, txtNewNomID, dtDatID, nSumID, txtFIO_D, txtInn, 1, lLogger);
                                }
                            }

                            if (id == -1)
                            {
                                txtNewNomID = ff.ReplaceSudPrikazStartSymbol(txtNomID, '-');
                                if (!txtNomID.Equals(txtNewNomID))
                                {
                                    id = RecFindIDNumKESK(con, txtNewNomID, dtDatID, nSumID, txtFIO_D, txtInn, 1, lLogger);
                                }
                            }


                        }
                    }
                    else if (iSourceID == 5) // ЕИРЦ - присылают номер ИП - по нему можно однозначно прикрепиться к ИП
                    {
                        id = FindIP_IDbyNum(con, txtNomID, lLogger);
                    }
                    else if (iSourceID == 7) // ТГК1 - присылают и номер ИП (если у них он есть) и еще данные
                    // 
                    {
                        if (txtFullNom.Length > 0)
                        {
                            id = FindIP_IDbyNum(con, txtFullNom, lLogger);
                        }
                        else
                        {
                            // 1 - поиск НомИД, ДатИД, Взыскатель - ТГК1
                            // 2 - поиск ДатаИД, СуммИД, Взыскатель - ТГК1
                            // предварительно проверить что есть номер ИД,  дата ИД (не = 01.01.1800) и сумма (не = -1)ж
                            id = RecFindIDNumTGK1(con, txtNomID, dtDatID, nSumID, txtFIO_D, txtInn, 1, dtDateDoc, lLogger);

                            // если номер ИД начинается с СП и потом нет пробела - поискать с пробелом и наоборот
                            string txtNewNomID = "";
                            if (id == -1)
                            {
                                txtNewNomID = ff.ReplaceSudPrikazStartSymbol(txtNomID, ' ');
                                if (!txtNomID.Equals(txtNewNomID))
                                {
                                    //id = RecFindIDNumKESK(con, txtNewNomID, dtDatID, nSumID, txtFIO_D, txtInn, 1, lLogger);
                                    id = RecFindIDNumTGK1(con, txtNewNomID, dtDatID, nSumID, txtFIO_D, txtInn, 1, dtDateDoc, lLogger);
                                }
                            }

                            if (id == -1)
                            {
                                txtNewNomID = ff.ReplaceSudPrikazStartSymbol(txtNomID, '-');
                                if (!txtNomID.Equals(txtNewNomID))
                                {
                                    id = RecFindIDNumTGK1(con, txtNewNomID, dtDatID, nSumID, txtFIO_D, txtInn, 1, dtDateDoc, lLogger);
                                }
                            }
                        }
                    }
                   
                    if (id > 0)
                    {
                        iFoundCnt++;

                        // вычистить лишние пробелы из ФИО
                        txtFIO_D = ff.RemoveDoubleSpaces(txtFIO_D, 200);

                        // заполнить txtContent
                        txtContent = "Должник " + txtFIO_D + " ";
                                                   
                        if (!dtBornD.Equals(Convert.ToDateTime("01.01.1800")))
                        {
                            txtContent += "(дата рождения " + dtBornD.ToShortDateString() + ") ";
                        }
                        if (txtAdr.Length > 0)
                        {
                            txtContent += " зарегистрированный по адресу: " + txtAdr;
                        }
                        txtContent += " " + dtDateDoc.ToShortDateString() + " оплатил " + ff.Money_ToStr(nSumDoc) + " № документа об оплате " + txtNumKvit;
                        // тут может быть коллизия, потому что оплата может быть и по номеру ИП привязана
                        // а может и по номеру ИД
                        // для КЭСК и ТГК свой случай 
                        if ((iSourceID >= 6) && (iSourceID <= 7))
                        {
                            if (txtFullNom.Length > 0)
                            {
                                txtContent += " по ИП № " + txtFullNom;
                            }
                            else
                            {
                                txtContent += " по ИД № " + txtNomID + " от " + dtDatID.ToShortDateString() + ".";
                            }
                        }
                        else // все остальные контрагенты
                        {
                            txtContent += " по ИД № " + txtFullNom + " от " + dtDatID.ToShortDateString() + ".";
                        }

                        if (txtPlatDescr.Length > 0)
                        {
                            txtContent += " Пояснение к платетежу: " + txtPlatDescr + ".";
                        }

                        //MessageBox.Show("Нашли ИД № " + txtNomID + ". IP_ID = " + id.ToString(), "Внимание!", MessageBoxButtons.OK);

                        string txtNumber = Convert.ToString(row["NUMBER"]).TrimEnd(); // тут нужен номер без обрезанного ноля
                        nContrID = GetContrID(ConG, iSourceID, lLogger);

                        // I_OP_CS_ENDDBT - Новый (1)
                        // I_IP_OTHER - Зарегистрирован (2)

                        // TODO: неплохо бы сделать как с ГИБДД - то есть через интерфейсные таблицы
                        /* 20170510 - это старый вариант через вставку напрямую в базу данных
                         * похоже что он не работает
                         * попробую сделать новый - через ИТ
                        
                        ID_InsertPlatDocTo_PK_OSP(con, 1, nUserID, nSumDoc, DateTime.Today, id, dtDateDoc, txtNumKvit, nContrID, txtFIO_D, lLogger);
                        UpdateGibddPlatezh(ConG, txtNumber, txtNumKvit, 1, iSourceID, lLogger);
                        
                        ID_InsertOtherIP_DocTo_PK_OSP(con, 2, nUserID, dtReestrVhodDate, id, dtExtDocDate, txtExtDocNum, txtContent, nContrID, lLogger);
                        */

                        // для вставки через ИТ нужны доп. параметры
                        // например - код контрагента (txtAgentCode) - вставил во все базы данных (ТГК1_10, )
                        string txtAgent_Code = "ТГК1_10";
                        string txtIpNo = FindIpNoByIP_ID(con, id, lLogger);
                        decimal nReasonCode = GetChangeDbtReason(con, "Погашение взыскателю (ТГК-1)", lLogger);
                        decimal nPackNumber = 0;
                        //!!! внимение! т.к. ext_input_header.pack_number(BIGINT) д.б. уникальным для каждого КПС
                        // то нужно менять pack_id при вставке - предлагаю добавлять разряд на основе iSourceID
                        // по формуле log_id + 1000000000*iSourceID  (iSourceID встанет первыми цифрами)

                        nPackNumber = lLogger.logID + (decimal)iSourceID * (decimal)1000000000;

                        switch (iSourceID)
                        {
                            case 7:
                                txtAgent_Code = "ТГК1_10";
                                nReasonCode = GetChangeDbtReason(con, "Погашение взыскателю (ТГК-1)", lLogger);
                                break;

                            case 2:
                                txtAgent_Code = "РИЦЖХ_10";
                                nReasonCode = GetChangeDbtReason(con, "Погашение взыскателю (РИЦ ЖХ)", lLogger);
                                break;
                            
                            case 3:
                                txtAgent_Code = "КРЦ_10";
                                nReasonCode = GetChangeDbtReason(con, "Погашение взыскателю (КРЦ)", lLogger);
                                break;
                            
                            case 6:
                                txtAgent_Code = "КЭСК_10";
                                nReasonCode = GetChangeDbtReason(con, "Погашение взыскателю (КЭСК)", lLogger);
                                break;
                            
                            case 5:
                                txtAgent_Code = "ЕРЦ_10";
                                nReasonCode = GetChangeDbtReason(con, "Погашение взыскателю (ЕРЦ)", lLogger);
                                break;
                            

                            default:
                                txtAgent_Code = "ТГК1_10";
                                nReasonCode = GetChangeDbtReason(con, "Погашение взыскателю (ТГК-1)", lLogger);
                                break;
                        }

                        if (txtIpNo.Length > 0)
                        {
                            string txtDebtorAdr = txtAdr;
                            DateTime dtDebtorBirthDate = dtBornD;
                            int nYearB = 0;
                            if (dtBornD.Equals(Convert.ToDateTime("01.01.1800")))
                            {
                                nYearB = 0;
                            }
                            else
                            {
                                nYearB = dtBornD.Year;
                            }
                            InsertExtDebtFix(con, txtNumber, txtNumKvit, txtIpNo, dtDateDoc, dtDatID, nSumDoc, txtFIO_D, nPackNumber, txtAgent_Code, txtAgent_Code, txtAgent_Code, txtDebtorAdr, nYearB, dtDebtorBirthDate, nReasonCode, lLogger);
                        }

                        UpdateGibddPlatezhLong(ConG, txtNumber, txtNumKvit, txtFIO_D, txtExtDocNum, nSumDoc, 1, iSourceID, lLogger);
                        InsertExtReport(con, id, txtContent + " Информация получена в реестре " + txtExtDocNum  + " от  " + txtAgent_Code + " (код контрагента " + iSourceID.ToString() + ").", nPackNumber, txtAgent_Code, txtAgent_Code, txtAgent_Code, lLogger);


                        lLogger.WriteTofile(DateTime.Now.ToString() + " " + txtContent + " IP_ID = " + id.ToString() + ".", txtLogFileName); // пишем в лог
                    }

                }

                //AlterIndxI_ID(con, false);

                // Console.WriteLine(DateTime.Now.ToString() + " Данные успешно проверены. Найдено " + iFoundCnt.ToString() + " ИД.");

                lLogger.WriteTofile(DateTime.Now.ToString() + " сверка окончена успешно. Найдено " + iFoundCnt.ToString() + " ИД.", txtLogFileName);

            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    // Console.WriteLine(DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState);
                    lLogger.WriteTofile(DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, txtLogFileName);
                }
                return false;
            }
            catch (Exception ex)
            {
                //if (DBFcon != null) DBFcon.Close();
                //Console.WriteLine(DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString());
                lLogger.WriteTofile(DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString(), txtLogFileName);
                return false;
            }

            return true;
        }

        public decimal GetOSP_Num(OleDbConnection con, out string txtErr)
        {
            txtErr = "";
            Decimal res = 0;
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                //OleDbCommand cmd = new OleDbCommand("Select DEPARTMENT from OSP", con, tran);
                OleDbCommand cmd = new OleDbCommand("select first 1 osp.department from system_site join osp on osp.osp_system_site_id = system_site.system_site_id", con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    txtErr += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                txtErr += "Ошибка приложения. Message: " + ex.ToString();
            }
            return res;
        }

        // найти запрос по ID ext_request
        public bool FindReqByExtReqID(OleDbConnection con, ref decimal nID, Logger_ufssprk_tools lLogger)
        {
            decimal res = 0;
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("SELECT FIRST 1 REQ_ID from EXT_REQUEST where EXT_REQUEST_ID = " + nID.ToString(), con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
                if (res != 0)
                {
                    nID = res;
                    return true;
                }
                else return false;
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return false;
        }

        // найти был ли обработан ответ на запрос через ИТ
        public bool FindWasResponse(OleDbConnection con, decimal nID, Logger_ufssprk_tools lLogger)
        {
            decimal res = 0;
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("SELECT FIRST 1 request_id from EXT_RESPONSE where EXT_RESPONSE.request_id = " + nID.ToString(), con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
                if (res != 0)
                {
                    nID = res;
                    return true;
                }
                else return false;
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return false;
        }

        public string FindReqIDByExtReqID(OleDbConnection con, ref decimal nID, Logger_ufssprk_tools lLogger)
        {
            decimal res = 0;
            string txtRes = "";
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("SELECT FIRST 1 REQ_ID from EXT_REQUEST where EXT_REQUEST_ID = " + nID.ToString(), con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
                if (res != 0)
                {
                    nID = res;
                    txtRes = res.ToString();
                    return txtRes;
                }
                else return txtRes;
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return txtRes;
        }



        public bool FindZapros(OleDbConnection con, Decimal nID, Logger_ufssprk_tools lLogger){
            Decimal res = 0;
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();
                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("Select ID from document where documentclassid = 96 and id = " + nID.ToString(), con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
                if ((res == nID) && (nID != 0))
                {
                    return true;
                }
                else return false;
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return false;
        }


        
        public int AutoLoadSberRespIn(string constrGIBDD, string constrPKOSP, string txtUploadDir, string txtLogFileName, int iDiv, string txtOspEmail, string txtAdminEmail, Logger_ufssprk_tools lLogger)
        {
            // в Local_Logs есть поле Filename, среди логов с типом 10 будем искать свой, с нужным именем
            // важно - год, год от года могут повторяться, поэтому нужно смотреть год в поле packdate
            // год брать только и брать только даты не старше чем 6 мес назад?
            // А леше нарезать заявку все что старше чем 6 мес чистить по планировщику.

            OleDbConnection ConG, con;
            
            Int32 iLogCnt = 0;

            ArrayList alFiles;
            ArrayList alLoadedReestrs;
            string txtCurrPath = "";
            string txtAgreementCode = "10";
            int nPackType = 2;
            int nMonthPeriod = -11;
            string txtMailServ = "mail10";

            ArrayList Strings;
            DataTable dtData;

            File_funcs ff = new File_funcs();
            try
            {
                string txtErrLog = "";
                ConG = new OleDbConnection(constrGIBDD);
                con = new OleDbConnection(constrPKOSP);

                // 1. Получить список файлов в каталоге
                alFiles = ff.GetReestrs(txtUploadDir, 1, 10, lLogger);

                // 2.1 Получить список уже загруженных файлов с ответами (фильтр по дате в тчение 11 мес., тип = 2, соглашение = 10)
                alLoadedReestrs = GetLoadedFiles(ConG, nMonthPeriod, txtAgreementCode, nPackType, lLogger);

                string txtOspCode = iDiv.ToString("D2");
                string txtCurrFileName = "";

                decimal nID = 0;
                decimal newID = 0;
                
                // теперь завести счетчик
                Int64 iCnt = 0; // всего
                Int64 iLCnt = 0; // загружено
                Int64 iECnt = 0; // ошибок

                // 2.2 Загрузить файлы из alFiles в GIBDD_PLATEZH, 
                foreach (string txtPath in alFiles)
                {
                    txtCurrPath = txtPath;
                    // вычленить имя файла
                    if (txtPath.Length > 0)
                    {
                        string tablename = "";
                        string txtExt = "";
                        string txtFileDir = "";


                        txtExt = txtPath.Substring(txtPath.LastIndexOf(".") + 1);
                        tablename = ff.GetTablename(txtPath, 4).Trim();
                        txtCurrFileName = tablename + '.' + txtExt;

                        // если это наш файл: пример - f2218628.107 - это ответ на запрос R2218628.107
                        //  8628 - обязательно
                        //  07  код ОСП 
                        if ((txtExt.Length == 3) && (txtExt.Substring(1) == txtOspCode)
                        && (tablename.Length == 8) && tablename.ToUpper().StartsWith("F")
                        && (!alLoadedReestrs.Contains(txtCurrFileName)))
                        {
                            if (!ff.CheckXMLisSignedAndEmail(txtPath, Encoding.GetEncoding(1251), txtAdminEmail, txtAdminEmail, txtMailServ))
                            {
                                // получить каталог - зачем?
                                txtFileDir = ff.GetFileDir(txtPath, 4);

                                // лог  для каждого отдельного файла с ответами
                                Logger_ufssprk_tools lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 1, 2, txtAgreementCode, 0, Convert.ToDecimal(iDiv), "Пакет ответов из Сбербанка России (XML новый формат).");

                                // искать родительский файл-запрос
                                decimal nParent_ID = lLogger2.GetLogByFileName(1, "10", 'R' + tablename.Substring(1) + '.' + txtExt, -8);
                                if (nParent_ID > 0) lLogger2.UpdateLLogParent(nParent_ID);

                                // записать в лог пакета дату и начало обработки
                                // а в какой лог? в лог автозагрузки или в лог пакета с квитанциями?
                                lLogger.WriteLLog(DateTime.Now + " начало обработки пакета с ответами.\n");
                                lLogger.WriteLLog("Обрабатывается файл: " + txtPath + "\n");

                                lLogger2.WriteLLog(DateTime.Now + " начало обработки пакета с ответами.\n");
                                lLogger2.WriteLLog("Обрабатывается файл: " + txtPath + "\n");


                                // прочитать данные из XML 
                                XmlReader xmlFile;
                                //XmlReaderSettings xmlSet = new XmlReaderSettings();

                                xmlFile = XmlReader.Create(txtPath, new XmlReaderSettings());
                                DataSet ds = new DataSet();
                                ds.ReadXml(xmlFile);

                                // дальше нужно обработать полученный DS
                                // берем row из ds.Tables[0] и отправляем на запись как обычный ответ.

                                DataTable dtSberData = null;
                                if (ds.Tables.Count > 0)
                                {
                                    dtSberData = ds.Tables[0];
                                }

                                if (dtSberData != null)
                                {
                                    // string txtAgreementCode = "10";
                                    string txtAgentCode = "Б_СБЕР";
                                    string txtAgentDeptCode = "8628";
                                    string txtEntityName = "Сбербанк России";
                                    decimal nStatus = 19; // ответ получен
                                    string txtID = "";
                                    string txtResult = "";

                                    // теперь завести счетчик
                                    iCnt = 0; // всего
                                    iLCnt = 0; // загружено
                                    iECnt = 0; // ошибок
                                    string txtAnswerType = "2";
                                    // в цикле пройти по строками и записать ответы
                                    bool bFirstRowPassed = false;
                                    foreach (DataRow row in dtSberData.Rows)
                                    {
                                        iCnt++;
                                        txtID = Convert.ToString(row["Req_ID"]);
                                        if (!Decimal.TryParse(txtID, out nID))
                                        {
                                            nID = 0;
                                        }

                                        // если такой запрос есть в базе ОСП, то можно загрузить ответ
                                        // а есть ли смысл проверять весь пакет - проверяем только 1-ю строку
                                        if (bFirstRowPassed || FindZapros(con, nID, lLogger2))
                                        {
                                            bFirstRowPassed = true;

                                            try
                                            {
                                                txtResult = Convert.ToString(row["RESULT"]).Trim();
                                                int nResult = -1;
                                                Int32.TryParse(txtResult, out nResult);

                                                string txtDatOtv = "";
                                                DateTime dtDatOtv;
                                                txtDatOtv = Convert.ToString(row["Req_Date"]);
                                                if (!DateTime.TryParse(txtDatOtv, out dtDatOtv))
                                                {
                                                    dtDatOtv = DateTime.MaxValue;
                                                }

                                                string txtOtvet;
                                                // 2 - положительный ответ
                                                // 0 - нет счетов
                                                // 3 - необходимо уточнение

                                                if (nResult == 2)
                                                {
                                                    txtAnswerType = "1";
                                                    txtOtvet = "Получен ответ 'Есть данные'.";

                                                    string txtBankInn = Convert.ToString(row["INN"]).Trim();
                                                    if (txtBankInn.Trim() == "-") txtBankInn = ""; // пустой ИНН Сбер присылает как <INN>-</INN>

                                                    string txtOSB_Name = Convert.ToString(row["OSB_Name"]).Trim();
                                                    string txtDeptCode = Convert.ToString(row["OSB_Num"]).Trim();
                                                    string txtOSB_Addr = Convert.ToString(row["OSB_Addr"]).Trim();
                                                    string txtOSB_Tel = Convert.ToString(row["OSB_Tel"]).Trim();
                                                    string txtBankBik = Convert.ToString(row["BIC"]).Trim();
                                                    string txtAccount = Convert.ToString(row["Account"]).Trim();
                                                    string txtOpen_Date = Convert.ToString(row["Op_Date"]).Trim(); // нужно ли ее в дату переводить - можно и так вывести
                                                    string txtVid_vkl = Convert.ToString(row["Vid_vkl"]).Trim();
                                                    string txtVal_vkl = Convert.ToString(row["Val_vkl"]).Trim();
                                                    string txtBalance = Convert.ToString(row["Balance"]).Trim().Replace('.', ',');
                                                    decimal nBalance = 0;
                                                    Decimal.TryParse(txtBalance, out nBalance); // проверить что если будет <Balance xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>


                                                    // сформировать строку с текстом ответа
                                                    txtOtvet += " Счет № " + txtAccount + "; остаток на счете = " + txtBalance + " " + ff.getValuteByCod(txtAccount);
                                                    txtOtvet += "; дата открытия счета " + txtOpen_Date + " ; вид вклада(счета): " + txtVid_vkl;
                                                    txtOtvet += ". Отделение Сбербанка: " + txtOSB_Name + " " + txtOSB_Addr + " тел." + txtOSB_Tel + "; БИК: " + txtBankBik;
                                                    if (txtBankInn.Length > 0) txtOtvet += "; ИНН: " + txtBankInn;

                                                    // TODO: вставить положительный ответ
                                                    // AGENT_CODE, AGENT_DEPT_CODE, AGENT_AGREEMENT_CODE  - нужны для вставки в EXT_INPUT_HEADER

                                                    newID = InsertResponseIntTable(con, nID, txtOtvet, dtDatOtv, nStatus, lLogger2.logID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtAnswerType, lLogger2);
                                                    if (newID > 0) // вставить сведения об ответе в ИТ
                                                    {
                                                        if (InsertIntTableAccSum(con, newID, nBalance, txtAccount, txtBankBik, dtDatOtv, txtEntityName, "Вид вклада: " + txtVid_vkl, txtOSB_Name, txtDeptCode, lLogger2) > 0)
                                                        {
                                                            iLCnt++; // все ок - считаем в загруженные
                                                            lLogger2.MemoryLLog("\n" + iCnt.ToString() + "\tЗагружен ответ на запрос № " + nID.ToString());
                                                        }
                                                        else
                                                        {
                                                            iECnt++; // ошибка загрузки сведений о счетах
                                                            lLogger2.MemoryLLog("\n" + iCnt.ToString() + "\tОшибка!  Не загружено сведений о счетах для ответа на запрос № " + nID.ToString());
                                                            lLogger2.ErrMessage += "\n" + iCnt.ToString() + "\tОшибка!  Не загружено сведений о счетах для ответа на запрос № " + nID.ToString();
                                                        }
                                                    }
                                                    else
                                                    {
                                                        iECnt++; // ошибка загрузки
                                                        lLogger2.MemoryLLog("\n" + iCnt.ToString() + "\tОшибка!  Не загружено ответа на запрос № " + nID.ToString());
                                                        lLogger2.ErrMessage += "\n" + iCnt.ToString() + "\tОшибка!  Не загружено ответа на запрос № " + nID.ToString();
                                                    }


                                                }
                                                // ответ отрицательный
                                                else if (nResult == 0)
                                                {
                                                    txtAnswerType = "2";
                                                    string txtAnswText = Convert.ToString(row["Vid_vkl"]).Trim();
                                                    if (txtAnswText.Length.Equals(0)) txtAnswText = "Нет сведений";
                                                    // newID = InsertResponseIntTable(con, nID, txtAnswText, dtDatOtv, nStatus, org, ref iRewriteState, nNewPackID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, "2");
                                                    newID = InsertResponseIntTable(con, nID, txtAnswText, dtDatOtv, nStatus, lLogger2.logID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtAnswerType, lLogger2);
                                                    if (newID > 0)
                                                    {
                                                        iLCnt++; // все ок - считаем в загруженные
                                                        lLogger2.MemoryLLog("\n" + iCnt.ToString() + "\tЗагружен ответ на запрос № " + nID.ToString());
                                                    }
                                                    else
                                                    {
                                                        iECnt++; // ошибка загрузки
                                                        lLogger2.MemoryLLog("\n" + iCnt.ToString() + "\tОшибка!  Не загружено ответа на запрос № " + nID.ToString());
                                                        lLogger2.ErrMessage += "\n" + iCnt.ToString() + "\tОшибка!  Не загружено ответа на запрос № " + nID.ToString();
                                                    }
                                                }
                                                else if (nResult == 3) //  не идентифицирован должник в запросе
                                                {
                                                    txtAnswerType = "3"; // Необходимо уточнение данных документа, удостоверяющего личность должника
                                                    string txtAnswText = Convert.ToString(row["Vid_vkl"]).Trim();
                                                    if (txtAnswText.Length.Equals(0)) txtAnswText = "Не идентифицирован должник в запросе";

                                                    // newID = InsertResponseIntTable(con, nID, txtAnswText, dtDatOtv, nStatus, org, ref iRewriteState, nNewPackID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtAnswerType);
                                                    newID = InsertResponseIntTable(con, nID, txtAnswText, dtDatOtv, nStatus, lLogger2.logID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtAnswerType, lLogger2);
                                                    if (newID > 0)
                                                    {
                                                        iLCnt++; // все ок - считаем в загруженные
                                                        lLogger2.MemoryLLog("\n" + iCnt.ToString() + "\tЗагружен ответ на запрос № " + nID.ToString());
                                                    }
                                                    else
                                                    {
                                                        iECnt++; // ошибка загрузки
                                                        lLogger2.MemoryLLog("\n" + iCnt.ToString() + "\tОшибка!  Не загружено ответа на запрос № " + nID.ToString());
                                                        lLogger2.ErrMessage += "\n" + iCnt.ToString() + "\tОшибка!  Не загружено ответа на запрос № " + nID.ToString();
                                                    }
                                                }
                                                else
                                                {
                                                    ; // беда какая-то, непонтяно что произошло, код не 0, 2, 3, а другой
                                                    iECnt++; // ошибка загрузки
                                                    lLogger2.MemoryLLog("\n" + iCnt.ToString() + "\tОшибка!  Неизвестный код ответа на заспрос № " + nID.ToString() + " Код ответа = " + nResult.ToString());
                                                    lLogger2.ErrMessage += "\n" + iCnt.ToString() + "\tОшибка!  Неизвестный код ответа на заспрос № " + nID.ToString() + " Код ответа = " + nResult.ToString();
                                                    string txtMessage = "Ошибка!  Неизвестный код ответа на заспрос № " + nID.ToString() + " Код ответа = " + nResult.ToString();
                                                    ff.SendEmail(txtMessage, "Ошибка! Загрузка ответов на запросы из Сбербанка (новый XML) из файла " + txtCurrPath + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");

                                                }
                                            }
                                            catch (Exception ex)
                                            {
                                                iECnt++;
                                                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                                                lLogger2.WriteLLog("Ошибка! Загрузка пакета ответов экстренно прервалась.\n");
                                                lLogger2.WriteLLog("Значение счетчика = " + iCnt.ToString() + "\n");
                                                lLogger2.WriteLLog("Exception: " + ex.ToString() + "\n");

                                                if (nID > 0)
                                                {
                                                    lLogger2.WriteLLog("ID запроса = " + nID.ToString() + "\n");
                                                }

                                                // обновить статус лога-ответа
                                                // ответ загружен с ошибкой
                                                lLogger2.UpdateLLogStatus(11);
                                            }
                                        }
                                        else
                                        {
                                            // ошибка - не найден такой запрос
                                            iECnt++;
                                            lLogger2.WriteLLog("Ошибка! Ответ не загружен т.к. не найден исходный запрос.\n");
                                            lLogger2.ErrMessage += "\nОшибка! Ответ не загружен т.к. не найден исходный запрос.\n";
                                            if (nID > 0)
                                            {
                                                lLogger2.WriteLLog("ID запроса = " + nID.ToString() + "\n");
                                                lLogger2.ErrMessage += "ID запроса = " + nID.ToString() + "\n";
                                            }
                                        }

                                    } // end foreach
                                    if (iCnt >= 0)
                                    {
                                        lLogger2.UpdateLLogFileName(txtCurrFileName);
                                        iLogCnt++;
                                        // добавить в список alLoadedReestrs
                                        alLoadedReestrs.Add(txtCurrFileName);
                                        //string txtMessage = DateTime.Now.ToString() + " Загружено " + iRowsW + "\tстрок из реестра квитанций номер: " + tablename;
                                        lLogger2.WriteLLog("\n" + DateTime.Now + " завершение обработки пакета ответов из Сбербанка.\n");
                                        lLogger2.WriteLLog("Успешно обработано записей: " + iLCnt.ToString() + "\n");
                                        lLogger2.WriteLLog("Ошибок загрузки записей: " + iECnt.ToString() + "\n");
                                        // установить количество обработанных запросов
                                        lLogger2.UpdateLLogCount(Convert.ToInt32(iLCnt));
                                        // обновить статус лога-ответа
                                        lLogger2.UpdateLLogStatus(2);

                                        string txtMessage = "Успешно бработано ответов Сбербанка на запросы СПИ (XML): " + iLCnt.ToString() + " (из " + iCnt.ToString() + ").";
                                        // обновить статус родителя
                                        //UpdateLLogParentStatus(conGIBDD, nNewPackID, 10); // 10 - загружен ответ

                                        // записать в лог автозагрузки сколько строк загружено (txtMessage)
                                        lLogger.WriteLLog(txtMessage);

                                        txtMessage += "\n Реестр загружен из файла по пути: " + txtCurrPath;
                                        ff.WriteTofile(txtMessage, txtLogFileName);
                                        // в ОСП не отправляем
                                        // ff.SendEmail(txtMessage, "Загрузка реестра оплаченных штрафов МВД", txtOspEmail, txtAdminEmail, txtMailServ, "");
                                        ff.SendEmail(txtMessage, "Загрузка ответов на запросы из Сбербанка (новый XML) из файла " + txtCurrPath + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                        if (lLogger2.ErrMessage.Length > 0)
                                        {
                                            ff.SendEmail(lLogger2.ErrMessage, "Внимание! Ошибка загрузки файлов с ответами из Сбербанка (XML) в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                        }
                                    }
                                }
                                lLogger.WriteLLog("\n" + DateTime.Now + " окончание обработки пакета с ответами.\n");
                            }
                        }// проверка что файл не подписан ЭП
                        else
                        {
                            lLogger.WriteLLog("\n" + DateTime.Now + " XML файл содержит ЭП и не может быть обработан: " + txtPath + "\n");
                        }
                    }
                }
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.WriteTofile(DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, txtLogFileName);
                    string txtMessage = "Возникла ошибка при попытке загрузить реестр по пути " + txtCurrPath;
                    txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки файлов с ответами из Сбербанка (XML) в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                }
                return iLogCnt;
            }
            catch (Exception ex)
            {
                //if (DBFcon != null) DBFcon.Close();
                lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString();
                ff.WriteTofile(DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString(), txtLogFileName);
                string txtMessage = "Возникла ошибка при попытке загрузить реестр по пути " + txtCurrPath;
                txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString();
                ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки файлов с ответами из Сбербанка (XML) в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                return iLogCnt;
            }

            return iLogCnt;
        }

        public Int64 MakeSberSpecPens(string txtConStrRdb, string txtSberSpecPensPath, string txtTemplatePath, Logger_ufssprk_tools lLogger)
        {
            OleDbConnection RDBCon = new OleDbConnection(txtConStrRdb);
            char[] charsToTrim = { '.', ' ', ',', '\'' };
            File_funcs ff = new File_funcs();

            DataTable dtData = null;
            dtData = GetSberSpecPensTable();

            // временная загрузка для Новгорода
            // создать таблицу из полей ROSPI NSP FD ID OD DATE_R

            //string DataFilename = "C:\\basebank\\pens\\piter\\выгрузка4\\20150227_1\\Data.csv";
            //ArrayList Data = ReadPaths(DataFilename);
            // записать в нее данные
            // X1015041.dbf
            string common_filename = "X10" + DateTime.Today.Day.ToString().PadLeft(2, '0') + DateTime.Today.Month.ToString().PadLeft(2, '0');//  +"1.dbf"; // X10DDMM1.dbf

            // забрать данные из базы данных 
            DateTime dtBornDate = DateTime.Today.AddYears(-34);
            string txtSql = "select '100' || right(left(a.id,4),2) as ROSPI, a.doc_number, b.id_dbtr_name, b.id_dbtr_born from document a, doc_ip_doc b where a.id=b.id and a.docstatusid in (4, 9, 22, 23, 24) and b.id_dbtr_entid in(2,95) and b.id_dbtr_born < '" + dtBornDate.ToShortDateString() + "'";
            DataTable dtRdbData = null;
            dtRdbData = GetDataTableFromFB(RDBCon, txtSql, "DATA", lLogger);
            if (dtRdbData != null && dtRdbData.Rows.Count > 0)
            {
                foreach (DataRow row in dtRdbData.Rows)
                {
                    string txtFD = "";
                    string txtID = "";
                    string txtOD = "";
                    string id_dbtr_name = "";
                    if (dtRdbData.Columns.Contains("ID_DBTR_NAME"))
                    {
                        id_dbtr_name = Convert.ToString(row["ID_DBTR_NAME"]);
                    }

                    string txtErrMess = "";
                    string[] Names;
                    // Если строка содержит старую фамилию в скобках, то надо просто 2 раза вставить одно и тоже
                    if (id_dbtr_name.Contains("(") && id_dbtr_name.Contains(")"))
                    {
                        int nFirst = id_dbtr_name.IndexOf('(');
                        int nSecond = id_dbtr_name.IndexOf(')');
                        if (id_dbtr_name.Length > nSecond + 1)
                        {
                            string txtFirstFIO = id_dbtr_name.Substring(0, nFirst).Trim() + ' ' + id_dbtr_name.Substring(nSecond + 1).Trim();
                            string txtSecondFIO = id_dbtr_name.Substring(nFirst + 1, nSecond - nFirst - 1).Trim() + ' ' + id_dbtr_name.Substring(nSecond + 1).Trim();
                            Names = ff.parseFIO(txtFirstFIO, out txtErrMess);
                            // замена ; на , и дефис (-) на пробел
                            if (Names.Length > 0) txtFD = Convert.ToString(Names[0]).Trim(charsToTrim);
                            if (Names.Length > 1) txtID = Convert.ToString(Names[1]).Trim(charsToTrim);
                            if (Names.Length > 2) txtOD = Convert.ToString(Names[2]).Trim(charsToTrim);
                            // если вдруг какой косяк и есть 4-е имя типа ОГЛЫ
                            if (Names.Length > 3) txtOD += " " + Convert.ToString(Names[3]).Trim(charsToTrim);
                            if (Names.Length > 4) txtOD += " " + Convert.ToString(Names[4]).Trim(charsToTrim);
                            if (Names.Length > 5) txtOD += " " + Convert.ToString(Names[5]).Trim(charsToTrim);
                            if (Names.Length > 6)
                                txtOD += " " + Convert.ToString(Names[6]).Trim(charsToTrim);
                            dtData.Rows.Add(row["ROSPI"], row["doc_number"], txtFD, txtID, txtOD, Convert.ToDateTime(row["id_dbtr_born"]));
                            id_dbtr_name = txtSecondFIO;
                        }
                    }
                    Names = ff.parseFIO(id_dbtr_name, out txtErrMess);
                    // замена ; на , и дефис (-) на пробел
                    if (Names.Length > 0) txtFD = Convert.ToString(Names[0]).Trim(charsToTrim);
                    if (Names.Length > 1) txtID = Convert.ToString(Names[1]).Trim(charsToTrim);
                    if (Names.Length > 2) txtOD = Convert.ToString(Names[2]).Trim(charsToTrim);
                    // если вдруг какой косяк и есть 4-е имя типа ОГЛЫ
                    if (Names.Length > 3) txtOD += " " + Convert.ToString(Names[3]).Trim(charsToTrim);
                    if (Names.Length > 4) txtOD += " " + Convert.ToString(Names[4]).Trim(charsToTrim);
                    if (Names.Length > 5) txtOD += " " + Convert.ToString(Names[5]).Trim(charsToTrim);
                    if (Names.Length > 6)
                        txtOD += " " + Convert.ToString(Names[6]).Trim(charsToTrim);
                    dtData.Rows.Add(row["ROSPI"], row["DOC_NUMBER"], txtFD, txtID, txtOD, Convert.ToDateTime(row["ID_DBTR_BORN"]));
                }
            }



            // теперь просто вставить все в новый файл
            // где взять-то его, путь?
            // можно попробовать влепить в параметры функции, а потом уже разберемся - сделаем params.txt
            // скорее всего нужно делать CreatePathWithDates

            // нужна функция по вставке в новый файл из исходной таблицы по заданному диапазону
            // провести разбивку по 65535 строк. файлы разбить по папкам.


            int iStartIndex = 0;
            int split_limit = 65536;
            //string new_path = ff.CreatePathWithDateS(txtSberSpecPensPath);
            string new_path = txtSberSpecPensPath;
            string prefix = "";
            string txtFileName = "";

            int iFileNum = 1;
            while (iStartIndex < dtData.Rows.Count)
            {
                // файлы готовим прямо тут
                txtFileName = common_filename + iFileNum.ToString() + ".dbf"; ;
                if (File.Exists(string.Format(@"{0}\{1}", new_path, txtFileName)))
                {
                    File.Delete(string.Format(@"{0}\{1}", new_path, txtFileName));
                }
                // txtTemplatePath = "C:\\basebank\\pens\\piter\\template\\X7831051.DBF";
                File.Copy(string.Format(@"{0}", txtTemplatePath), string.Format(@"{0}\{1}", new_path, txtFileName));

                iStartIndex = InsertSberPensRowsToDBF(dtData, new_path, txtFileName, iStartIndex, split_limit, lLogger);
                iFileNum++;
            }


            return iStartIndex - 1;
        }


        private int InsertSberPensRowsToDBF(DataTable dtData, string new_path, string common_filename, int iStartIndex, int split_limit, Logger_ufssprk_tools lLogger)
        {

            // открыть соединение с новым файлом
            OleDbConnection DBFcon = null;
            DBFcon = new OleDbConnection();
            DBFcon.ConnectionString = string.Format("Provider=Microsoft.Jet.OLEDB.4.0;Extended Properties=dBase III;Data Source={0}", new_path);
            DBFcon.Open();

            int iCounter = 1;
            int iECounter = 0;

            int j = 0; // текущий индекс в dtData
            int iCnt = 0; // количество вставленных строк

            for (j = iStartIndex; iCnt < split_limit && j < dtData.Rows.Count; j++)
            {
                DataRow row = dtData.Rows[j];
                // записать строчку в новый файл
                if (InsertPensSpecialRowToCommonFile(DBFcon, row, common_filename, iCounter, lLogger))
                {
                    iCounter++;
                    iCnt++;
                }
                else
                {
                    lLogger.WriteLLog(" .\nОшибка! Не удалось вставить строку №" + (iCounter + iECounter).ToString() + ".");
                    if (lLogger.ErrMessage.Length > 0) lLogger.WriteLLog(" Текст ошибки: " + lLogger.ErrMessage);
                    iECounter++; // Считаем ошибки
                }
            }

            // закрыть соединение с файлом
            DBFcon.Close();
            DBFcon.Dispose();
            lLogger.WriteLLog(" .\nВ общий файл успешно добавлено строк: " + (iCounter - 1).ToString() + ".");
            if (iECounter > 0) lLogger.WriteLLog(" .\nОшибок выгрузки: " + iECounter.ToString() + ".");

            // MessageBox.Show("В общий файл успешно добавлено строк: " + (iCounter - 1).ToString() + ".", "Внимание!", MessageBoxButtons.OK);
            lLogger.UpdateLLogFileName(common_filename);
            lLogger.UpdateLLogStatus(2);

            // если размер позволяет вписаться в 32 бита
            //if (iCounter - 1 < 2147483648) lLogger.UpdateLLogCount(Convert.ToInt32(iCounter - 1));
            lLogger.UpdateLLogCount(Convert.ToInt32(iCounter - 1));

            return j;

        }

        private bool InsertPensSpecialRowToCommonFile(OleDbConnection DBFcon, DataRow row, string tablename, Int64 iCounter, Logger_ufssprk_tools lLogger)
        {
            OleDbCommand m_cmd;
            DateTime dtDatrozhd;
            try
            {

                if (DBFcon != null)
                {
                    m_cmd = new OleDbCommand();
                    m_cmd.Connection = DBFcon;

                    m_cmd.CommandText = "INSERT INTO " + tablename + " (NPP, ROISP, NSP, FD, ID, OD, DATE_R) VALUES (";

                    m_cmd.CommandText += Convert.ToString(iCounter); // NPP

                    string txtDiv = cutEnd(Convert.ToString(row["ROSPI"]).Trim(), 20);
                    m_cmd.CommandText += ", '" + txtDiv + "'"; // ROSPI

                    m_cmd.CommandText += ", '" + cutEnd(Convert.ToString(row["NSP"]).Trim(), 15) + "'";

                    String txtFD = cutEnd(Convert.ToString(row["FD"]).Trim(), 20);
                    String txtID = cutEnd(Convert.ToString(row["ID"]).Trim(), 15);
                    String txtOD = cutEnd(Convert.ToString(row["OD"]).Trim(), 15);

                    m_cmd.CommandText += ", '" + txtFD + "', '" + txtID + "', '" + txtOD + "'"; // FD, ID, OD

                    dtDatrozhd = Convert.ToDateTime(row["DATE_R"]);
                    m_cmd.Parameters.Add(new OleDbParameter("DATE_R", OleDbType.DBDate, 0, System.Data.ParameterDirection.Input, false, ((System.Byte)(0)), ((System.Byte)(0)), "DATE_R", System.Data.DataRowVersion.Original, dtDatrozhd));
                    m_cmd.CommandText += ", ?"; // DATE_R

                    m_cmd.CommandText += ')';
                    m_cmd.ExecuteNonQuery();
                    m_cmd.Dispose();

                    return true;
                }
                else return false;
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                //MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
                return false;
            }
        }



        public int CheckSberDocsSynchro(string constrPKOSP, int iDiv, string txtAdminEmail, DateTime dtDateStart, DateTime dtDateEnd, string txtServerAdr, Logger_ufssprk_tools lLogger)
        {

            File_funcs ff = new File_funcs();
            int iDelta = 0;
            int iInfObmCnt = 0;
            int iPkOspCnt = 0;

            try
            {
                lLogger.WriteLLog(". \n" + DateTime.Now.ToString() + " Проверка синхронизации запущена");
                iInfObmCnt = GetSberDocsInfObmenCount(constrPKOSP, dtDateStart, dtDateEnd, lLogger);
                lLogger.MemoryLLog(". \nВыгружено из Инф. обмена: " + iInfObmCnt.ToString());
                iPkOspCnt = GetSberDocsPKOSP_Count(constrPKOSP, dtDateStart, dtDateEnd, lLogger);
                lLogger.MemoryLLog(". \nВыгружено из ПК ОСП: " + iPkOspCnt.ToString());
                iDelta = iPkOspCnt - iInfObmCnt;
                DataTable dtInfo = null;
                string txtSubj = "";
                txtSubj = "Ошибка синхронизации постановлений в Сбер в ОСП " + iDiv.ToString("D2") + "; Дельта = " + iDelta.ToString();

                string txtText = "";

                /* в ПКОСП больше чем в Инф.обмене */
                if (iDelta > 0)
                {
                    txtText = "За период с " + dtDateStart.ToShortDateString() + " по " + dtDateEnd.ToShortDateString() + " выявлено расхождение:";
                    txtText += "\nВ ПКОСП больше чем в Инф.обмене: " + iDelta.ToString();
                    dtInfo = GetSberDocsPKOSP_Data(constrPKOSP, dtDateStart, dtDateEnd, lLogger);
                    if (dtInfo != null && dtInfo.Rows.Count > 0)
                    {
                        // doc_number, ip_info, spi_fio
                        txtText += " \nИсх. номер\tИП\tСПИ";
                        foreach (DataRow row in dtInfo.Rows)
                        {
                            txtText += " \n" + Convert.ToString(row["doc_number"]) + "\t" + Convert.ToString(row["ip_info"]) + "\t" + Convert.ToString(row["spi_fio"]);
                        }

                        ff.SendEmail(txtText, txtSubj, txtAdminEmail, txtAdminEmail, txtServerAdr, "");
                        lLogger.MemoryLLog(txtText);
                    }
                }
                else if (iDelta < 0)
                {
                    /* Инф.обмене больше чем в ПКОСП */
                    txtText = "За период с " + dtDateStart.ToShortDateString() + " по " + dtDateEnd.ToShortDateString() + " выявлено расхождение:";
                    txtText += "\nИнф.обмене больше чем в ПКОСП: " + iDelta.ToString();
                    dtInfo = GetSberDocsInfObmenData(constrPKOSP, dtDateStart, dtDateEnd, lLogger);
                    if (dtInfo != null && dtInfo.Rows.Count > 0)
                    {
                        // doc_number, ip_info, spi_fio
                        txtText += " \nИсх. номер\tИП\tСПИ";
                        foreach (DataRow row in dtInfo.Rows)
                        {
                            txtText += " \n" + Convert.ToString(row["doc_number"]) + "\t" + Convert.ToString(row["ip_info"]) + "\t" + Convert.ToString(row["spi_fio"]);
                        }
                        ff.SendEmail(txtText, txtSubj, txtAdminEmail, txtAdminEmail, txtServerAdr, "");
                        lLogger.MemoryLLog(txtText);
                    }

                }

                if (iDelta == 0)
                {
                    lLogger.UpdateLLogCount(iInfObmCnt);
                    lLogger.UpdateLLogStatus(2); // синхронизировано
                    // все хорошо - это надо отметить
                    lLogger.WriteLLog(". \nВыгрузка прошла синхронно. Пакеты совпадают по количеству постановлений.");
                }
                else
                {
                    lLogger.UpdateLLogCount(iDelta);
                    lLogger.UpdateLLogStatus(11); // ошибка синхронизации
                    lLogger.WriteLLog(". \nВыгрузка НЕ синхронизирована. Пакеты НЕ совпадают по количеству постановлений.");
                }
                lLogger.WriteLLog(". \n" + DateTime.Now.ToString() + " Проверка окончена.");
            }
            catch (Exception e)
            {
                lLogger.ErrMessage += " .\nException Thrown: " + e.ToString();
            }
            return iDelta;
        }

        private DateTime SberFileDate(string txtSberFileName){
            DateTime res = DateTime.MinValue;
            File_funcs ff = new File_funcs();
            char cCode = ' ';
            int nMonth =  -1;
            int nDay =  -1;
            if(txtSberFileName.Length == 8){
                cCode = Convert.ToChar(txtSberFileName.Substring(7,1));
                nMonth =  ff.monthNumber(cCode); // месяц
                Int32.TryParse(txtSberFileName.Substring(5,2), out nDay); // день
                // склеить дату
                string txtDateFromFileName = nDay.ToString("D2").PadLeft(2, '0');
                txtDateFromFileName += '.' + nMonth.ToString("D2").PadLeft(2, '0');
                txtDateFromFileName += '.' + DateTime.Today.Year.ToString("D4").PadLeft(4, '0');
                DateTime.TryParse(txtDateFromFileName, out res);
            }

            return res;
        }

        public int AutoLoadGIMS(string constrGIBDD, string constrPKOSP, string txtUploadDir, string txtLogFileName, int iDiv, string txtOspEmail, string txtAdminEmail, Logger_ufssprk_tools lLogger)
        {
            // в Local_Logs есть поле Filename, среди логов с типом 13 будем искать свой, с нужным именем
            // важно - год, год от года могут повторяться, поэтому нужно смотреть год в поле packdate
            // год брать только и брать только даты не старше чем 6 мес назад?
            // А леше нарезать заявку все что старше чем 6 мес чистить по планировщику.


            OleDbConnection ConG, con;
            Int32 iCnt = 0;
            Int32 iLogCnt = 0;
            Int32 iPercent = 0;
            Int32 iFoundCnt = 0;
            Int32 iSourceID = 0;
            ArrayList alFiles;
            ArrayList alLoadedReestrs;
            string txtCurrPath = "";
            string txtAgreementCode = "250";
            int nPackType = 14;
            int nMonthPeriod = -6;
            string txtMailServ = "mail10";

            ArrayList Strings;
            DataTable dtData;

            File_funcs ff = new File_funcs();
            try
            {
                string txtErrLog = "";
                ConG = new OleDbConnection(constrGIBDD);
                con = new OleDbConnection(constrPKOSP);

                // 1. Получить список реестров
                // параметры 1-10 - значит будем до 10 вложенных циклов просмотра внутрь папок делать 
                alFiles = ff.GetReestrs(txtUploadDir, 1, 10, lLogger);

                // 2.1 Получить список уже загруженных файлов с отчетами (по коду типа пакета = 13
                alLoadedReestrs = GetLoadedFiles(ConG, nMonthPeriod, txtAgreementCode, nPackType, lLogger);

                int nCurrY = DateTime.Today.Year;

                // 2.2 Загрузить файлы из alFiles в GIBDD_PLATEZH, 
                foreach (string txtPath in alFiles)
                {
                    txtCurrPath = txtPath;
                    // вычленить имя файла
                    if (txtPath.Length > 0)
                    {
                        string tablename = "";
                        string txtExt = "";
                        string txtFileDir = "";
                        string txtFileName = "";

                        txtExt = txtPath.Substring(txtPath.LastIndexOf(".") + 1).ToLower();
                        tablename = ff.GetTablename(txtPath, 4).Trim();
                        txtFileName = tablename + '.' + txtExt;

                        // проверяем только реестры O*.SSS
                        // для ГИМС такой формат файлов: YYYYMMDDGIMS_number.xls
                        if (!alLoadedReestrs.Contains(tablename + '.' + txtExt)
                        && (txtExt.Length == 3) && (txtExt.ToUpper() == "XLS")
                        && tablename.ToUpper().Contains("GIMS"))
                        {
                            string txtSubj = "";
                            string txtMess = "";
                            txtSubj = "Внимание! Ошибка в имени файла с удостоверениями ГИМС  " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0');
                            txtMess = "Внимание! Ошибка в имени файла с удостоверениями ГИМС в ОСП " + iDiv.ToString().PadLeft(2, '0');
                            txtMess += ". \n" + "Имя файла: " + tablename + '.' + txtExt;

                            string txtTmpErr = "";
                            decimal nOspNum = GetOSP_Num(con, out txtTmpErr);
                            // INSERT INTO PACK_TYPE (ID, TYPE) VALUES (13, 'Загрузка отчетов о результатах обработки из Сбербанка');
                            Logger_ufssprk_tools lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 1, nPackType, txtAgreementCode, 0, nOspNum, "Реестр сведений об удостоверениях из ГИМС.");
                            // записать в лог пакета дату и начало обработки
                            lLogger2.WriteLLog(DateTime.Now + " начало обработки реестра.\n");
                            lLogger2.WriteLLog("Обрабатывается файл: " + txtFileName + "\n");

                            // записать в лог пакета дату и начало обработки
                            // а в какой лог? в лог автозагрузки или в лог пакета с квитанциями?
                            lLogger.WriteLLog(DateTime.Now + " начало обработки реестра сведений о удостоверениях из ГИМС.\n");
                            lLogger.WriteLLog("Обрабатывается файл: " + txtPath + "\n");


                            DataTable dtXLS = ReadSberSSSFile(txtPath, lLogger2); // читает любой xls файл в DataTable
                            // ShowLoggerError(lLogger2); // вывод сообщения об ошибке, если она вдруг случилась внутри вызванной функции

                            int iRowsW = 0;
                            if (dtXLS != null)
                            {
                                //WriteExtReport(con, dtExtReport, lLogger2);
                                iRowsW = WriteGimsVU(ConG, dtXLS, tablename + '.' + txtExt, DateTime.Today, lLogger2);
                                //WriteMvdVU(ConG, dtXLS, tablename + '.' + txtExt, DateTime.Today, lLogger2);

                                //if (!ShowLoggerError(lLogger2)) // вывод сообщения об ошибке, если она вдруг случилась внутри вызванной функции
                                //    MessageBox.Show("Успешно обработано отчетов об обработке постановлений из Сбербанка: " + iRowsW.ToString() + ".\n", "Сообщение", MessageBoxButtons.OK);
                            }

                            if (iRowsW >= 0)
                            {
                                lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);
                                lLogger2.UpdateLLogStatus(2);
                                lLogger2.UpdateLLogCount(iRowsW);
                                iLogCnt++;
                                // добавить в список alLoadedReestrs
                                alLoadedReestrs.Add(tablename + '.' + txtExt);
                                string txtMessage = DateTime.Now.ToString() + " Загружено " + iRowsW + "\tстрок из реестра сведений номер: " + tablename + '.' + txtExt;
                                // записать в лог автозагрузки сколько строк загружено (txtMessage)
                                lLogger.WriteLLog("\n" + txtMessage);

                                txtMessage += "\n Реестр сведений загружен из файла по пути: " + txtCurrPath;
                                ff.WriteTofile(txtMessage, txtLogFileName);
                                // в ОСП не отправляем
                                // ff.SendEmail(txtMessage, "Загрузка реестра оплаченных штрафов МВД", txtOspEmail, txtAdminEmail, txtMailServ, "");

                                // если строк было больше 0, а загружено 0, то написать на email что это ошибка
                                if ((iRowsW == 0) && (dtXLS != null) && (dtXLS.Rows.Count > 0))
                                {
                                    //если загружено 0, то это Ошибка, надо с ней бороться
                                    txtMessage += " \n Необходимо проверить содержимое файла, т.к. не удалось загрузить ни одной строки!";
                                    ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки сведений о вод. удостоверениях из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                }
                                else
                                {
                                    ff.SendEmail(txtMessage, "Загрузка отчета о вод. удостоверениях из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                }
                            }
                            //else if (iRowsW == 0)
                            //{
                            //    //если загружено 0, то это Ошибка, надо с ней бороться
                            //    lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);
                            //    lLogger2.UpdateLLogStatus(2);
                            //    lLogger2.UpdateLLogCount(iRowsW);
                            //    iLogCnt++;
                            //    // добавить в список alLoadedReestrs
                            //    alLoadedReestrs.Add(tablename + '.' + txtExt);
                            //    string txtMessage = DateTime.Now.ToString() + " Загружено " + iRowsW + "\tстрок из реестра квитанций номер: " + tablename + '.' + txtExt;
                            //    // записать в лог автозагрузки сколько строк загружено (txtMessage)
                            //    lLogger.WriteLLog("\n" + txtMessage);

                            //    txtMessage += "\n Реестр загружен из файла по пути: " + txtCurrPath;
                            //    ff.WriteTofile(txtMessage, txtLogFileName);
                            //    // в ОСП не отправляем
                            //    // ff.SendEmail(txtMessage, "Загрузка реестра оплаченных штрафов МВД", txtOspEmail, txtAdminEmail, txtMailServ, "");
                            //    ff.SendEmail(txtMessage, "Загрузка квитанций от Сбербанка из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");

                            //}

                            if (lLogger2.ErrMessage.Length > 0)
                            {
                                ff.SendEmail(lLogger2.ErrMessage, "Внимание! Ошибка загрузки отчета о вод. удостоверениях из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                            }
                            // } end else - который если файл не бинарный, а хороший
                        }
                        else
                        {
                            // если файл не прошел по контролю имени файла или был уже загружен
                            ;
                        }
                    }
                }
                con.Dispose();
                ConG.Dispose();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.WriteTofile(DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, txtLogFileName);
                    string txtMessage = "Возникла ошибка при попытке сведения вод. удостоверениях по пути " + txtCurrPath;
                    txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки сведений вод. удостоверениях в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                }
                return iLogCnt;
            }
            catch (Exception ex)
            {
                //if (DBFcon != null) DBFcon.Close();
                lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка приложения (AutoLoadmvdVU). Message: " + ex.ToString();
                ff.WriteTofile(DateTime.Now.ToString() + " Ошибка приложения (AutoLoadMvdVU). Message: " + ex.ToString(), txtLogFileName);
                string txtMessage = "Возникла ошибка при попытке загрузить сведения вод. удостоверениях по пути " + txtCurrPath;
                txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка приложения (AutoLoadMvdVU). Message: " + ex.ToString();
                ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки сведений вод. удостоверениях в ОСП  " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                return iLogCnt;
            }

            return iLogCnt;

        }

        public int AutoLoadVU(string constrGIBDD, string constrPKOSP, string txtUploadDir, string txtLogFileName, int iDiv, string txtOspEmail, string txtAdminEmail, Logger_ufssprk_tools lLogger)
        {
            // в Local_Logs есть поле Filename, среди логов с типом 13 будем искать свой, с нужным именем
            // важно - год, год от года могут повторяться, поэтому нужно смотреть год в поле packdate
            // год брать только и брать только даты не старше чем 6 мес назад?
            // А леше нарезать заявку все что старше чем 6 мес чистить по планировщику.
            //20171103 теперь 12 месяцев сделаю - нечего ждать уже


            OleDbConnection ConG, con;
            Int32 iCnt = 0;
            Int32 iLogCnt = 0;
            Int32 iPercent = 0;
            Int32 iFoundCnt = 0;
            Int32 iSourceID = 0;
            ArrayList alFiles;
            ArrayList alLoadedReestrs;
            string txtCurrPath = "";
            string txtAgreementCode = "250";
            int nPackType = 14;
            int nMonthPeriod = -120;
            string txtMailServ = "mail10";

            ArrayList Strings;
            DataTable dtData;

            File_funcs ff = new File_funcs();
            try
            {
                string txtErrLog = "";
                ConG = new OleDbConnection(constrGIBDD);
                con = new OleDbConnection(constrPKOSP);

                // 1. Получить список реестров
                // параметры 1-10 - значит будем до 10 вложенных циклов просмотра внутрь папок делать 
                alFiles = ff.GetReestrs(txtUploadDir, 1, 10, lLogger);

                // 2.1 Получить список уже загруженных файлов с отчетами (по коду типа пакета = 13
                alLoadedReestrs = GetLoadedFiles(ConG, nMonthPeriod, txtAgreementCode, nPackType, lLogger);

                int nCurrY = DateTime.Today.Year;

                // 2.2 Загрузить файлы из alFiles в GIBDD_PLATEZH, 
                foreach (string txtPath in alFiles)
                {
                    txtCurrPath = txtPath;
                    // вычленить имя файла
                    if (txtPath.Length > 0)
                    {
                        string tablename = "";
                        string txtExt = "";
                        string txtFileDir = "";
                        string txtFileName = "";

                        txtExt = txtPath.Substring(txtPath.LastIndexOf(".") + 1).ToLower();
                        tablename = ff.GetTablename(txtPath, 4).Trim();
                        txtFileName = tablename + '.' + txtExt;

                        // проверяем только реестры O*.SSS
                        if (!alLoadedReestrs.Contains(tablename + '.' + txtExt)
                        && (txtExt.Length == 3) && (txtExt.ToUpper() == "XLS")
                        && tablename.ToUpper().Contains("VU"))
                        {
                            string txtSubj = "";
                            string txtMess = "";
                            txtSubj = "Внимание! Ошибка в имени файла с вод. удостоверениями  " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0');
                            txtMess = "Внимание! Ошибка в имени файла с вод. удостоверениями в ОСП " + iDiv.ToString().PadLeft(2, '0');
                            txtMess += ". \n" + "Имя файла с отчетом о результатах исполнения: " + tablename + '.' + txtExt;

                                string txtTmpErr = "";
                                decimal nOspNum = GetOSP_Num(con, out txtTmpErr);
                                // INSERT INTO PACK_TYPE (ID, TYPE) VALUES (13, 'Загрузка отчетов о результатах обработки из Сбербанка');
                                Logger_ufssprk_tools lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 1, nPackType, txtAgreementCode, 0, nOspNum, "Реестр сведений о вод. удостоверениях из МВД.");
                                // записать в лог пакета дату и начало обработки
                                lLogger2.WriteLLog(DateTime.Now + " начало обработки реестра.\n");
                                lLogger2.WriteLLog("Обрабатывается файл: " + txtFileName + "\n");

                                // записать в лог пакета дату и начало обработки
                                // а в какой лог? в лог автозагрузки или в лог пакета с квитанциями?
                                lLogger.WriteLLog(DateTime.Now + " начало обработки реестра сведений о вод. удостоверениях из МВД.\n");
                                lLogger.WriteLLog("Обрабатывается файл: " + txtPath + "\n");


                                DataTable dtXLS = ReadSberSSSFile(txtPath, lLogger2); // читает любой xls файл в DataTable
                                // ShowLoggerError(lLogger2); // вывод сообщения об ошибке, если она вдруг случилась внутри вызванной функции

                                int iRowsW = 0;
                                if (dtXLS != null)
                                {
                                    //WriteExtReport(con, dtExtReport, lLogger2);
                                    iRowsW = WriteMvdVU(ConG, dtXLS, tablename + '.' + txtExt, DateTime.Today, lLogger2);

                                    //if (!ShowLoggerError(lLogger2)) // вывод сообщения об ошибке, если она вдруг случилась внутри вызванной функции
                                    //    MessageBox.Show("Успешно обработано отчетов об обработке постановлений из Сбербанка: " + iRowsW.ToString() + ".\n", "Сообщение", MessageBoxButtons.OK);
                                }

                                // убрал проверку (iRowsW >= 0), т.к. получались ложные срабатывания если 0 был обработан, а была ошибка.
                                if ((iRowsW > 0) || ((iRowsW == 0) && (dtXLS != null) && (dtXLS.Rows.Count == 0)))
                                {
                                    lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);
                                    lLogger2.UpdateLLogStatus(2);
                                    lLogger2.UpdateLLogCount(iRowsW);
                                    iLogCnt++;
                                    // добавить в список alLoadedReestrs
                                    alLoadedReestrs.Add(tablename + '.' + txtExt);
                                    string txtMessage = DateTime.Now.ToString() + " Загружено " + iRowsW + "\tстрок из реестра сведений номер: " + tablename + '.' + txtExt;
                                    // записать в лог автозагрузки сколько строк загружено (txtMessage)
                                    lLogger.WriteLLog("\n" + txtMessage);

                                    txtMessage += "\n Реестр сведений загружен из файла по пути: " + txtCurrPath;
                                    ff.WriteTofile(txtMessage, txtLogFileName);
                                    // в ОСП не отправляем
                                    // ff.SendEmail(txtMessage, "Загрузка реестра оплаченных штрафов МВД", txtOspEmail, txtAdminEmail, txtMailServ, "");

                                    // если строк было больше 0, а загружено 0, то написать на email что это ошибка
                                    if ((iRowsW == 0) && (dtXLS != null) && (dtXLS.Rows.Count > 0))
                                    {
                                        //если загружено 0, то это Ошибка, надо с ней бороться
                                        txtMessage += " \n Необходимо проверить содержимое файла, т.к. не удалось загрузить ни одной строки!";
                                        ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки сведений о вод. удостоверениях из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                    }
                                    else
                                    {
                                        ff.SendEmail(txtMessage, "Загрузка отчета о вод. удостоверениях из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                    }
                                }
                                //else if (iRowsW == 0)
                                //{
                                //    //если загружено 0, то это Ошибка, надо с ней бороться
                                //    lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);
                                //    lLogger2.UpdateLLogStatus(2);
                                //    lLogger2.UpdateLLogCount(iRowsW);
                                //    iLogCnt++;
                                //    // добавить в список alLoadedReestrs
                                //    alLoadedReestrs.Add(tablename + '.' + txtExt);
                                //    string txtMessage = DateTime.Now.ToString() + " Загружено " + iRowsW + "\tстрок из реестра квитанций номер: " + tablename + '.' + txtExt;
                                //    // записать в лог автозагрузки сколько строк загружено (txtMessage)
                                //    lLogger.WriteLLog("\n" + txtMessage);

                                //    txtMessage += "\n Реестр загружен из файла по пути: " + txtCurrPath;
                                //    ff.WriteTofile(txtMessage, txtLogFileName);
                                //    // в ОСП не отправляем
                                //    // ff.SendEmail(txtMessage, "Загрузка реестра оплаченных штрафов МВД", txtOspEmail, txtAdminEmail, txtMailServ, "");
                                //    ff.SendEmail(txtMessage, "Загрузка квитанций от Сбербанка из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");

                                //}

                                if (lLogger2.ErrMessage.Length > 0)
                                {
                                    ff.SendEmail(lLogger2.ErrMessage, "Внимание! Ошибка загрузки отчета о вод. удостоверениях из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                    // установить статус - ошибка (а то будет 2)
                                    lLogger2.UpdateLLogStatus(1);
                                    lLogger2.WriteLLog(lLogger2.ErrMessage);
                                }
                                // } end else - который если файл не бинарный, а хороший
                            }
                            else
                            {
                                // если файл не прошел по контролю имени файла или был уже загружен
                                ;
                            }
                    }
                }
                con.Dispose();
                ConG.Dispose();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.WriteTofile(DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, txtLogFileName);
                    string txtMessage = "Возникла ошибка при попытке сведения вод. удостоверениях по пути " + txtCurrPath;
                    txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки сведений вод. удостоверениях в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                }
                return iLogCnt;
            }
            catch (Exception ex)
            {
                //if (DBFcon != null) DBFcon.Close();
                lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка приложения (AutoLoadmvdVU). Message: " + ex.ToString();
                ff.WriteTofile(DateTime.Now.ToString() + " Ошибка приложения (AutoLoadMvdVU). Message: " + ex.ToString(), txtLogFileName);
                string txtMessage = "Возникла ошибка при попытке загрузить сведения вод. удостоверениях по пути " + txtCurrPath;
                txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка приложения (AutoLoadMvdVU). Message: " + ex.ToString();
                ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки сведений вод. удостоверениях в ОСП  " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                return iLogCnt;
            }

            return iLogCnt;

        }

        public int AutoLoadSberReport(string constrGIBDD, string constrPKOSP, string txtUploadDir, string txtLogFileName, int iDiv, string txtOspEmail, string txtAdminEmail, Logger_ufssprk_tools lLogger)
        {
            // в Local_Logs есть поле Filename, среди логов с типом 13 будем искать свой, с нужным именем
            // важно - год, год от года могут повторяться, поэтому нужно смотреть год в поле packdate
            // год брать только и брать только даты не старше чем 6 мес назад?
            // А леше нарезать заявку все что старше чем 6 мес чистить по планировщику.


            OleDbConnection ConG, con;
            Int32 iCnt = 0;
            Int32 iLogCnt = 0;
            Int32 iPercent = 0;
            Int32 iFoundCnt = 0;
            Int32 iSourceID = 0;
            ArrayList alFiles;
            ArrayList alLoadedReestrs;
            string txtCurrPath = "";
            string txtAgreementCode = "СБЕР_ЭДО_10";
            int nPackType = 13;
            int nMonthPeriod = -6;
            string txtMailServ = "mail10";

            ArrayList Strings;
            DataTable dtData;

            File_funcs ff = new File_funcs();
            try
            {
                string txtErrLog = "";
                ConG = new OleDbConnection(constrGIBDD);
                con  = new OleDbConnection(constrPKOSP);

                // 1. Получить список реестров
                // параметры 1-10 - значит будем до 10 вложенных циклов просмотра внутрь папок делать 
                alFiles = ff.GetReestrs(txtUploadDir, 1, 10, lLogger);

                // 2.1 Получить список уже загруженных файлов с отчетами (по коду типа пакета = 13
                alLoadedReestrs = GetLoadedFiles(ConG, nMonthPeriod, txtAgreementCode, nPackType, lLogger);

                int nCurrY = DateTime.Today.Year;

                // 2.2 Загрузить файлы из alFiles в GIBDD_PLATEZH, 
                foreach (string txtPath in alFiles)
                {
                    txtCurrPath = txtPath;
                    // вычленить имя файла
                    if (txtPath.Length > 0)
                    {
                        string tablename = "";
                        string txtExt = "";
                        string txtFileDir = "";
                        string txtOspCode = "";
                        string txtRightOspCode = "10" + iDiv.ToString().PadLeft(2, '0');
                        string txtFileName = "";

                        txtExt = txtPath.Substring(txtPath.LastIndexOf(".") + 1).ToLower();
                        tablename = ff.GetTablename(txtPath, 4).Trim();
                        if (tablename.Length > 4)
                        {
                            txtOspCode = tablename.Substring(1, 4);
                        }
                        txtFileName = tablename + '.' + txtExt;

                        // проверяем только реестры O*.SSS
                        if (!alLoadedReestrs.Contains(tablename + '.' + txtExt)
                        && (txtExt.Length == 3) && (txtExt.ToUpper() == "SSS")
                        && tablename.ToUpper().StartsWith("O"))
                        {
                            bool bEmailFilenameErr = false;
                            string txtSubj = "";
                            string txtMess = "";
                            txtSubj = "Внимание! Ошибка оператора Сбербанка в имени файла с отчетом об исполнении  " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0');
                            txtMess = "Внимание! Ошибка оператора Сбербанка в имени файла с отчетом об исполнении в ОСП " + iDiv.ToString().PadLeft(2, '0');
                            txtMess += ". \n" + "Имя файла с отчетом о результатах исполнения: " + tablename + '.' + txtExt;
                            if (tablename.Length < 8)
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Длина имени файла составляет менее 8 символов.";
                            }

                            if (txtOspCode != txtRightOspCode)
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Неверный код ОСП в имени файла (фактически: " + txtOspCode + " | должно быть: " + txtRightOspCode + ").";
                            }

                            // отправить сообщение об ошибке в имени реестра если реестр еще не был загружен
                            if (bEmailFilenameErr)
                            {
                                txtMess += " \nФайл загружен по пути: " + txtPath;

                                // записываем чтобы повторно не информировать об ошибке каждый день
                                // pack_status = 2000 когда ошибка в имени файла после 12.11.2015 (до этого была 1000).
                                // pack_status = 1000 когда файл выглядит бинарным
                                // pack_status = -1000 когда файл был помечен как бинарный или с ошибкой, но потом его сбросили чтобы обработать повторно, т.к. выяснилось что это было некорректно (в части бинарных файлов)
                                // для сброса использовался такой sql:
                                // update local_logs ll set ll.pack_status  = -1000
                                // where ll.pack_type = 10 and ll.conv_code = 'СБЕР_ЭДО_10' and '12.05.2015' < ll.packdate and ll.pack_status = 1000
                                Logger_ufssprk_tools lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 2000, 13, txtAgreementCode, 0, Convert.ToDecimal(iDiv), "Пакет отчетов о результатах обработки постановлений в Сбербанке.\n" + txtMess);
                                lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);
                                // отправляем Email
                                ff.SendEmail(txtMess, txtSubj, txtAdminEmail, txtAdminEmail, txtMailServ, "");
                            }

                            //  проверить текущий год - если больше 2016 то не смотреть дату
                            // если год = 2016, то из имени файла выжать дату и обработать тольк то, что с датой > '24.02.2016'
                            // но меньше чем + 2 мес к тек. дате - чтобы не обрабатывать повторно старые года (при этом старые года нужно чистить)
                            if ((nCurrY > 2016)
                                || ((nCurrY == 2016) && (SberFileDate(tablename) > Convert.ToDateTime("23.02.2016") && (SberFileDate(tablename) < DateTime.Today.AddMonths(2)))
                                   )
                              )
                            {
                                
                                string txtTmpErr = "";
                                decimal nOspNum = GetOSP_Num(con, out txtTmpErr);
                                // INSERT INTO PACK_TYPE (ID, TYPE) VALUES (13, 'Загрузка отчетов о результатах обработки из Сбербанка');
                                Logger_ufssprk_tools lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 1, 13, txtAgreementCode, 0, nOspNum, "Пакет отчетов о результатах обработки постановлений в Сбербанке.");
                                // записать в лог пакета дату и начало обработки
                                lLogger2.WriteLLog(DateTime.Now + " начало обработки пакета отчетов об обработке постановлений.\n");
                                lLogger2.WriteLLog("Обрабатывается файл: " + txtFileName + "\n");

                                // записать в лог пакета дату и начало обработки
                                // а в какой лог? в лог автозагрузки или в лог пакета с квитанциями?
                                lLogger.WriteLLog(DateTime.Now + " начало обработки пакета отчетов о результатах обработки в Сбербанке.\n");
                                lLogger.WriteLLog("Обрабатывается файл: " + txtPath + "\n");


                                DataTable dtXLS = ReadSberSSSFile(txtPath, lLogger2);
                                // ShowLoggerError(lLogger2); // вывод сообщения об ошибке, если она вдруг случилась внутри вызванной функции
                                DataTable dtExtReport = null;
                                //dtExtReport = mvv.MakeExtReportTable(con, dtXLS, lLogger);
                                // MakeExtReportTable3 - загрузка отчетов о рез-тах обработки постановлений
                                dtExtReport = MakeExtReportTable3(con, dtXLS, lLogger2);
                                
                                int iRowsW = 0;
                                if (dtExtReport != null)
                                {
                                
                                    iRowsW = WriteExtReport(con, dtExtReport, lLogger2);

                                    //if (!ShowLoggerError(lLogger2)) // вывод сообщения об ошибке, если она вдруг случилась внутри вызванной функции
                                    //    MessageBox.Show("Успешно обработано отчетов об обработке постановлений из Сбербанка: " + iRowsW.ToString() + ".\n", "Сообщение", MessageBoxButtons.OK);
                                }

                                // TODO: !! грамотно удалить  старый код - оставив оправку e-mail и логирование
                                
                                if (iRowsW >= 0)
                                {
                                    lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);
                                    lLogger2.UpdateLLogStatus(2);
                                    lLogger2.UpdateLLogCount(iRowsW);
                                    iLogCnt++;
                                    // добавить в список alLoadedReestrs
                                    alLoadedReestrs.Add(tablename + '.' + txtExt);
                                    string txtMessage = DateTime.Now.ToString() + " Загружено " + iRowsW + "\tстрок из отчета об исполнении номер: " + tablename + '.' + txtExt;
                                    // записать в лог автозагрузки сколько строк загружено (txtMessage)
                                    lLogger.WriteLLog("\n" + txtMessage);

                                    txtMessage += "\n Отчеты об исполнении загружен из файла по пути: " + txtCurrPath;
                                    ff.WriteTofile(txtMessage, txtLogFileName);
                                    // в ОСП не отправляем
                                    // ff.SendEmail(txtMessage, "Загрузка реестра оплаченных штрафов МВД", txtOspEmail, txtAdminEmail, txtMailServ, "");

                                    // если строк было больше 0, а загружено 0, то написать на email что это ошибка
                                    if ((iRowsW == 0) && (dtExtReport != null) && (dtExtReport.Rows.Count > 0))
                                    {
                                        //если загружено 0, то это Ошибка, надо с ней бороться
                                        txtMessage += " \n Необходимо проверить содержимое файла, т.к. не удалось загрузить ни одной строки!";
                                        ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки отчета об исполнении от Сбербанка из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                    }
                                    else
                                    {
                                        ff.SendEmail(txtMessage, "Загрузка отчета о результатх исполнения от Сбербанка из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                    }
                                }
                                //else if (iRowsW == 0)
                                //{
                                //    //если загружено 0, то это Ошибка, надо с ней бороться
                                //    lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);
                                //    lLogger2.UpdateLLogStatus(2);
                                //    lLogger2.UpdateLLogCount(iRowsW);
                                //    iLogCnt++;
                                //    // добавить в список alLoadedReestrs
                                //    alLoadedReestrs.Add(tablename + '.' + txtExt);
                                //    string txtMessage = DateTime.Now.ToString() + " Загружено " + iRowsW + "\tстрок из реестра квитанций номер: " + tablename + '.' + txtExt;
                                //    // записать в лог автозагрузки сколько строк загружено (txtMessage)
                                //    lLogger.WriteLLog("\n" + txtMessage);

                                //    txtMessage += "\n Реестр загружен из файла по пути: " + txtCurrPath;
                                //    ff.WriteTofile(txtMessage, txtLogFileName);
                                //    // в ОСП не отправляем
                                //    // ff.SendEmail(txtMessage, "Загрузка реестра оплаченных штрафов МВД", txtOspEmail, txtAdminEmail, txtMailServ, "");
                                //    ff.SendEmail(txtMessage, "Загрузка квитанций от Сбербанка из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");

                                //}

                                if (lLogger2.ErrMessage.Length > 0)
                                {
                                    ff.SendEmail(lLogger2.ErrMessage, "Внимание! Ошибка загрузки отчета о результатах обработки от Сбербанка из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                }
                                // } end else - который если файл не бинарный, а хороший
                            }
                            else
                            {
                                // если файл не прошел по контролю имени файла или был уже загружен
                                ;
                            }
                        } // end if (проверить что имя файла по дате подходит)
                    }
                }
                con.Dispose();
                ConG.Dispose();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.WriteTofile(DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, txtLogFileName);
                    string txtMessage = "Возникла ошибка при попытке загрузить отчет о результатах обработки из Сбербанка по пути " + txtCurrPath;
                    txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки отчета о результатах обработки от Сбербанка в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                }
                return iLogCnt;
            }
            catch (Exception ex)
            {
                //if (DBFcon != null) DBFcon.Close();
                lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка приложения (AutoLoadSberReport). Message: " + ex.ToString();
                ff.WriteTofile(DateTime.Now.ToString() + " Ошибка приложения (AutoLoadSberReport). Message: " + ex.ToString(), txtLogFileName);
                string txtMessage = "Возникла ошибка при попытке загрузить реестр по пути " + txtCurrPath;
                txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка приложения (AutoLoadSberReport). Message: " + ex.ToString();
                ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки отчета о результатах обработки от Сбербанка в ОСП  " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                return iLogCnt;
            }

            return iLogCnt;

        }

        public decimal InsertErrorResp(OleDbConnection conPK_OSP, string constrGIBDD, string txtAgreementCode, string txtAgentCode, string txtAgentDeptCode, decimal nId, string txtEntityName, ref Logger_ufssprk_tools lLoggerError, Logger_ufssprk_tools lLogger)
        {
            decimal nErrId = 0;
            try
            {
                if (lLoggerError == null)
                {
                    lLoggerError = new Logger_ufssprk_tools(constrGIBDD, 1, -1, txtAgreementCode, 0, lLogger.OspNum, "Пакет запросов, которые не были выгружены т.к. в них не заполнены обязательные поля.\n");
                }
                
                decimal nStatus = 19; // ответ получен
                string txtAnswerType = "3"; // требуется уточнение
                string txtResp = "Запрос СПИ № " + nId.ToString() + " не был отправлен т.к. не указана дата рождения должника. Информация помещена в ответ на запрос.";



                nErrId = InsertResponseIntTable(conPK_OSP, nId, txtResp, DateTime.Today, nStatus, lLoggerError.logID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtAnswerType, lLoggerError);
                if (nErrId > 0) // вставить сведения об ответе в ИТ
                {
                    lLogger.MemoryLLog("\n0\tОшибка - запрос № " + nId.ToString() + " не выгружен выгружен файл.");
                    lLoggerError.AppendLLogCount(1);
                    lLoggerError.WriteLLog(txtResp + "\n");
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка приложения (InsertIcMvdErrorResp). Message: " + ex.ToString();
                return nErrId;
            }

            return nErrId;
        }

        public decimal InsertIcMvdErrorResp(OleDbConnection conPK_OSP, string constrGIBDD, string txtAgreementCode, decimal nId, string txtEntityName, ref Logger_ufssprk_tools lLoggerError, Logger_ufssprk_tools lLogger)
        {
            decimal nErrId = 0;
            try
            {
                                    if (lLoggerError == null)
                                    {
                                        lLoggerError = new Logger_ufssprk_tools(constrGIBDD, 1, -1, txtAgreementCode, 0, lLogger.OspNum, "Пакет запросов, которые не были выгружены т.к. в них не заполнены обязательные поля.\n");
                                    }
                                    // ИЦ_МВД_10 - все 3 одинаковые
                                    string txtAgentCode = txtAgreementCode; // тут все должно быть одинаковым - и соглашение контрагент и подразделение 
                                    string txtAgentDeptCode = txtAgreementCode; // тут все должно быть одинаковым - и соглашение контрагент и подразделение 
                                    decimal nStatus = 19; // ответ получен
                                    string txtAnswerType = "3"; // требуется уточнение
                                    string txtResp = "Запрос СПИ № " + nId.ToString() + " не был отправлен т.к. не указана дата рождения должника. Информация помещена в ответ на запрос.";
                                    
                                    

                                    nErrId = InsertResponseIntTable(conPK_OSP, nId, txtResp, DateTime.Today, nStatus, lLoggerError.logID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtAnswerType, lLoggerError);
                                    if (nErrId > 0) // вставить сведения об ответе в ИТ
                                    {
                                        lLogger.MemoryLLog("\n0\tОшибка - запрос № " + nId.ToString() + " не выгружен выгружен файл.");
                                        lLoggerError.AppendLLogCount(1);
                                        lLoggerError.WriteLLog(txtResp + "\n");
                                    }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка приложения (InsertIcMvdErrorResp). Message: " + ex.ToString();
                return nErrId;
            }

            return nErrId;
        }

        public int AutoLoadCredOrgOtvet(string constrGIBDD, string constrPKOSP, string txtUploadDir, string txtLogFileName, int iDiv, string txtOspEmail, string txtAdminEmail, string txtAgreementCode, int nPackType, decimal org, Logger_ufssprk_tools lLogger)
        {
            // чтобы найти parent_id будем использовать то, что ll.packdate = dbf_row[datzapr2]
            // чтобы 

            OleDbConnection ConG, con;
            Int32 iCnt = 0;
            Int32 iECnt = 0;
            Int32 iLogCnt = 0;
            Int32 iPercent = 0;
            Int32 iFoundCnt = 0;
            Int32 iSourceID = 0;
            ArrayList alFiles;
            ArrayList alLoadedReestrs;
            ArrayList alLoadedReestrs3;
            ArrayList alLoadedReestrs4;
            string txtCurrPath = "";
            //int nMonthPeriod = -12; // чистим раз в год
            //int nMonthPeriod = -12; // чистим раз в год
            int nMonthPeriod = -1000; // имена уникальные - не нужно ничего чистить
            // txtAgreementCode = "ИЦ_МВД_10";
            // nPackType = 2; - ответ обыкновенный

            ArrayList Strings;
            DataTable dtData;
            string txtEntityName = "";
            string txtMailServ = "mail10";
            

            File_funcs ff = new File_funcs();
            try
            {
                string txtErrLog = "";
                ConG = new OleDbConnection(constrGIBDD);
                con = new OleDbConnection(constrPKOSP);

                                // 1. Получить список ответов

                alFiles = ff.GetReestrs(txtUploadDir, 1, 10, lLogger);

                // 2.1 Получить список уже загруженных файлов с ответами
                // сначала грузим обычные ответы которые с ошибками, например (packtype = 2)
                // сначала грузим положительные ответы (packtype = 3 find)
                // потом грузим отрицательные ответы (packtype = 4 nofind)
                //alLoadedReestrs = GetLoadedFiles(ConG, nMonthPeriod, txtAgreementCode, nPackType, lLogger);
                alLoadedReestrs = GetLoadedFiles(ConG, nMonthPeriod, txtAgreementCode, 2, lLogger);
                alLoadedReestrs3 = GetLoadedFiles(ConG, nMonthPeriod, txtAgreementCode, 3, lLogger);
                alLoadedReestrs4 = GetLoadedFiles(ConG, nMonthPeriod, txtAgreementCode, 4, lLogger);
                
                // потом смешиваем
                alLoadedReestrs.AddRange(alLoadedReestrs3);
                alLoadedReestrs.AddRange(alLoadedReestrs4);
                txtEntityName = GetLegal_Name(org, con, lLogger);

                // 2.2 Загрузить файлы из alFiles в GIBDD_PLATEZH, 
                foreach (string txtPath in alFiles)
                {
                    // внутренний лог - для каждого файла отдельный
                    Logger_ufssprk_tools lLogger2 = null;
                    iCnt = 0;
                    iECnt = 0;

                    txtCurrPath = txtPath;
                    // вычленить имя файла
                    if (txtPath.Length > 0)
                    {
                        decimal nFirstID = 0;
                        string tablename = "";
                        string txtExt = "";
                        string txtFileDir = "";
                        string txtOspCode = "";
                        string txtRightOspCode = iDiv.ToString().PadLeft(2, '0');

                        txtExt = txtPath.Substring(txtPath.LastIndexOf(".") + 1).ToLower();
                        tablename = ff.GetTablename(txtPath, 4).Trim();

                        // обрабатываем только FIND или NOFIND типа DBF
                        if (!alLoadedReestrs.Contains(txtPath)
                        && (txtExt.Length == 3) && (txtExt.ToUpper() == "DBF")
                        && (tablename.ToUpper().StartsWith("NOFIND") || tablename.ToUpper().StartsWith("FIND")))
                        {
                            // нужно сделать контроль операторов сбера и сдать ошибку на почту если что не так:
                            ff.ChangeByte(txtPath, 0x65, 30,  lLogger);
                            bool bEmailFilenameErr = false;
                            string txtSubj = "";
                            string txtMess = "";
                            txtSubj = "Внимание! Ошибка в файле с ответами из кред. организации " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0');
                            txtMess = "Внимание! Ошибка в файле с ответами из кред. организации в ОСП " + iDiv.ToString().PadLeft(2, '0');
                            txtMess += ". \n" + "Имя файла с ответами из кред. организации : " + txtPath;


                            // чтобы получить osp_code нужно взять первую строчку и получить значение столбца zapros
                            // открыть DBF соединение и прочитать первую строчку
                            txtOspCode = "";
                            DataTable tblDbfData = null;
                            DateTime dtDatZapr2 = DateTime.MinValue;
                            tblDbfData = ReadDbfFile(txtPath, txtExt.Length+1, "", lLogger);
                            if (tblDbfData != null && tblDbfData.Rows.Count > 0)
                            {
                                DataRow row = tblDbfData.Rows[0];

                                // получить код осп
                                if (row.Table.Columns.Contains("Zapros"))
                                {
                                    string txtZapros = row["Zapros"].ToString().Trim();
                                    nFirstID = Convert.ToDecimal(txtZapros);
                                    if (txtZapros.Length > 4)
                                        txtOspCode = txtZapros.Substring(2, 2);
                                }

                                // получить дату выгрузки запроса
                                if (row.Table.Columns.Contains("Datzpr2"))
                                {
                                    string txtDatZapr2 = row["Datzpr2"].ToString().Trim();
                                    DateTime.TryParse(txtDatZapr2, out dtDatZapr2);
                                }
                            }
                            else
                            {
                                // если файл пустой - то не получить код ОСП и не проверить ничего
                                    // но и никакого риска что загрузим неверные сведения тоже нет
                                        // то есть просто ничего не делать в таком случае
                                // поэтому - просто приравняем код отдела чтобы проверка не давала ложное срабатываение
                                txtOspCode = txtRightOspCode;
                            }


                            if (txtOspCode != txtRightOspCode)
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Неверный код ОСП в имени файла (фактически: " + txtOspCode + " | должно быть: " + txtRightOspCode + ").";
                            }

                            if ((txtExt.Length != 3) || (txtExt.ToUpper() != "DBF"))
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Неверное расширение в имени файла.";
                            }

                            // отправить сообщение об ошибке в имени реестра если реестр еще не был загружен
                            if (bEmailFilenameErr)
                            {
                                txtMess += " \nФайл загружен по пути: " + txtPath;

                                // записываем чтобы повторно не информировать об ошибке каждый день
                                // pack_status = 2000 когда ошибка в имени файла после 12.11.2015 (до этого была 1000).
                                lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 2000, nPackType, txtAgreementCode, 0, Convert.ToDecimal(iDiv), "Пакет ответов на запросы из кредитной организации.\n" + txtMess);
                                lLogger2.UpdateLLogFileName(txtPath);

                                // отправляем Email
                                ff.SendEmail(txtMess, txtSubj, txtAdminEmail, txtAdminEmail, txtMailServ, "");
                            }

                            // обрабатываем положительные ответы 
                            # region "FIND"
                            if (tablename.ToUpper().StartsWith("FIND"))
                            {
                                try
                                {
                                    DataTable tbl = null;
                                    string txtSql = "select distinct  fil, litzdolg, fio, godr, adres, nomls, ostat, rschet, ostsch, nomosp, zapros, nomspi, nomip, datotv, flzprspi, datzpr1, datzpr2 from FIND ORDER BY ZAPROS";// упорядочили по полю ZAPROS чтобы работать с несколькими ответами на 1 запрос
                                    tbl = ReadDbfFile(txtPath, txtExt.Length+1, txtSql, lLogger);
                                    nPackType = 3; // ответ отрицательный

                                    if (tbl != null && tbl.Rows.Count >= 0)
                                    {

                                        Int32 i;
                                        bool bMoreTanOne = false;
                                        string txtCommonAnswer = "";
                                        Decimal nID = 0;
                                        String txtID = "";
                                        Decimal newID = 0;
                                        // nStatus = 20; // ответ получен
                                        decimal nStatus = 19; // ответ получен
                                        bool bSumNotZero = false;

                                        string txtBik = "";
                                        // где взять Agent_Code?

                                        // Сделать преамбулу txtPreamb
                                        string txtPrePreamb = "(ВНИМАНИЕ! ПОЛУЧЕНЫ СВЕДЕНИЯ О ДОЛЖНИКЕ!) ";
                                        string txtPreamb = "в соответствии с " + GetLegal_Conv(org, con, lLogger); // PKOSP_GetOrgConvention(org);
                                        txtPreamb += " получен ответ: ";
                                        // txtPreamb += "Ответ из " + GetLegal_Name(org);

                                        // Сделать общую строчку txtCommonRespText
                                        string txtCommonRespText = "";

                                        decimal nAgreementID = 0;
                                        decimal nAgent_dept_id = 0;
                                        decimal nAgent_id = 0;
                                        decimal nDx_pack_id = 0;
                                        decimal nNewPackID = 0;

                                        txtAgreementCode = "";
                                        string txtAgentCode = "";
                                        string txtAgentDeptCode = "";

                                        string txtAnswerType = "1";



                                        // если файл с ответами не пустой, то по первому ответу определить
                                        # region "загрузка строк файла FIND"
                                        if (tbl.Rows.Count > 0)
                                        {
                                            // FindSendlist(con, nFirstID, org, lLogger) - давно не работает
                                            //if (FindSendlist(con, nFirstID, org, lLogger)) // указываем параметр org - контрагент из списка рассылки, которому была направлена копия
                                            //{
                                            //    // значит это новый запрос
                                            //    // получить параметры: соглашение, контрагент, подразделение
                                            //    DataTable dtParams = GetPackParams(con, nFirstID, org, lLogger);
                                            //    if ((dtParams != null) && (dtParams.Rows.Count > 0))
                                            //    {
                                            //        nAgreementID = Convert.ToDecimal(dtParams.Rows[0]["agreement_id"]);
                                            //        nAgent_dept_id = Convert.ToDecimal(dtParams.Rows[0]["agent_dept_id"]);
                                            //        nAgent_id = Convert.ToDecimal(dtParams.Rows[0]["agent_id"]);
                                            //        nDx_pack_id = Convert.ToDecimal(dtParams.Rows[0]["dx_pack_id"]);
                                            //    }
                                            //}

                                            // нужно создать новый входящий пакет
                                            if (nAgreementID == 0)
                                            {
                                                nAgreementID = GetAgr_by_Org(con, org, lLogger); // номер соглашения
                                                nAgent_id = GetAgent_ID(con, nAgreementID, lLogger);
                                                nAgent_dept_id = GetAgentDept_ID(con, nAgreementID, lLogger);
                                            }

                                            txtAgreementCode = GetAgreement_Code(con, Convert.ToInt32(nAgreementID), lLogger);
                                            txtAgentCode = GetAgent_Code(con, Convert.ToInt32(nAgreementID), lLogger);
                                            txtAgentDeptCode = GetAgentDept_Code(con, Convert.ToInt32(nAgreementID), lLogger);

                                            txtEntityName = GetLegal_Name(org, con, lLogger);

                                            txtBik = GetBik(txtAgentCode);
                                            //nPackType = 3;

                                            lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 1, nPackType, txtAgreementCode, 0, lLogger.OspNum, "Пакет ответов на запрос из кредитной организации.");



                                            //nNewPackID = ID_CreateDX_PACK_I(con, 1, nAgent_id, nAgent_dept_id, nAgreementID, "", txtAgentCode, txtAgreementCode, txtAgentDeptCode);

                                            // найти parent_id по dtDatZapr2
                                            decimal nParentID = GetParentCredOrgLog(ConG, txtAgentCode, dtDatZapr2.ToShortDateString(), dtDatZapr2.AddDays(1).ToShortDateString(), lLogger);
                                            if (nParentID > 0) lLogger2.UpdateLLogParent(nParentID);

                                            // записать в лог пакета дату и начало обработки
                                            // а в какой лог? в лог автозагрузки или в лог пакета с квитанциями?
                                            lLogger.WriteLLog(DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + " начало обработки пакета.\n");
                                            lLogger.WriteLLog("Обрабатывается файл: " + txtPath + "\n");

                                            if (nParentID != -1)
                                            {
                                                lLogger2.WriteLLog(DateTime.Now.ToString() + " начало обработки пакета.\n");
                                                lLogger2.WriteLLog("Обрабатывается файл: " + txtPath + "\n");

                                                // пробегаем все ответы, отсортированные по полю ZAPROS
                                                for (i = 0; i < tbl.Rows.Count; i++)
                                                {
                                                    // сбросить флаг положительной суммы
                                                    bSumNotZero = false;
                                                    DataRow row = tbl.Rows[i];

                                                    #region "Description"
                                                    // Сделать общую строчку txtCommonRespText
                                                    // Сделать текущую строчку txtCurrRowRespText
                                                    // Если это не последняя строчка и след. строка содержит продолжение ответа, то 
                                                    // txtCommonRespText += txtCurrRowRespText;
                                                    // Иначе - txtTotalRespText = txtPreamb + txtResponseHeader + txtCommonRespText;
                                                    // Записать txtTotalRespText
                                                    // в результате избегаем UPDATE для записи многострочных ответов.

                                                    // хо-хо, а вот теперь у нас новая концепция - скажи да многострочным ответам ...
                                                    // на первом шаге вставляем новый ответ с фразой типа - есть сведения
                                                    // запоминаем ID первого ответа
                                                    // потом вставляем доп сведения к этому ID
                                                    // на последнем шаге делаем UPDATE строчки DATA_STR ответа ID
                                                    // вместо Есть сведения появится - txtTotalRespText
                                                    #endregion

                                                    txtID = Convert.ToString(row["ZAPROS"]);
                                                    if (!Decimal.TryParse(txtID, out nID))
                                                    {
                                                        nID = 0;
                                                    }

                                                    if ((i > 0) || FindZapros(con, nID, lLogger)) // если есть такой запрос в базе для первой строчки
                                                    {
                                                        // значит начинаем вставлять в базу структуры данных ответа
                                                        try
                                                        {
                                                            string txtDatOtv = "";
                                                            DateTime dtDatOtv;

                                                            txtDatOtv = Convert.ToString(row["DATOTV"]);
                                                            if (!DateTime.TryParse(txtDatOtv, out dtDatOtv))
                                                            {
                                                                dtDatOtv = DateTime.MaxValue;
                                                            }

                                                            string txtDatZap = "";
                                                            DateTime dtDatZap;

                                                            // проверить дату запроса
                                                            txtDatZap = Convert.ToString(row["DATZPR2"]);
                                                            if (!DateTime.TryParse(txtDatZap, out dtDatZap))
                                                            {
                                                                dtDatZap = DateTime.MaxValue;
                                                            }

                                                            // Сделать текущую строчку txtCurrRowRespText
                                                            string txtCurrRowRespText = "";

                                                            // вот сюда и воткнуть ФИО и год рождения, адрес
                                                            txtCurrRowRespText += Convert.ToString(row["FIO"]).TrimEnd();
                                                            if (Convert.ToInt32(row["LITZDOLG"]) == 2)
                                                            {
                                                                txtCurrRowRespText += " (" + Convert.ToInt32(row["GODR"]).ToString() + " г.р.)";
                                                            }
                                                            txtCurrRowRespText += " " + Convert.ToString(row["ADRES"]).TrimEnd() + " ";

                                                            //string priz = Convert.ToString(row["PRIZ"]).TrimEnd();
                                                            //if (priz.Length > 0) txtCurrRowRespText += Convert.ToString(row["PRIZ"]).TrimEnd();

                                                            // если это новая строчка - то вставить базовый ответ, в конце по newID сделать UPDATE
                                                            decimal nExtKey = 0;
                                                            if (!bMoreTanOne)
                                                            {
                                                                // newID = InsertResponseIntTable(con, nID, "Есть сведения", dtDatOtv, nStatus, lLogger2.logID, ref iRewriteState, nNewPackID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtAnswerType);
                                                                //20180208
                                                                //newID = InsertResponseIntTable(con, nID, "Есть сведения", dtDatOtv, nStatus, lLogger2.logID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtAnswerType, lLogger2);
                                                                nExtKey = InsertResponseIntTableNewExtKey(con, nID, "Есть сведения", dtDatOtv, nStatus, lLogger2.logID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtAnswerType, lLogger2);

                                                            }

                                                            if ((row.Table.Columns.Contains("NOMLS")) && (row.Table.Columns.Contains("OSTAT")) && (Convert.ToString(row["NOMLS"]).TrimEnd() != ""))
                                                            {
                                                                string txtLs = Convert.ToString(row["NOMLS"]).TrimEnd();
                                                                decimal nSumOstat = 0;
                                                                nSumOstat = Convert.ToDecimal(row["OSTAT"]);
                                                                if (nSumOstat > 0) bSumNotZero = true;
                                                                txtCurrRowRespText += "л/с: " + txtLs + " остаток = " + nSumOstat.ToString("F2").Replace(',', '.') + " " + ff.getValuteByCod(txtLs);
                                                                // вставить доп сведения об этом номере счета и остатке
                                                                // InsertIntTableAccSum(con, newID, nSumOstat, txtLs, txtBik, dtDatOtv, txtEntityName);
                                                                //InsertIntTableAccSum(con, newID, nSumOstat, txtLs, txtBik, dtDatOtv, txtEntityName, lLogger2);
                                                                // 20180208 - правильно вставлять, получая внешний ключ
                                                                if (nExtKey > 0)
                                                                {
                                                                    InsertIntTableAccSum(con, nExtKey, nSumOstat, txtLs, txtBik, dtDatOtv, txtEntityName, lLogger);
                                                                }
                                                                
                                                            }

                                                            if ((row.Table.Columns.Contains("RSCHET")) && (row.Table.Columns.Contains("OSTSCH")) && (Convert.ToString(row["RSCHET"]).TrimEnd() != ""))
                                                            {
                                                                string txtRs = Convert.ToString(row["RSCHET"]).TrimEnd();
                                                                decimal nRsSumOstat = 0;
                                                                nRsSumOstat = Convert.ToDecimal(row["OSTSCH"]);
                                                                if (nRsSumOstat > 0) bSumNotZero = true;
                                                                txtCurrRowRespText += "р/с: " + txtRs + " остаток = " + nRsSumOstat.ToString("F2").Replace(',', '.') + " " + ff.getValuteByCod(txtRs);
                                                                // вставить доп сведения об этом номере счета и остатке
                                                                // InsertIntTableAccSum(con, newID, nRsSumOstat, txtRs, txtBik, dtDatOtv, txtEntityName);
                                                                // InsertIntTableAccSum(con, newID, nRsSumOstat, txtRs, txtBik, dtDatOtv, txtEntityName, lLogger2);
                                                                if (nExtKey > 0)
                                                                {
                                                                    InsertIntTableAccSum(con, nExtKey, nRsSumOstat, txtRs, txtBik, dtDatOtv, txtEntityName, lLogger2);
                                                                }
                                                            }

                                                            // Если это не последняя строчка и след. строка содержит продолжение ответа, то 
                                                            if (i < tbl.Rows.Count - 1)
                                                            {
                                                                if (Convert.ToString(tbl.Rows[i + 1]["ZAPROS"]).TrimEnd() == Convert.ToString(row["ZAPROS"]).TrimEnd())
                                                                {
                                                                    bMoreTanOne = true;
                                                                    txtCommonRespText += txtCurrRowRespText + ", ";
                                                                }
                                                                else
                                                                {
                                                                    // пора делать UPDATE
                                                                    bMoreTanOne = false;

                                                                    txtCommonRespText += txtCurrRowRespText;

                                                                    // если в ответе сумма больше 0, то указать что в ответе есть сведения
                                                                    if (bSumNotZero)
                                                                    {
                                                                        txtCommonRespText = txtPrePreamb + txtPreamb + " " + txtCommonRespText;
                                                                    }
                                                                    else
                                                                    {
                                                                        txtCommonRespText = txtPreamb + " " + txtCommonRespText;
                                                                    }

                                                                    // вставить в базу - теперь меняем на сделать UPDATE
                                                                    //if (InsertResponseIntTable(con, nID, txtCommonRespText, dtDatOtv, nStatus, org, ref iRewriteState, nNewPackID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName) > 0)
                                                                    //if (UpdateZaprosIntTable(con, newID, txtCommonRespText, dtDatOtv, lLogger2))
                                                                    if (UpdateZaprosIntTableExtKey(con, nExtKey, txtCommonRespText, dtDatOtv, lLogger2))
                                                                    {
                                                                        iCnt++;
                                                                        //WritePackLog(con, nNewPackID, "Обработан ответ # " + nID.ToString() + "\n");
                                                                        lLogger2.MemoryLLog("Обработан ответ на запрос # " + nID.ToString() + "\n");
                                                                        //WriteLLog(conGIBDD, nNewPackID, "Обработан ответ на запрос # " + nID.ToString() + "\n");
                                                                    }
                                                                    else
                                                                    {
                                                                        iECnt++; // ошибка загрузки сведений о счетах
                                                                        lLogger2.MemoryLLog("Ошибка! Ответ на запрос # " + nID.ToString() + " загружен некорректно (не удалось актуализировать текст).\n");
                                                                        lLogger2.ErrMessage += "\n" + iCnt.ToString() + "\tОшибка! Ответ на запрос # " + nID.ToString() + " загружен некорректно (не удалось актуализировать текст)";
                                                                    }
                                                                    // приводим строчку в исходное состояние
                                                                    txtCommonRespText = "";
                                                                }

                                                            }
                                                            else
                                                            {
                                                                // значит это последняя строчка.
                                                                bMoreTanOne = false;

                                                                txtCommonRespText += txtCurrRowRespText;

                                                                if (bSumNotZero)
                                                                {
                                                                    txtCommonRespText = txtPrePreamb + txtPreamb + " " + txtCommonRespText;
                                                                }
                                                                else
                                                                {
                                                                    txtCommonRespText = txtPreamb + " " + txtCommonRespText;
                                                                }

                                                                // вставить в базу - заменяем на UPDATE

                                                                //if (InsertResponseIntTable(con, nID, txtCommonRespText, dtDatOtv, nStatus, org, ref iRewriteState, nNewPackID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName))
                                                                //if (UpdateZaprosIntTable(con, newID, txtCommonRespText, dtDatOtv, lLogger2))
                                                                if (UpdateZaprosIntTableExtKey(con, nExtKey, txtCommonRespText, dtDatOtv, lLogger2))
                                                                {
                                                                    iCnt++;
                                                                    // WritePackLog(con, nNewPackID, "Обработан ответ # " + nID.ToString() + "\n");
                                                                    // WriteLLog(conGIBDD, nNewPackID, "Обработан ответ на запрос # " + nID.ToString() + "\n");
                                                                    lLogger2.MemoryLLog("Обработан ответ на запрос # " + nID.ToString() + "\n");
                                                                }
                                                                else
                                                                {
                                                                    // WritePackLog(con, nNewPackID, "Ошибка! Ответ # " + nID.ToString() + " обработать не удалось.\n");
                                                                    // WriteLLog(conGIBDD, nNewPackID, "Ошибка! Ответ на запрос # " + nID.ToString() + " загружен некорректно (не удалось актуализировать текст).\n");
                                                                    iECnt++; // ошибка загрузки сведений о счетах
                                                                    lLogger2.MemoryLLog("Ошибка! Ответ на запрос # " + nID.ToString() + " загружен некорректно (не удалось актуализировать текст).\n");
                                                                    lLogger2.ErrMessage += "\n" + iCnt.ToString() + "\tОшибка! Ответ на запрос # " + nID.ToString() + " загружен некорректно (не удалось актуализировать текст)";

                                                                }

                                                                // приводим строчку в исходное состояние
                                                                txtCommonRespText = "";
                                                            }

                                                            // теперь надо помыслить чего -делать-то еще надо :D - надо же какой тупой комментарий

                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            // MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
                                                            lLogger2.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();

                                                            if (lLogger2 != null)
                                                            {
                                                                lLogger2.WriteLLog("Ошибка! Загрузка пакета ответов экстренно прервалась.\n");
                                                                lLogger2.WriteLLog("Значение счетчика = " + iCnt.ToString() + "\n");
                                                                lLogger2.WriteLLog("Exception: " + ex.ToString() + "\n");

                                                                if (nID > 0)
                                                                {
                                                                    lLogger2.WriteLLog("ID запроса = " + nID.ToString() + "\n");
                                                                }
                                                            }

                                                        }
                                                    }
                                                    else
                                                    {
                                                        // ответ не удалось загрузить, надо бы это как-то в реестре отметить
                                                        if (lLogger2 != null)
                                                        {
                                                            lLogger2.WriteLLog("Ошибка! Ответ на запрос ID = " + nID.ToString() + " не удалось загрузить т.к. не обнаружен запрос-родитель.\n");
                                                        }
                                                    }

                                                }

                                                lLogger2.WriteLLog("+++++++++++++++++++++++++++++++++++++++\n");
                                                lLogger2.WriteLLog(DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + " завершение обработки ответа.\n");
                                                lLogger2.WriteLLog("Обработано ответов: " + iCnt.ToString() + "\n");

                                                // установить количество обработанных запросов
                                                lLogger2.UpdateLLogCount(iCnt);

                                                // обновить статус лога-ответа
                                                lLogger2.UpdateLLogStatus(2);
                                                // и лога-запроса
                                                lLogger2.UpdateLLogParentStatus(10);// 10 - загружен ответ

                                                // обновить флаг что обработан FIND
                                                lLogger2.UpdateLLogFlag(1, "FL_FIND");

                                                // вставить имя обработанного файла
                                                lLogger2.UpdateLLogFileName(txtPath);

                                                // теперь фиксируем что файл загружен и отправляем сообщение

                                                // добавить в список alLoadedReestrs
                                                alLoadedReestrs.Add(txtPath);
                                                // string txtMessage = DateTime.Now.ToString() + " Загружено " + iCnt + "\tстрок из реестра квитанций номер: " + tablename + '.' + txtExt;
                                                string txtMessage = DateTime.Now.ToString() + " Загружено " + iCnt.ToString() + "; Ошибок загрузки " + iECnt.ToString() + "\tв ответах из файла: " + tablename + '.' + txtExt;
                                                txtMessage += "\n Реестр загружен из файла по пути: " + txtPath;

                                                // записать в лог автозагрузки сколько строк загружено (txtMessage)
                                                lLogger.WriteLLog("\n" + txtMessage);

                                                ff.WriteTofile(txtMessage, txtLogFileName);
                                                // в ОСП отправляем тоже
                                                ff.SendEmail(txtMessage, "Загрузка ответов из " + txtEntityName + ". в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtOspEmail, txtAdminEmail, txtMailServ, "");
                                                ff.SendEmail(txtMessage, "Загрузка ответов из " + txtEntityName + ". в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");


                                                if (lLogger2.ErrMessage.Length > 0)
                                                {
                                                    ff.SendEmail(lLogger2.ErrMessage, "Внимание! Ошибка загрузки квитанций от Сбербанка из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                                }


                                            }
                                        }   
                                        else
                                        {
                                            // что тут происходит?
                                            // ответ - создать лог положительных ответов и записать туда что 0 в пакете ответов

                                            if (nAgreementID == 0)
                                            {
                                                nAgreementID = GetAgr_by_Org(con, org, lLogger); // номер соглашения
                                                nAgent_id = GetAgent_ID(con, nAgreementID, lLogger);
                                                nAgent_dept_id = GetAgentDept_ID(con, nAgreementID, lLogger);
                                            }

                                            txtAgreementCode = GetAgreement_Code(con, Convert.ToInt32(nAgreementID), lLogger);
                                            txtAgentCode = GetAgent_Code(con, Convert.ToInt32(nAgreementID), lLogger);
                                            txtAgentDeptCode = GetAgentDept_Code(con, Convert.ToInt32(nAgreementID), lLogger);

                                            // поскольку нет строк в ответе, то и нет никакого способа узнать дату и найти по ней parent_id
                                            // но, т.к. эту дату нужно обязательно! - то попробую проверить папку, в которой лежит файл
                                            // если имя папки - это дата, то будем ориентироваться на нее
                                            // пример имени папки 2016.12.26
                                            // полный путь при этом \\fs-petr1.petr1.karelia.ssp\Inf_obmen\ответ\Связь_банк\auto\2016.12.26\FIND.dbf

                                            //txtExt = txtPath.Substring(txtPath.LastIndexOf(".") + 1).ToLower();
                                            //tablename = ff.GetTablename(txtPath, 4).Trim();
                                            txtFileDir = ff.GetFileDir(txtPath, 4);
                                            string txtDateFolder = "";
                                            if (txtFileDir.Length > 2)
                                            {
                                                // если на конце есть '\' - тримать их
                                                txtDateFolder = txtFileDir.TrimEnd('\\');
                                                txtDateFolder = txtDateFolder.Substring(txtDateFolder.LastIndexOf("\\") + 1);
                                            }
                                            DateTime dtDatZapr = DateTime.MinValue;
                                            if (txtDateFolder.Length.Equals(10))
                                            {
                                                dtDatZapr = ff.GetDateFromReverseString(txtDateFolder.Replace(".", string.Empty));
                                            }

                                            decimal nParentID = -1;
                                            if (dtDatZapr != DateTime.MinValue)
                                            {
                                                nParentID = GetParentCredOrgLog(ConG, txtAgentCode, dtDatZapr.ToShortDateString(), dtDatZapr.AddDays(1).ToShortDateString(), lLogger);
                                            }

                                            // если не было выбрано пропустить загрузку ответа
                                            if (nParentID != -1)
                                            {
                                                // 1 - Новый
                                                // 3 - Ответ положительный
                                                // nNewPackID = CreateLLog(conGIBDD, 1, 3, txtAgreementCode, nParentID, "Пакет ответов из " + txtEntityName + ".");
                                                lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 1, 3, txtAgreementCode, nParentID, lLogger.OspNum, "Пакет ответов из " + txtEntityName + ".");
                                                lLogger2.WriteLLog(DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + " начало обработки ответа.\n");
                                                lLogger2.WriteLLog("Обрабатывается файл: " + txtPath + "\n");
                                                lLogger2.WriteLLog("+++++++++++++++++++++++++++++++++++++++\n");
                                                lLogger2.WriteLLog(DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + " завершение обработки ответа.\n");
                                                lLogger2.WriteLLog("Обработано записей: " + iCnt.ToString() + "\n");

                                                // установить количество обработанных запросов
                                                lLogger2.UpdateLLogCount(iCnt);

                                                // обновить статус лога-ответа
                                                lLogger2.UpdateLLogStatus(2);
                                                // обновить статус лога-родителя
                                                lLogger2.UpdateLLogParentStatus(10);
                                                // флаг типа ответа
                                                lLogger2.UpdateLLogFlag(1, "FL_FIND");
                                                // вставить имя обработанного файла
                                                lLogger2.UpdateLLogFileName(txtPath);

                                            }
                                            // добавить в список alLoadedReestrs
                                            alLoadedReestrs.Add(txtPath);

                                            // string txtMessage = DateTime.Now.ToString() + " Загружено " + iCnt + "\tстрок из реестра квитанций номер: " + tablename + '.' + txtExt;
                                            string txtMessage = DateTime.Now.ToString() + " Загружено " + iCnt.ToString() + "; Ошибок загрузки " + iECnt.ToString() + "\tв ответах из файла: " + tablename + '.' + txtExt;
                                            txtMessage += "\n Реестр загружен из файла по пути: " + txtPath;

                                            // записать в лог автозагрузки сколько строк загружено (txtMessage)
                                            lLogger.WriteLLog("\n" + txtMessage);

                                            ff.WriteTofile(txtMessage, txtLogFileName);
                                            // в ОСП отправляем тоже
                                            ff.SendEmail(txtMessage, "Загрузка ответов из " + txtEntityName + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtOspEmail, txtAdminEmail, txtMailServ, "");
                                            ff.SendEmail(txtMessage, "Загрузка ответов из " + txtEntityName + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");


                                            if (lLogger2.ErrMessage.Length > 0)
                                            {
                                                ff.SendEmail(lLogger2.ErrMessage, "Внимание! Ошибка загрузки квитанций от Сбербанка из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                            }


                                        } // обработали оба случая - когда файл пустой (else) и когда строки есть внутри
                                        # endregion

                                        // все что ниже, скорее всего нужно выпилить, т.к. выше все обработано

                                        // tran.Commit();
                                        // con.Close();
                                        // MessageBox.Show("Обработано ответов: " + iCnt.ToString() + ".\nСейчас будет сформирован реестр ответов.", "Сообщение", MessageBoxButtons.OK);

                                    } // end if (tbl != null && tbl.Rows.Count > 0)
                                }
                                catch (OleDbException ole_ex)
                                {
                                    foreach (OleDbError err in ole_ex.Errors)
                                    {
                                        // MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                                        lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                                    }
                                    if (lLogger2 != null)
                                    {
                                        // WriteLLog(conGIBDD, nNewPackID, "Ошибка! Ответы не удалось загрузить без ошибок.\n");
                                        lLogger2.WriteLLog("Ошибка! Ответы не удалось загрузить без ошибок.\n");

                                        // обновить статус лога-ответа
                                        //UpdateLLogStatus(conGIBDD, nNewPackID, 11); // ответ загружен с ошибкой
                                        lLogger2.UpdateLLogStatus(11);
                                    }
                                    //return false;
                                }
                                catch (Exception ex)
                                {
                                    //if (DBFcon != null) DBFcon.Close();
                                    lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                                    if (lLogger2 != null)
                                    {
                                        lLogger2.WriteLLog("Ошибка! Ответы не удалось загрузить без ошибок.\n");
                                        // обновить статус лога-ответа
                                        lLogger2.UpdateLLogStatus(11);
                                    }
                                    //return false;
                                }
                                //return true;
                            }
                            # endregion

                            # region "NOFIND"
                            if (tablename.ToUpper().StartsWith("NOFIND"))
                            {
                                try
                                {
                                    DataTable tbl = null;
                                    string txtSql = "SELECT * FROM NOFIND ORDER BY ZAPROS";// упорядочили по полю ZAPROS чтобы работать с несколькими ответами на 1 запрос
                                    tbl = ReadDbfFile(txtPath, txtExt.Length+1, txtSql, lLogger);
                                    Decimal nID = 0;
                                    String txtID = "";
                                    Decimal newID = 0;
                                    decimal nStatus = 19; // ответ получен
                                    nPackType = 4; // ответ отрицательный

                                    if (tbl != null && tbl.Rows.Count > 0)
                                    {
                                        decimal nAgreementID = 0;
                                        decimal nAgent_dept_id = 0;
                                        decimal nAgent_id = 0;
                                        decimal nDx_pack_id = 0;
                                        decimal nNewPackID = 0;

                                        txtAgreementCode = "";
                                        string txtAgentCode = "";
                                        string txtAgentDeptCode = "";

                                        string txtAnswerType = "2";

                                        // FindSendlist(con, nFirstID, org, lLogger) - не работает
                                        //if (FindSendlist(con, nFirstID, org, lLogger)) // указываем параметр org - контрагент из списка рассылки, которому была направлена копия
                                        //{
                                        //    // значит это новый запрос
                                        //    // получить параметры: соглашение, контрагент, подразделение
                                        //    DataTable dtParams = GetPackParams(con, nFirstID, org, lLogger);
                                        //    if ((dtParams != null) && (dtParams.Rows.Count > 0))
                                        //    {
                                        //        nAgreementID = Convert.ToDecimal(dtParams.Rows[0]["agreement_id"]);
                                        //        nAgent_dept_id = Convert.ToDecimal(dtParams.Rows[0]["agent_dept_id"]);
                                        //        nAgent_id = Convert.ToDecimal(dtParams.Rows[0]["agent_id"]);
                                        //        nDx_pack_id = Convert.ToDecimal(dtParams.Rows[0]["dx_pack_id"]);
                                        //    }
                                        //}

                                        // нужно создать новый входящий пакет
                                        if (nAgreementID == 0)
                                        {
                                            nAgreementID = GetAgr_by_Org(con, org, lLogger); // номер соглашения
                                            nAgent_id = GetAgent_ID(con, nAgreementID, lLogger);
                                            nAgent_dept_id = GetAgentDept_ID(con, nAgreementID, lLogger);
                                        }

                                        txtAgreementCode = GetAgreement_Code(con, Convert.ToInt32(nAgreementID), lLogger);
                                        txtAgentCode = GetAgent_Code(con, Convert.ToInt32(nAgreementID), lLogger);
                                        txtAgentDeptCode = GetAgentDept_Code(con, Convert.ToInt32(nAgreementID), lLogger);

                                        // 1 - Новый
                                        // 4 - Ответ отрицательный
                                        // nPackType = 4;
                                        lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 1, nPackType, txtAgreementCode, 0, lLogger.OspNum, "Пакет ответов из " + txtEntityName + ".");
                                        

                                        // найти parent_id по dtDatZapr2
                                        decimal nParentID = -1;
                                        nParentID = GetParentCredOrgLog(ConG, txtAgentCode, dtDatZapr2.ToShortDateString(), dtDatZapr2.AddDays(1).ToShortDateString(), lLogger);
                                        if (nParentID > 0) lLogger2.UpdateLLogParent(nParentID);

                                        // записать в лог пакета дату и начало обработки
                                        // а в какой лог? в лог автозагрузки или в лог пакета с квитанциями?
                                        lLogger.WriteLLog(DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + " начало обработки пакета.\n");
                                        lLogger.WriteLLog("Обрабатывается файл: " + txtPath + "\n");

                                        string txtOtvet;
                                        txtOtvet = "в соответствии с " + GetLegal_Conv(org, con, lLogger);
                                        txtOtvet += " получен ответ: ";
                                        txtOtvet += "Ответ из " + GetLegal_Name(org, con, lLogger);

                                        if (nParentID != -1)
                                        {
                                            lLogger2.WriteLLog(DateTime.Now.ToString() + " начало обработки пакета.\n");
                                            lLogger2.WriteLLog("Обрабатывается файл: " + txtPath + "\n");

                                            // пробегаем все ответы, отсортированные по полю ZAPROS
                                            Int32 i = 0;
                                            foreach (DataRow row in tbl.Rows)
                                            {
                                                nStatus = 19; // ответ получен
                                                txtID = Convert.ToString(row["ZAPROS"]);
                                                if (!Decimal.TryParse(txtID, out nID))
                                                {
                                                    nID = 0;
                                                }
                                                if ((tbl.Rows.IndexOf(row) > 0) || FindZapros(con, nID, lLogger)) // если есть такой запрос в базе для первой строчки
                                                {
                                                    // значить начинаем вставлять в базу структуры данных ответа
                                                    try
                                                    {
                                                        string txtDatOtv = "";
                                                        DateTime dtDatOtv;

                                                        txtDatOtv = Convert.ToString(row["DATOTV"]);
                                                        if (!DateTime.TryParse(txtDatOtv, out dtDatOtv))
                                                        {
                                                            dtDatOtv = DateTime.MaxValue;
                                                        }

                                                        string txtDatZap = "";
                                                        DateTime dtDatZap;

                                                        // проверить дату запроса
                                                        txtDatZap = Convert.ToString(row["DATZPR2"]);
                                                        if (!DateTime.TryParse(txtDatZap, out dtDatZap))
                                                        {
                                                            dtDatZap = DateTime.MaxValue;
                                                        }



                                                        // вот сюда и воткнуть ФИО и год рождения, адрес
                                                        string txtResLine = Convert.ToString(row["FIO"]).TrimEnd();
                                                        if (row["GODR"] != System.DBNull.Value)
                                                        {
                                                            txtResLine += " (" + Convert.ToInt32(row["GODR"]).ToString() + " г.р.)";
                                                        }
                                                        txtResLine += " " + Convert.ToString(row["ADRES"]).TrimEnd();

                                                        string txtOtvetLocal = txtOtvet;
                                                        txtOtvetLocal += ". Нет данных о должнике " + txtResLine + ". Дата ответа: " + dtDatOtv.ToShortDateString();

                                                        // iRewriteState
                                                        // 1 - обычный режим - запрашивать реакцию у пользователя 
                                                        // 2 - дописать все
                                                        // 3 - перезаписать все4 - пропустить все, которые найдены
                                                        // if (InsertResponseIntTable(con, nID, txtOtvet, dtDatOtv, nStatus, org, ref iRewriteState, nNewPackID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtAnswerType) > 0)
                                                        if (InsertResponseIntTable(con, nID, txtOtvetLocal, dtDatOtv, nStatus, lLogger2.logID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtAnswerType, lLogger2) > 0)
                                                        {
                                                            iCnt++;

                                                            lLogger2.MemoryLLog("Обработан ответ на запрос # " + nID.ToString() + "\n");

                                                        }
                                                        else
                                                        {
                                                            // ответ не удалось загрузить, надо бы это как-то в реестре отметить
                                                            //WritePackLog(con, nNewPackID, "Ошибка! Ответ # " + nID.ToString() + " обработать не удалось.\n");
                                                            // WriteLLog(conGIBDD, nNewPackID, "Ошибка! Ответ на запрос # " + nID.ToString() + " обработать не удалось.\n");
                                                            iECnt++; // ошибка загрузки сведений о счетах
                                                            lLogger2.MemoryLLog("Ошибка! Ответ на запрос # " + nID.ToString() + " обработать не удалось.\n");
                                                            lLogger2.ErrMessage += "\n" + iCnt.ToString() + "\tОшибка! Ответ на запрос # " + nID.ToString() + " обработать не удалось.\n";
                                                            nStatus = 15; // ошибка
                                                        }
                                                    }
                                                    catch (Exception ex)
                                                    {
                                                        lLogger2.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                                                        if (lLogger2 != null)
                                                        {
                                                            lLogger2.WriteLLog("Ошибка! Загрузка пакета ответов экстренно прервалась.\n");
                                                            lLogger2.WriteLLog("Значение счетчика = " + iCnt.ToString() + "\n");
                                                            lLogger2.WriteLLog("Exception: " + ex.ToString() + "\n");

                                                            if (nID > 0)
                                                            {
                                                                lLogger2.WriteLLog("ID запроса = " + nID.ToString() + "\n");
                                                            }
                                                        }
                                                    }
                                                } // end if ((tbl.Rows.IndexOf(row) > 0) || FindZapros(con, nID, lLogger)) // если есть такой запрос в базе для первой строчки
                                            } // end foreach 

                                            lLogger2.WriteLLog("\n+++++++++++++++++++++++++++++++++++++++\n");
                                            lLogger2.WriteLLog(DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + " завершение обработки ответа.\n");
                                            lLogger2.WriteLLog("Обработано ответов: " + iCnt.ToString() + "\n");
                                            //lLogger2.WriteLLog("\nВсего загружено строк:" + iCnt.ToString());

                                            lLogger2.UpdateLLogCount(iCnt);
                                            

                                            // обновить статус лога-ответа
                                            lLogger2.UpdateLLogStatus(2);
                                            // обновить статус лога-родителя
                                            lLogger2.UpdateLLogParentStatus(10);
                                            // флаг типа ответа
                                            lLogger2.UpdateLLogFlag(1, "FL_NOFIND");
                                            // вставить имя обработанного файла
                                            lLogger2.UpdateLLogFileName(txtPath);
                                            // добавить в список alLoadedReestrs
                                            alLoadedReestrs.Add(txtPath);
                                            
                                            string txtMessage = DateTime.Now.ToString() + " Загружено строк: " + iCnt.ToString() + "; Ошибок загрузки " + iECnt.ToString() + "\tв ответах из файла: " + tablename + '.' + txtExt;
                                            ff.SendEmail(txtMessage, "Загрузка ответов из " + txtEntityName + ". в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtOspEmail, txtAdminEmail, txtMailServ, "");
                                            ff.SendEmail(txtMessage, "Загрузка ответов из " + txtEntityName + ". в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");

                                        } // end if (nParentID != -1)
                                    } // end if (tbl != null && tbl.Rows.Count > 0)
                                    else
                                    {
                                        // ответ пустой - делаем лог с именем файла - пишем что в ответе 0 строк
                                        nPackType = 4;
                                        lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 1, nPackType, txtAgreementCode, 2, lLogger.OspNum, "Пакет ответов из " + txtEntityName + ".\nВ ответе 0 строк для загрузки.");
                                        
                                        decimal nAgreementID = GetAgr_by_Org(con, org, lLogger); // номер соглашения
                                        string txtAgentCode = GetAgent_Code(con, Convert.ToInt32(nAgreementID), lLogger);

                                        txtFileDir = ff.GetFileDir(txtPath, 4);
                                        string txtDateFolder = "";

                                        if (txtFileDir.Length > 2)
                                        {
                                            // если на конце есть '\' - тримать их
                                            txtDateFolder = txtFileDir.TrimEnd('\\');
                                            txtDateFolder = txtDateFolder.Substring(txtDateFolder.LastIndexOf("\\") + 1);
                                        }
                                        DateTime dtDatZapr = DateTime.MinValue;
                                        if (txtDateFolder.Length.Equals(10))
                                        {
                                            dtDatZapr = ff.GetDateFromReverseString(txtDateFolder.Replace(".", string.Empty));
                                        }

                                        decimal nParentID = -1;
                                        if (dtDatZapr != DateTime.MinValue)
                                        {
                                            nParentID = GetParentCredOrgLog(ConG, txtAgentCode, dtDatZapr.ToShortDateString(), dtDatZapr.AddDays(1).ToShortDateString(), lLogger);
                                        }


                                        if (nParentID > 0) lLogger2.UpdateLLogParent(nParentID);

                                        lLogger2.UpdateLLogFileName(txtPath);
                                        alLoadedReestrs.Add(txtPath);

                                        // установить количество обработанных запросов
                                        lLogger2.UpdateLLogCount(0);
                                        // обновить статус лога-ответа
                                        lLogger2.UpdateLLogStatus(2);
                                        // обновить статус лога-родителя
                                        lLogger2.UpdateLLogParentStatus(10);
                                        // флаг типа ответа
                                        lLogger2.UpdateLLogFlag(1, "FL_NOFIND");

                                        string txtMessage = DateTime.Now.ToString() + " Загружено 0 строк; Ошибок загрузки " + iECnt.ToString() + "\tв ответах из файла: " + tablename + '.' + txtExt;
                                        ff.SendEmail(txtMessage, "Загрузка ответов из " + txtEntityName + ". в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtOspEmail, txtAdminEmail, txtMailServ, "");
                                        ff.SendEmail(txtMessage, "Загрузка ответов из " + txtEntityName + ". в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                    }

                                }// end try
                                catch (OleDbException ole_ex)
                                {
                                    foreach (OleDbError err in ole_ex.Errors)
                                    {
                                        // MessageBox.Show("Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                                        lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                                    }
                                    if (lLogger2 != null)
                                    {
                                        // WriteLLog(conGIBDD, nNewPackID, "Ошибка! Ответы не удалось загрузить без ошибок.\n");
                                        lLogger2.WriteLLog("Ошибка! Ответы не удалось загрузить без ошибок.\n");

                                        // обновить статус лога-ответа
                                        //UpdateLLogStatus(conGIBDD, nNewPackID, 11); // ответ загружен с ошибкой
                                        lLogger2.UpdateLLogStatus(11);
                                    }
                                    //return false;
                                }
                                catch (Exception ex)
                                {
                                    //if (DBFcon != null) DBFcon.Close();
                                    lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
                                    if (lLogger2 != null)
                                    {
                                        lLogger2.WriteLLog("Ошибка! Ответы не удалось загрузить без ошибок.\n");
                                        // обновить статус лога-ответа
                                        lLogger2.UpdateLLogStatus(11);
                                    }
                                    //return false;
                                }
                                //return true;
                            } // end if FIND
                            # endregion
                        }
                    }
                }
                con.Dispose();
                ConG.Dispose();
            }
            catch (Exception ex)
            {
                iECnt++;

                lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка приложения (AutoLoadMvdOtvet). Message: " + ex.ToString();

                ff.WriteTofile(DateTime.Now.ToString() + " Ошибка приложения (AutoLoadMvdOtvet). Message: " + ex.ToString(), txtLogFileName);
                string txtMessage = "Возникла ошибка при попытке загрузить ответы ИЦ МВД по пути " + txtCurrPath;
                txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка приложения (AutoLoadMvdOtvet). Message: " + ex.ToString();
                ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки ответов из ИЦ МВД в ОСП  " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                return iLogCnt;
            }

            return iLogCnt;



        }


        public decimal GetParentCredOrgLog(OleDbConnection Gcon, string txtConv, string txtDateStart, string txtDateEnd, Logger_ufssprk_tools lLogger)
        {
            decimal res = 0;
            try
            {
                if (Gcon != null && Gcon.State != ConnectionState.Closed) Gcon.Close();
                Gcon.Open();
                OleDbTransaction tran = Gcon.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select first 1 ll.id from local_logs ll where ll.conv_code = '" + txtConv + "' and ll.packdate >= '" + txtDateStart + "' and ll.packdate < '" + txtDateEnd + "' and ll.pack_type = 1 and ll.pack_status > 1", Gcon, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                Gcon.Close();
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return res;
        }

        public string GetBik(string txtAgentCode)
        {
            string res = "";
            switch (txtAgentCode)
            {
                case "Б_БАЛТ": res =    "048602752"; break;
                case "Б_СБЕР": res =    "048602673"; break;
                case "Б_БАРЕНЦ": res =  "048602802"; break;
                case "Б_ВОЗР": res =    "048602721"; break;
                case "Б_ВТБ": res =     "048602811"; break;
                case "Б_РОССХЗ": res =  "048602818"; break;
                case "Б_СВЯЗЬ": res =   "048602734"; break;
                case "Б_УРАЛСИБ": res = "048602819"; break;
            }

            return res;
        }

        public DataTable GetPackParams(OleDbConnection con, Decimal nZaprosID, Decimal nContrID, Logger_ufssprk_tools lLogger)
        {
            OleDbTransaction tran = null;
            DataSet dsIP_params;
            DataTable dtIP_params;

            dsIP_params = new DataSet();
            dtIP_params = dsIP_params.Tables.Add("IP_params");

            try
            {

                if((con == null) || (con.State == ConnectionState.Closed))
                    con.Open();

                tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmdIP = new OleDbCommand();
                cmdIP.Connection = con;
                cmdIP.Transaction = tran;
                // переписать select по-новому
                //cmdIP.CommandText = "select s.dx_pack_id, s.agent_id, s.agreement_id, s.agent_dept_id from sendlist s where sendlist_o_id = :ZAPROS_ID and SENDLIST_CONTR = :CONTR_ID";
                cmdIP.CommandText = "select d_p.id as dx_pack_id, d_p.agent_id, d_p.agent_dept_id, d_p.agreement_id, d_p.agent_code, d_p.agent_dept_code, d_p.agreement_code from SENDLIST_DBT_REQUEST_TYPE s_d_r_t join dx_pack d_p on s_d_r_t.outer_agreement_id = d_p.agreement_id join ext_request e_r on e_r.pack_id = d_p.id  where e_r.req_id = :ZAPROS_ID and s_d_r_t.SNDL_CONTR_ID = :CONTR_ID";
                cmdIP.Parameters.Add(new OleDbParameter(":ZAPROS_ID", Convert.ToDecimal(nZaprosID)));
                cmdIP.Parameters.Add(new OleDbParameter(":CONTR_ID", Convert.ToDecimal(nContrID)));
                using (OleDbDataReader rdr = cmdIP.ExecuteReader(CommandBehavior.Default))
                {
                    dsIP_params.Load(rdr, LoadOption.OverwriteChanges, dtIP_params);
                    rdr.Close();
                }

                tran.Rollback();
                con.Close();

                return dsIP_params.Tables[0];
                
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            con.Close();
            return null;
        }

        public bool FindSendlist(OleDbConnection con, decimal nID, decimal nSendlistContr, Logger_ufssprk_tools lLogger)
        {
            Decimal res = 0;
            try
            {
                if (con != null && con.State != ConnectionState.Closed) con.Close();

                con.Open();
                OleDbTransaction tran = con.BeginTransaction(IsolationLevel.ReadCommitted);
                OleDbCommand cmd = new OleDbCommand("select sendlist_o_id from sendlist where sendlist_o_id = " + nID.ToString() + " and SENDLIST_CONTR = " + nSendlistContr.ToString(), con, tran);
                res = Convert.ToDecimal(cmd.ExecuteScalar());
                tran.Rollback();
                con.Close();
                if ((res == nID) && (nID != 0))
                {
                    return true;
                }
                else return false;
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                }
            }
            catch (Exception ex)
            {
                lLogger.ErrMessage += "Ошибка приложения. Message: " + ex.ToString();
            }
            return false;
        }

        public int AutoLoadPotdOtvet(string constrGIBDD, string constrPKOSP, string txtUploadDir, string txtLogFileName, int iDiv, string txtOspEmail, string txtAdminEmail, string txtAgreementCode, int nPackType, Logger_ufssprk_tools lLogger)
        {
            // в Local_Logs есть поле Filename, среди логов с типом 2 будем искать свой, с нужным именем

            OleDbConnection ConG, con;
            Int32 iCnt = 0;
            Int32 iECnt = 0;
            Int32 iLogCnt = 0;
            Int32 iPercent = 0;
            Int32 iFoundCnt = 0;
            Int32 iSourceID = 0;
            ArrayList alFiles;
            ArrayList alLoadedReestrs;
            string txtCurrPath = "";
            // int nMonthPeriod = -12; // чистим раз в год
            int nMonthPeriod = -1000; // имена уникальные - не нужно ничего чистить
            decimal potd_id = 86200999999003; // id в справочнике

            string txtMailServ = "mail10";

            // txtAgreementCode = "ИЦ_МВД_10";
            // nPackType = 2; - ответ обыкновенный

            ArrayList Strings;
            DataTable dtData;

            File_funcs ff = new File_funcs();
            try
            {
                string txtErrLog = "";
                ConG = new OleDbConnection(constrGIBDD);
                con = new OleDbConnection(constrPKOSP);


                // 1. Получить список ответов

                alFiles = ff.GetReestrs(txtUploadDir, 1, 10, lLogger);

                // 2.1 Получить список уже загруженных файлов с квитанциями
                alLoadedReestrs = GetLoadedFiles(ConG, nMonthPeriod, txtAgreementCode, nPackType, lLogger);

                // 2.2 Загрузить файлы из alFiles
                foreach (string txtPath in alFiles)
                {
                    txtCurrPath = txtPath;
                    // вычленить имя файла
                    if (txtPath.Length > 0)
                    {
                        string tablename = "";
                        string txtExt = "";
                        string txtFileDir = "";
                        string txtOspCode = "";
                        string txtRightOspCode = iDiv.ToString().PadLeft(2, '0');

                        txtExt = txtPath.Substring(txtPath.LastIndexOf(".") + 1).ToLower();
                        tablename = ff.GetTablename(txtPath, 4).Trim();
                        if (tablename.Length > 34) // 35 символов PFR_20160201_12_10001_009_000_00001  (.xml)
                        {
                            //с 17-й по счету позиции 5 символов
                            // или 2 символа с 20-или по счету позиции
                            txtOspCode = tablename.Substring(19, 2);
                        }

                        // проверяем только реестры U*.xSS
                        if (!alLoadedReestrs.Contains(tablename + '.' + txtExt.ToUpper())
                        && (txtExt.Length == 3) && (txtExt.ToUpper() == "XML")
                        && tablename.ToUpper().StartsWith("PFR"))
                        {
                            // нужно сделать контроль операторов сбера и сдать ошибку на почту если что не так:
                            // у сбербанка беда - некоторые файлы имеют обрезанные имена файлов - по 7 сиволов (не хватает символа месяца)
                            bool bEmailFilenameErr = false;
                            string txtSubj = "";
                            string txtMess = "";
                            txtSubj = "Внимание! Ошибка оператора ПФР в имени файла с ответами " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0');
                            txtMess = "Внимание! Ошибка оператора ПФР в имени файла с ответами в ОСП " + iDiv.ToString().PadLeft(2, '0');
                            txtMess += ". \n" + "Имя файла с ответами из ПФР: " + tablename + '.' + txtExt;
                            if (tablename.Length < 35)
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Длина имени файла составляет менее 35 символов (без расширения).\nПример верного имени файла: PFR_20160201_12_10001_009_000_00001.xml";
                            }

                            if (txtOspCode != txtRightOspCode)
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Неверный код ОСП в имени файла (фактически: " + txtOspCode + " | должно быть: " + txtRightOspCode + ").";
                            }

                            if ((txtExt.Length != 3) || (txtExt.ToUpper() != "XML"))
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Неверное расширение в имени файла.";
                            }

                            // отправить сообщение об ошибке в имени реестра если реестр еще не был загружен
                            if (bEmailFilenameErr)
                            {
                                txtMess += " \nФайл загружен по пути: " + txtPath;

                                // записываем чтобы повторно не информировать об ошибке каждый день
                                // pack_status = 2000 когда ошибка в имени файла после 12.11.2015 (до этого была 1000).
                                Logger_ufssprk_tools lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 2000, nPackType, txtAgreementCode, 0, Convert.ToDecimal(iDiv), "Пакет ответов на запрос в ПФР расширенный (XML).\n" + txtMess);
                                lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);

                                // отправляем Email
                                ff.SendEmail(txtMess, txtSubj, txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                // добавить в список файлов чтобы повторно не обработать
                                alLoadedReestrs.Add(tablename + '.' + "XML");

                            }
                        }

                        // если это наш файл
                        if ((!alLoadedReestrs.Contains(tablename + '.' + txtExt.ToUpper()))
                        && (txtExt.Length == 3) && (txtExt.ToUpper() == "XML")
                        && (tablename.Length == 35) && tablename.ToUpper().StartsWith("PFR")
                        && (txtOspCode == txtRightOspCode))
                        {
                            // получить каталог
                            txtFileDir = ff.GetFileDir(txtPath, 4);
                            Logger_ufssprk_tools lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 1, nPackType, txtAgreementCode, 0, Convert.ToDecimal(iDiv), "Загрузка ответов из ПФ на расширенный запрос.");

                            // искать родительский файл-реестр
                            
                            // сделать модификацию имени файла-ответа чтобы найти имя файла-запроса
                            // а по сути - заменить PFR на SSP
                            string txtReqFileName = tablename.Replace("PFR", "SSP") + '.' + "XML";
                            txtReqFileName = txtReqFileName.Replace("_12_", "_11_");
                            decimal nParent_ID = lLogger2.GetLogByFileName(1, txtAgreementCode, txtReqFileName, -12);
                            if (nParent_ID > 0) lLogger2.UpdateLLogParent(nParent_ID);

                            // записать в лог пакета дату и начало обработки
                            // а в какой лог? в лог автозагрузки или в лог пакета с квитанциями?
                            lLogger.WriteLLog(DateTime.Now + " начало обработки пакета.\n");
                            lLogger.WriteLLog("Обрабатывается файл: " + txtPath + "\n");
                            
                            // 20180111 - т.к. есть косяки с экапированием & то делаем замену
                            // FileStringReplace(string txtFilePath, string txtStringToFind, string txtReplacement, Encoding enc)

                            // начало обработки XML файла

                            # region "XML ответ"
                            iCnt = 0;
                            iECnt = 0;
                            int iLCnt = 0;

                            Decimal nID = 0;
                            String txtID = "";
                            decimal newID = 0;

                            decimal nStatus = 0;

                            decimal nAgreementID = 0;
                            
                            
                            txtAgreementCode = "";
                            string txtAgentCode = "";
                            string txtAgentDeptCode = "";

                            nAgreementID = 110;

                            txtAgreementCode = GetAgreement_Code(con, nAgreementID, lLogger2);
                            txtAgentCode = GetAgent_Code(con, nAgreementID, lLogger2);
                            txtAgentDeptCode = GetAgentDept_Code(con, nAgreementID, lLogger2);

                            string txtEntityName = GetLegal_Name(potd_id, con, lLogger2);

                            string txtErrStr = "";
                            // decimal nDiv = GetOSP_Num(con, out txtErrStr);
                            nPackType = 2; // ответ простой

                            XmlDocument doc = new XmlDocument();
                            doc.Load(txtPath);
                            // получаем все DataBlock - похоже что на самом деле получаем все ext_answer
                            //XmlNodeList xmlDataBlockList = doc.DocumentElement.ChildNodes;
                            //foreach (XmlNode nodeDataBlock in xmlDataBlockList)
                            //{
                            // получаем все ExtAnswer
                            // XmlNodeList xmlExtAnswerList = nodeDataBlock.ChildNodes;
                            XmlNodeList xmlExtAnswerList = doc.DocumentElement.ChildNodes;

                            // запускаем progress_bar
                            
                            bool bFirstRow = true;
                            string txtBaseResponse = "в соответствии с " + GetLegal_Conv(potd_id, con, lLogger);
                            txtBaseResponse += " получен ответ:\n";

                            string txtExtAnswerKey = "";
                            string txtAnswerType = "";
                            string txtQueryKey = "";
                            string txtIPKey = "";


                            foreach (XmlNode nodeExtAnswer in xmlExtAnswerList)
                            {
                                try
                                {
                                    iCnt++; // общий счетчик ответов
                                    string txtResponse = txtBaseResponse;

                                    // Key
                                    // AnswerType = {1 - Есть сведения, 2 - нет сведений}
                                    // QueryKey - проблема в том, что в первой выборке Query_key был на самом деле EXT_REQUEST_ID, поэтому тут делаем костыль
                                    // IPKey
                                    txtExtAnswerKey = nodeExtAnswer.Attributes["Key"].Value.Trim();
                                    txtAnswerType = nodeExtAnswer.Attributes["AnswerType"].Value.Trim();
                                    txtQueryKey = nodeExtAnswer.Attributes["QueryKey"].Value.Trim();
                                    txtIPKey = nodeExtAnswer.Attributes["IPKey"].Value.Trim();


                                    decimal nExtKey = 0;
                                    Decimal.TryParse(txtExtAnswerKey, out nExtKey);

                                    //decimal nID = 0;
                                    nID = 0;
                                    Decimal.TryParse(txtQueryKey, out nID);

                                    decimal nIP_ID = 0;
                                    Decimal.TryParse(txtIPKey, out nIP_ID);

                                    DateTime dtDatOtv = DateTime.Today;
                                    decimal org = potd_id;

                                    // проверяем есть ли такой запрос в б.д. ОСП
                                    // чтобы не тратить ресурсы БД будем искать только 1 раз = на первой записи

                                    // проблема в том, что если это не req_id, а ex_req_id, то что делать.
                                    // можно решить проблему простым и хитрым update...
                                    // то есть взять ответы из базы данных, которые попали в пакет... как-то его отфильтровать этот пакет
                                    // и для всех записей внутри этого пакета сделать update, где зменить ext_req_id на req_id

                                    // предлагаю для записей, которые старые - с 6 по 12 апреля делать по-старому, а для остальных по-новому
                                    // проблема в том, что их найти почти нереально..

                                    if (!bFirstRow || (FindZapros(con, nID, lLogger) || FindReqByExtReqID(con, ref nID, lLogger)))
                                    {
                                        /*
                                        bool bGoodZapros = false;
                                        bGoodZapros  = mvv.FindZapros(con, nID, lLogger);

                                        if(!bGoodZapros){
                                            string txtReqId = mvv.FindReqIDByExtReqID(con, ref nID, lLogger);
                                            if(txtReqId.Length > 0){
                                                txtQueryKey = txtReqId;
                                                bGoodZapros = true;
                                                bFirstRow = true; // чтобы проверять на след. шаге
                                            }
                                        }
                                    
                                        if(bGoodZapros){
                                        */
                                        //txtResponse = "в соответствии с " + PKOSP_GetOrgConvention(potd_id);
                                        //txtResponse += " получен ответ:\n";

                                        // если есть сведения (1) - то делаем дальше
                                        if (txtAnswerType.Equals("1"))
                                        {
                                            // вставляем базовый ответ, к нему будем потом крепить все доп. сведения
                                            // txtAnswerType = "1";
                                            nStatus = 19;
                                            // в связи с тем, что пока не могу вставлять нормально доп. сведения о месте работы, буду пока текст собирать и вставлять в общий ответ
                                            // string txtAnswText = "Есть сведения";

                                            /*
                                            newID = mvv.InsertResponseIntTable(con, nID, txtAnswText, dtDatOtv, nStatus, lLogger.logID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtAnswerType, lLogger);
                                        
                                            if(newID > 0) iLCnt++; // положительные ответы
                                            else {
                                                iECnt++; // отрицательные ответы
                                                lLogger.MemoryLLog(" .\nОшибка! Не удалось загрузить ответ Id = " + txtQueryKey + ".\n");
                                            }
                                            */

                                            // получаем все что внутри ExtAnswer = Data/SvedRab
                                            XmlNodeList xmlAnswerDataList = nodeExtAnswer.ChildNodes;
                                            foreach (XmlNode nodeAnswerData in xmlAnswerDataList)
                                            {
                                                // это положительный ответ, достаем из него сведения
                                                // это могут быть сведения о работодателе или о доходе
                                                // поэтому вставлять будем уже когда тип будет известен
                                                if (nodeAnswerData.Name.ToString() == "Data")
                                                {
                                                    // Key
                                                    // ActDate
                                                    // DebtorName
                                                    // KindData

                                                    string txtDataKey = nodeAnswerData.Attributes["Key"].Value.Trim();

                                                    string txtActDate = nodeAnswerData.Attributes["ActDate"].Value.Trim();
                                                    DateTime dtActDate = DateTime.MinValue;
                                                    DateTime.TryParse(txtActDate, out dtActDate);

                                                    string txtDebtorName = nodeAnswerData.Attributes["DebtorName"].Value.Trim();
                                                    string txtKindData = nodeAnswerData.Attributes["KindData"].Value.Trim();

                                                    if (txtKindData == "81") // KindData = 81
                                                    {
                                                        XmlNode nodeSvedRab = null;
                                                        nodeSvedRab = nodeAnswerData.SelectSingleNode("SvedRab");
                                                        if (nodeSvedRab != null)
                                                        {
                                                            // NaimOrg
                                                            // AdresJ
                                                            // AdresF
                                                            // DebtorName
                                                            string txtNaimOrg = "";
                                                            var NaimOrgAtt = nodeSvedRab.Attributes["NaimOrg"];
                                                            if (NaimOrgAtt != null) txtNaimOrg = nodeSvedRab.Attributes["NaimOrg"].Value.Trim();


                                                            string txtAdresJ = nodeSvedRab.Attributes["AdresJ"].Value.Trim();

                                                            string txtAdresF = "";
                                                            var AdresFAtt = nodeSvedRab.Attributes["AdresF"];
                                                            if (AdresFAtt != null) txtAdresF = nodeSvedRab.Attributes["AdresF"].Value.Trim();

                                                            txtResponse += " - есть сведения о месте работы / начисления выплаты:\nДолжник: " + txtDebtorName + ".\n";
                                                            txtResponse += "Актуальность сведений: " + txtActDate + ".\n";
                                                            txtResponse += "Наименование страхователя: " + txtNaimOrg + ".\n";
                                                            txtResponse += "Юр. адрес страхователя: " + txtAdresJ + ".\n";
                                                            txtResponse += "Факт. адрес страхователя: " + txtAdresJ + ".\n\n";

                                                            // если базовый ответ уже вставлен - то крепим к нему сведения о месте работы
                                                            /* - !!! не работает, поэтому закомментировал
                                                            if (newID > 0)
                                                            {
                                                                if(InsertIntTableSvedRabData(con, newID, txtNaimOrg, txtAdresF, txtAdresJ, "", "", dtActDate, txtDataKey, txtEntityName) == -1){
                                                                     lLogger.ErrMessage += " .\nОшибка! Не удалось загрузить ответ о месте работы Id = " + txtQueryKey + ". txtDataKey = " + txtDataKey + "\n";
                                                                }
                                                            }
                                                            */
                                                        }
                                                    }
                                                    // некуда вставить сведения о том что пенсия есть, без суммы - будем в текст лепить
                                                    if (txtKindData == "93") // KindData = 93
                                                    {
                                                        XmlNode nodePens = null;
                                                        nodePens = nodeAnswerData.SelectSingleNode("DebtorState");
                                                        if (nodePens != null)
                                                        {
                                                            string txtState = "";

                                                            XmlElement xPensElement = nodePens as XmlElement;
                                                            if ((xPensElement != null) && xPensElement.HasAttribute("State"))
                                                            {
                                                                txtState = nodePens.Attributes["State"].Value.Trim();
                                                                // "трудовая пенсия по старости" - сведения о пенсии
                                                                txtResponse += " - есть сведения о статусе должника в ПФ:\nДолжник: " + txtDebtorName + ".\n";
                                                                txtResponse += "Актуальность сведений: " + txtActDate + ".\n";
                                                                txtResponse += "Статус должника: " + txtState + ".\n\n";
                                                            }


                                                            /* - не работает т.к. нет суммы - поэтому закомментировал 
                                                            // если базовый ответ уже вставлен - то крепим к нему сведения о месте работы
                                                            if (newID > 0)
                                                            {
                                                                InsertIntTableSvedDoxod(con, newID, nSumDox, txtKindDox, txtCurrencyCode, dtDateDox, dtDatOtv, txtEntityName);
                                                                //InsertIntTableSvedRabData(con, newID, txtNaimOrg, txtAdresF, txtAdresJ, "", "", dtActDate, txtDataKey, txtEntityName);
                                                            }
                                                            */
                                                        }
                                                    }
                                                } // Data
                                            } // xmlAnswerDataList

                                            // теперь вставляем ответ тут
                                            newID = InsertResponseIntTable(con, nID, txtResponse, dtDatOtv, nStatus, lLogger.logID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtAnswerType, lLogger);

                                            if (newID > 0)
                                            {
                                                iLCnt++; // положительные ответы
                                            }
                                            else
                                            {
                                                iECnt++; // отрицательные ответы
                                                lLogger.MemoryLLog(" .\nОшибка! Не удалось загрузить ответ Id = " + txtQueryKey + ".\n");
                                            }
                                        }
                                        else if (txtAnswerType.Equals("2"))
                                        {
                                            // вставить отрицательный ответ
                                            //txtAnswerType = "2";
                                            nStatus = 19;
                                            string txtAnswText = "Нет сведений";
                                            newID = InsertResponseIntTable(con, nID, txtAnswText, dtDatOtv, nStatus, lLogger.logID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtAnswerType, lLogger);
                                            //decimal newID = InsertResponseIntTable(con, nID, txtAnswText, dtDatOtv, nStatus, org, ref iRewriteState, nNewPackID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, "2");
                                            if (newID > 0)
                                                iLCnt++; // все ок - считаем в загруженные
                                            else
                                            {
                                                iECnt++; // ошибка загрузки
                                                lLogger.MemoryLLog(" .\nОшибка! Не удалось загрузить ответ Id = " + txtQueryKey + ".\n");
                                                lLogger.ErrMessage += " .\nОшибка! Не удалось загрузить ответ Id = " + txtQueryKey + ".\n";
                                            }
                                        }
                                        else
                                        {
                                            // неизвестный тип ответа txtAnswerType
                                            // вставить отрицательный ответ c текстом - тип ответа неизвестен
                                            nStatus = 19;
                                            string txtAnswText = "Ответ принят как отрицательный. Неизвестный тип ответа: " + txtAnswerType;
                                            string txtTempAnswerType = "2";
                                            newID = InsertResponseIntTable(con, nID, txtAnswText, dtDatOtv, nStatus, lLogger.logID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtTempAnswerType, lLogger);
                                            //decimal newID = InsertResponseIntTable(con, nID, txtAnswText, dtDatOtv, nStatus, org, ref iRewriteState, nNewPackID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, "2");
                                            if (newID > 0)
                                            {
                                                iECnt++; // все ок - считаем в ошибки
                                                lLogger.MemoryLLog(" .\nОшибка! Загружен ответ с неизвестного типа Id = " + txtQueryKey + ". Тип ответа = " + txtAnswerType + ".\n");
                                                lLogger.ErrMessage += " .\nОшибка! Загружен ответ с неизвестного типа Id = " + txtQueryKey + ". Тип ответа = " + txtAnswerType + ".\n";
                                            }
                                            else
                                            {
                                                iECnt++; // ошибка загрузки
                                                lLogger.MemoryLLog(" .\nОшибка! Не удалось загрузить ответ Id = " + txtQueryKey + ".\n");
                                                lLogger.ErrMessage += " .\nОшибка! Не удалось загрузить ответ Id = " + txtQueryKey + ".\n";
                                            }
                                        }
                                    }// if(findZapros)
                                    else
                                    {
                                        // ошибка - не найден такой запрос
                                        iECnt++;
                                        lLogger.MemoryLLog(" .\nОшибка! Ответ не загружен т.к. не найден запрос.\n");
                                        if (nID > 0)
                                        {
                                            lLogger.MemoryLLog(" .\nID запроса = " + nID.ToString() + "\n");
                                        }
                                    }

                                }
                                catch (Exception ex)
                                {
                                    iECnt++;
                                    // MessageBox.Show("Ошибка приложения. Message: " + ex.ToString(), "Внимание!", MessageBoxButtons.OK);
                                    Console.WriteLine("Ошибка приложения. Message: " + ex.ToString());

                                    lLogger.WriteLLog(" .\nОшибка! Загрузка пакета ответов экстренно прервалась.\n");
                                    lLogger.WriteLLog("txtExtAnswerKey = " + txtExtAnswerKey + ";\n");
                                    lLogger.WriteLLog("txtAnswerType = " + txtAnswerType + ";\n");
                                    lLogger.WriteLLog("txtQueryKey = " + txtQueryKey + ";\n");
                                    lLogger.WriteLLog("txtIPKey = " + txtIPKey + ";\n");

                                    lLogger.WriteLLog(" .\nЗначение счетчика = " + iCnt.ToString() + "\n");
                                    lLogger.WriteLLog(" .\nException: " + ex.ToString() + "\n");

                                    lLogger.ErrMessage += " .\nОшибка! Загрузка пакета ответов экстренно прервалась.\n";
                                    lLogger.ErrMessage += " .\nЗначение счетчика = " + iCnt.ToString() + "\n";
                                    lLogger.ErrMessage += " .\nException: " + ex.ToString() + "\n";

                                    if (nID > 0)
                                    {
                                        lLogger.ErrMessage += " .\nID запроса = " + nID.ToString() + "\n";
                                    }

                                    // обновить статус лога-ответа
                                    lLogger.UpdateLLogStatus(11);// ответ загружен с ошибкой


                                }

                                // двигаем progress_bar
                                bFirstRow = false;
                            } // xmlExtAnswerList
                            //} // xmlDataBlockList


                            // пишем что все загрузили - и вобще молодцы!
                            //WriteLLog(conGIBDD, nNewPackID, "+++++++++++++++++++++++++++++++++++++++\n");
                            lLogger2.WriteLLog("\n" + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + " завершение обработки пакета ответов из ПФ (XML формат).\n");
                            lLogger2.WriteLLog("Успешно загружено ответов: " + iLCnt.ToString() + "\n");
                            lLogger2.WriteLLog("Ошибок загрузки ответов: " + iECnt.ToString() + "\n");
                            lLogger2.WriteLLog("Всего обработано ответов: " + iCnt.ToString() + "\n");

                            // записать в лог верхнего уровня
                            lLogger.WriteLLog("\n" + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + " завершение обработки пакета ответов из ПФ (XML формат).\n");
                            lLogger.WriteLLog("Успешно загружено ответов: " + iLCnt.ToString() + "\n");
                            lLogger.WriteLLog("Ошибок загрузки ответов: " + iECnt.ToString() + "\n");
                            lLogger.WriteLLog("Всего обработано ответов: " + iCnt.ToString() + "\n");
                            

                            // установить количество обработанных запросов
                            lLogger2.UpdateLLogCount(iLCnt);
                            // обновить статус лога-ответа
                            if (lLogger2.Status != 11)
                                lLogger2.UpdateLLogStatus(2);

                            //string txtFileName = "";
                            //File_funcs ff = new File_funcs();
                            //txtFileName = ff.GetTablename(openFileDialog1.FileName, txtExtension.Length);
                            lLogger2.UpdateLLogFileName(tablename + '.' + "XML");
                            // MessageBox.Show("Успешно бработано ответов ПФ о месте работы на запросы СПИ (XML): " + iLCnt.ToString() + " (из " + iCnt.ToString() + ").\n ", "Сообщение", MessageBoxButtons.OK);
                            Console.WriteLine("Успешно бработано ответов ПФ о месте работы на запросы СПИ (XML): " + iLCnt.ToString() + " (из " + iCnt.ToString() + ").\n ");
                            // обновить статус родителя
                            lLogger2.UpdateLLogParentStatus(10);// 10 - загружен ответ

                            alLoadedReestrs.Add(tablename + '.' + "XML");
                            iLogCnt++; // счетчик обработанных файлов

                            string txtMessage = DateTime.Now.ToString() + " Загружено " + iLCnt.ToString() + "; Ошибок загрузки " + iECnt.ToString() + "\tв ответах из файла: " + tablename + '.' + txtExt;
                            // Console.WriteLine("Успешно бработано ответов ПФ о месте работы на запросы СПИ (XML): " + iLCnt.ToString() + " (из " + iCnt.ToString() + ").\n ");
                            txtMessage += "\n Реестр загружен из файла по пути: " + txtPath;
                            ff.SendEmail(txtMessage, "Загрузка ответов из ПФ (формат XML) в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtOspEmail, txtAdminEmail, txtMailServ, "");
                            ff.SendEmail(txtMessage, "Загрузка ответов из ПФ (формат XML) в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");


                            if (lLogger2.ErrMessage.Length > 0)
                            {
                                ff.SendEmail(lLogger2.ErrMessage, "Внимание! Ошибка загрузки квитанций от Сбербанка из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                            }



                            // показать ошибки    
                            // ShowLoggerError(lLogger2);
                            # endregion

                        }
                        else
                        {
                            // если файл не прошел по контролю имени файла или был уже загружен
                            ;
                        }
                    }
                }
                con.Dispose();
                ConG.Dispose();
            }
            catch (Exception ex)
            {
                iECnt++;

                lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка приложения (AutoLoadPotdOtvet). Message: " + ex.ToString();

                ff.WriteTofile(DateTime.Now.ToString() + " Ошибка приложения (AutoLoadPotdOtvet). Message: " + ex.ToString(), txtLogFileName);
                string txtMessage = "Возникла ошибка при попытке загрузить ответы ПФ расширенные (XML) по пути " + txtCurrPath;
                txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка приложения (AutoLoadPotdOtvet). Message: " + ex.ToString();
                ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки ответоы ПФ расширенные (XML) в ОСП  " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                return iLogCnt;
            }

            return iLogCnt;



        }

        public int AutoLoadIcMvdOtvet(string constrGIBDD, string constrPKOSP, string txtUploadDir, string txtLogFileName, int iDiv, string txtOspEmail, string txtAdminEmail, string txtAgreementCode, int nPackType, Logger_ufssprk_tools lLogger)
        {
            // в Local_Logs есть поле Filename, среди логов с типом 2 будем искать свой, с нужным именем

            OleDbConnection ConG, con;
            Int32 iCnt = 0;
            Int32 iECnt = 0;
            Int32 iLogCnt = 0;
            Int32 iPercent = 0;
            Int32 iFoundCnt = 0;
            Int32 iSourceID = 0;
            ArrayList alFiles;
            ArrayList alLoadedReestrs;
            string txtCurrPath = "";
            int nMonthPeriod = -12000; // чистим раз в 1000 лет - то есть никогда
            // что будет если раз в год забыли почистить - скорее всего файлы останутся на входе и будут повторно отработаны
            // а если эти -12 превратить в -12000, что будет?
            // на первый взгляд ничего, т.к. имя файла уникальное и повторяться не должно, например tr20210607_05_000.rc1
            // txtAgreementCode = "ИЦ_МВД_10";
            // nPackType = 2; - ответ обыкновенный

            string txtMailServ = "mail10";

            ArrayList Strings;
            DataTable dtData;

            File_funcs ff = new File_funcs();
            try
            {
                string txtErrLog = "";
                ConG = new OleDbConnection(constrGIBDD);
                con = new OleDbConnection(constrPKOSP);
                

                // 1. Получить список ответов

                alFiles = ff.GetReestrs(txtUploadDir, 1, 10, lLogger);

                // 2.1 Получить список уже загруженных файлов с квитанциями
                alLoadedReestrs = GetLoadedFiles(ConG, nMonthPeriod, txtAgreementCode, nPackType, lLogger);

                // 2.2 Загрузить файлы из alFiles в GIBDD_PLATEZH, 
                foreach (string txtPath in alFiles)
                {
                    txtCurrPath = txtPath;
                    // вычленить имя файла
                    if (txtPath.Length > 0)
                    {
                        string tablename = "";
                        string txtExt = "";
                        string txtFileDir = "";
                        string txtOspCode = "";
                        string txtRightOspCode = iDiv.ToString().PadLeft(2, '0');

                        txtExt = txtPath.Substring(txtPath.LastIndexOf(".") + 1).ToLower();
                        tablename = ff.GetTablename(txtPath, 4).Trim();
                        if (tablename.Length > 13)
                        {
                            txtOspCode = tablename.Substring(11, 2);
                        }

                        // проверяем только реестры U*.xSS
                        if (!alLoadedReestrs.Contains(tablename + '.' + txtExt)
                        && (txtExt.Length == 3) && (txtExt.ToUpper() == "DOC")
                        && tablename.ToUpper().StartsWith("TR"))
                        {
                            // нужно сделать контроль операторов сбера и сдать ошибку на почту если что не так:
                            // у сбербанка беда - некоторые файлы имеют обрезанные имена файлов - по 7 сиволов (не хватает символа месяца)
                            bool bEmailFilenameErr = false;
                            string txtSubj = "";
                            string txtMess = "";
                            txtSubj = "Внимание! Ошибка оператора ИЦ МВД в имени файла с ответами " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0');
                            txtMess = "Внимание! Ошибка оператора ИЦ МВД в имени файла с ответами в ОСП " + iDiv.ToString().PadLeft(2, '0');
                            txtMess += ". \n" + "Имя файла с ответами из ИЦ МВД: " + tablename + '.' + txtExt;
                            if (tablename.Length < 17)
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Длина имени файла составляет менее 17 символов.\nПример верного имени файла: TR20160211_01_000.DOC";
                            }

                            if (txtOspCode != txtRightOspCode)
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Неверный код ОСП в имени файла (фактически: " + txtOspCode + " | должно быть: " + txtRightOspCode + ").";
                            }

                            if ((txtExt.Length != 3) || (txtExt.ToUpper() != "DOC"))
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Неверное расширение в имени файла.";
                            }

                            // отправить сообщение об ошибке в имени реестра если реестр еще не был загружен
                            if (bEmailFilenameErr)
                            {
                                txtMess += " \nФайл загружен по пути: " + txtPath;

                                // записываем чтобы повторно не информировать об ошибке каждый день
                                // pack_status = 2000 когда ошибка в имени файла после 12.11.2015 (до этого была 1000).
                                Logger_ufssprk_tools lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 2000, nPackType, txtAgreementCode, 0, Convert.ToDecimal(iDiv), "Пакет ответов на запрос в ИЦ МВД (требования).\n" + txtMess);
                                lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);

                                // отправляем Email
                                ff.SendEmail(txtMess, txtSubj, txtAdminEmail, txtAdminEmail, txtMailServ, "");
                            }
                        }

                        // если это наш файл
                        if ((!alLoadedReestrs.Contains(tablename + '.' + txtExt))
                        && (txtExt.Length == 3) && (txtExt.ToUpper() == "DOC")
                        && (tablename.Length == 17) && tablename.ToUpper().StartsWith("TR")
                        && (txtOspCode == txtRightOspCode))
                        {
                            // получить каталог
                            txtFileDir = ff.GetFileDir(txtPath, 4);
                            Logger_ufssprk_tools lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 1, nPackType, txtAgreementCode, 0, Convert.ToDecimal(iDiv), "Пакет ответов на запрос в ИЦ МВД (требования).");

                            // искать родительский файл-реестр
                            // decimal nParent_ID = lLogger2.GetLogByFileName(nPackType, txtAgreementCode, tablename + '.' + txtExt, -12);
                            decimal nParent_ID = lLogger2.GetLogByFileName(1, txtAgreementCode, tablename + '.' + "rc1", -12);
                            if (nParent_ID > 0) lLogger2.UpdateLLogParent(nParent_ID);

                            // записать в лог пакета дату и начало обработки
                            // а в какой лог? в лог автозагрузки или в лог пакета с квитанциями?
                            lLogger.WriteLLog(DateTime.Now + " начало обработки пакета.\n");
                            lLogger.WriteLLog("Обрабатывается файл: " + txtPath + "\n");


                            // прочитать все строки из файла кодировка UTF-8 в соотв-ии с соглашением
                            Strings = ff.ReadPaths(txtPath, Encoding.GetEncoding(1251), lLogger2);
                            // !!! TODO: спроектировать таблицу для ответа (кроме текста и id что еще?
                            // нужена ли вообще такая таблица - можно попробовать без нее вообще
                            
                            string txtResp = "";
                            decimal nId = 0;
                            string txtId = "";
                            string txtListID = "";
                            // ИЦ_МВД_10 - все 3 одинаковые
                            string txtAgentCode = txtAgreementCode; // тут все должно быть одинаковым - и соглашение контрагент и подразделение 
                            string txtAgentDeptCode = txtAgreementCode; // тут все должно быть одинаковым - и соглашение контрагент и подразделение 
                            string txtEntityName = "ИЦ МВД Республики Карелия";
                            decimal nStatus = 19; // ответ получен
                            string txtAnswerType = "2";
                            decimal newID = 0;
                            int iShift = 0;
                            DateTime dtDatOtv = DateTime.Today; // МВД не передает дату ответа - будет дата загрузки
                            String[] Zapros_list;

                            foreach (string txtLine in Strings)
                            {
                                if (txtLine.Trim().Equals("ЖЖЖКККЖЖЖ")) // если это конец блока с ответом 
                                {
                                    if ((iShift > 6) && (txtAnswerType == "2")) txtAnswerType = "1"; // если строк ответа больше чем 5 - значит есть какие-то данные в ответе и он положительный
                                    if(txtResp[0].Equals('\n'))
                                        txtResp = txtResp.Substring(1) ; // отрезать перевод строки вначале
                                    // записать ответ в интерфейсную таблицу
                                    // теперь вместо nID будет txtListID
                                    if (txtListID.Length > 0)
                                    {
                                        // сделать из списка массив nId, в цикле по нему вставить ответ
                                        Zapros_list = txtListID.Split(';');
                                        if (Zapros_list.Length > 0)
                                        {
                                            nId = Convert.ToDecimal(Zapros_list[0]);
                                        }
                                        
                                        //  проверяем только первый Id в файле
                                        if ((iCnt > 0) || FindZapros(con, nId, lLogger)) 
                                        {
                                            foreach (string txtNomzap in Zapros_list)
                                            {
                                                nId = 0;
                                                if(Decimal.TryParse(txtNomzap, out nId))
                                                {
                                                    if (nId > 0)
                                                    {
                                                        newID = InsertResponseIntTable(con, nId, txtResp, dtDatOtv, nStatus, lLogger2.logID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtAnswerType, lLogger2);
                                                        if (newID > 0) // вставить сведения об ответе в ИТ
                                                        {
                                                            iCnt++; // все ок - считаем в загруженные
                                                            lLogger2.MemoryLLog("\n" + iCnt.ToString() + "\tЗагружен ответ на запрос № " + nId.ToString());
                                                        }
                                                        else
                                                        {
                                                            iECnt++; // ошибка загрузки сведений о счетах
                                                            lLogger2.MemoryLLog("\n" + iCnt.ToString() + "\tОшибка!  Не загружено сведений о счетах для ответа на запрос № " + nId.ToString());
                                                            lLogger2.ErrMessage += "\n" + iCnt.ToString() + "\tОшибка!  Не загружено сведений о счетах для ответа на запрос № " + nId.ToString();
                                                        }
                                                    }
                                                }
                                            } // end_foreach
                                        }
                                    }
                                    
                                }                                
                                // если это начало блока с ответом 
                                else if (txtLine.Trim().Equals("ЖЖЖOSKЖЖЖ"))
                                {
                                    txtAnswerType = "2";
                                    nId = 0;
                                    txtId = "";
                                    txtListID = "";
                                    txtResp = "";
                                    iShift = 0;
                                }
                                else
                                {
                                    iShift++;
                                    // для определения положительный ответ или отрицательный нужно считать сколько прошло строк после этой строки
                                    if (txtLine.Equals("ОТВЕТ:"))
                                        iShift = 0; 

                                    // не идентифицирован должник в запросе
                                    if (txtLine.Equals("ОШИБОЧНЫЙ ЗАПРОС"))
                                        txtAnswerType = "3";


                                    if (txtLine.StartsWith("ИНИЦИАТОР ПРОВЕРКИ: УФССП ПО РЕСП КАРЕЛИЯ"))
                                    {
                                        txtId = txtLine.Substring(txtLine.Length - 14, 14);
                                        Decimal.TryParse(txtId, out nId);
                                        txtListID = txtLine.Substring(41);
                                        txtResp += "\n" + txtLine.Substring(0, txtLine.Length - 14); // в ответ записать строчку без id на конце
                                    }
                                    else
                                    {
                                        txtResp += "\n" + txtLine; // записать строчку в ответ
                                    }
                                }
                            }

                            
                            if (iCnt >= 0)
                            {
                                lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);
                                lLogger2.UpdateLLogStatus(2);
                                lLogger2.UpdateLLogCount(iCnt);
                                iLogCnt++;
                                // добавить в список alLoadedReestrs
                                alLoadedReestrs.Add(tablename + '.' + txtExt);
                                // string txtMessage = DateTime.Now.ToString() + " Загружено " + iCnt + "\tстрок из реестра квитанций номер: " + tablename + '.' + txtExt;
                                string txtMessage = DateTime.Now.ToString() + " Загружено " + iCnt.ToString() + "; Ошибок загрузки " + iECnt.ToString() + "\tв ответах из файла: " + tablename + '.' + txtExt;

                                // записать в лог автозагрузки сколько строк загружено (txtMessage)
                                lLogger.WriteLLog("\n" + txtMessage);

                                txtMessage += "\n Реестр загружен из файла по пути: " + txtCurrPath;
                                ff.WriteTofile(txtMessage, txtLogFileName);
                                // в ОСП не отправляем
                                // ff.SendEmail(txtMessage, "Загрузка реестра оплаченных штрафов МВД", txtOspEmail, txtAdminEmail, txtMailServ, "");
                                ff.SendEmail(txtMessage, "Загрузка ответов из ИЦ МВД из файла " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");

                            }
                            else if (iCnt == 0 && iECnt > 0)
                            {
                                //если загружено 0, то это Ошибка, надо с ней бороться
                                lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);
                                lLogger2.UpdateLLogStatus(2);
                                lLogger2.UpdateLLogCount(iCnt);
                                iLogCnt++;
                                // добавить в список alLoadedReestrs
                                alLoadedReestrs.Add(tablename + '.' + txtExt);
                                // string txtMessage = DateTime.Now.ToString() + " Загружено " + iCnt.ToString() + "; Ошибок загрузки " + iECnt.ToString() + "\tстрок из пакета ответа из файла: " + tablename + '.' + txtExt;
                                string txtMessage = DateTime.Now.ToString() + " Загружено " + iCnt.ToString() + "; Ошибок загрузки " + iECnt.ToString() + "\tв ответах из файла: " + tablename + '.' + txtExt;
                                // записать в лог автозагрузки сколько строк загружено (txtMessage)
                                lLogger.WriteLLog("\n" + txtMessage);

                                txtMessage += "\n Ответы загружены из файла по пути: " + txtCurrPath;
                                ff.WriteTofile(txtMessage, txtLogFileName);
                                // в ОСП не отправляем
                                // ff.SendEmail(txtMessage, "Загрузка реестра оплаченных штрафов МВД", txtOspEmail, txtAdminEmail, txtMailServ, "");
                                ff.SendEmail(txtMessage, "Загрузка ответов из ИЦ МВД из файла " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");

                            }

                            if (lLogger2.ErrMessage.Length > 0)
                            {
                                ff.SendEmail(lLogger2.ErrMessage, "Внимание! Ошибка загрузки квитанций от Сбербанка из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                            }
                            // } end else - который если файл не бинарный, а хороший
                        }
                        else
                        {
                            // если файл не прошел по контролю имени файла или был уже загружен
                            ;
                        }
                    }
                }
                con.Dispose();
                ConG.Dispose();
            }
            catch (Exception ex)
            {
                iECnt++;

                lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка приложения (AutoLoadMvdOtvet). Message: " + ex.ToString();

                ff.WriteTofile(DateTime.Now.ToString() + " Ошибка приложения (AutoLoadMvdOtvet). Message: " + ex.ToString(), txtLogFileName);
                string txtMessage = "Возникла ошибка при попытке загрузить ответы ИЦ МВД по пути " + txtCurrPath;
                txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка приложения (AutoLoadMvdOtvet). Message: " + ex.ToString();
                ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки ответов из ИЦ МВД в ОСП  " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                return iLogCnt;
            }

            return iLogCnt;



        }


        public int AutoLoad_PFR10_Otvet(string constrGIBDD, string constrPKOSP, string constrED, string txtUploadDir, string txtLogFileName, int iDiv, string txtOspEmail, string txtAdminEmail, string txtAgreementCode, int nPackType, Logger_ufssprk_tools lLogger)
        {
            //это старый комментарий - в Local_Logs есть поле Filename, среди логов с типом 2 будем искать свой, с нужным именем

            OleDbConnection ConG, con, conED;
            Int32 iCnt = 0;
            Int32 iLCnt = 0;
            Int32 iECnt = 0;
            Int32 iLogCnt = 0;
            Int32 iPercent = 0;
            Int32 iFoundCnt = 0;
            Int32 iSourceID = 0;
            ArrayList alFiles;
            ArrayList alLoadedReestrs;
            string txtCurrPath = "";
            //int nMonthPeriod = -12; // чистим раз в год
            int nMonthPeriod = -100000; // имена уникальные - чистить не надо
            string txtMailServ = "mail10";
            

            ArrayList Strings;
            DataTable dtData;

            File_funcs ff = new File_funcs();
            try
            {
                string txtErrLog = "";
                ConG = new OleDbConnection(constrGIBDD);
                con = new OleDbConnection(constrPKOSP);
                conED = new OleDbConnection(constrED);


                // 1. Получить список ответов

                alFiles = ff.GetReestrs(txtUploadDir, 1, 10, lLogger);

                // 2.1 Получить список уже загруженных файлов с квитанциями
                alLoadedReestrs = GetLoadedFiles(ConG, nMonthPeriod, txtAgreementCode, nPackType, lLogger);

                // 2.2 Загрузить файлы из alFiles в GIBDD_PLATEZH, 
                // будем считать что имя файла-ответа pristav-PFR_01.csv
                foreach (string txtPath in alFiles)
                {
                    txtCurrPath = txtPath;
                    // вычленить имя файла
                    if (txtPath.Length > 0)
                    {
                        string tablename = "";
                        string txtExt = "";
                        string txtFileDir = "";
                        string txtOspCode = "";
                        string txtRightOspCode = iDiv.ToString().PadLeft(2, '0');

                        txtExt = txtPath.Substring(txtPath.LastIndexOf(".") + 1).ToLower();
                        tablename = ff.GetTablename(txtPath, 4).Trim();
                        if (tablename.Length > 14)
                        {
                            txtOspCode = tablename.Substring(23, 2);
                        }

                        // проверяем файлы PFR_2017_m_rab20171004_13.txt
                        if (!alLoadedReestrs.Contains(tablename + '.' + txtExt)
                        && (txtExt.Length == 3) && (txtExt.ToUpper() == "TXT")
                        && tablename.ToUpper().StartsWith("PFR_2017_M_RAB"))
                        {
                            // нужно сделать контроль операторов сбера и сдать ошибку на почту если что не так:
                            // у сбербанка беда - некоторые файлы имеют обрезанные имена файлов - по 7 сиволов (не хватает символа месяца)
                            bool bEmailFilenameErr = false;
                            string txtSubj = "";
                            string txtMess = "";
                            txtSubj = "Внимание! Ошибка оператора ПФР_10 в имени файла с ответами " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0');
                            txtMess = "Внимание! Ошибка оператора ПФР_10 в имени файла с ответами в ОСП " + iDiv.ToString().PadLeft(2, '0');
                            txtMess += ". \n" + "Имя файла с ответами из ПФР_10 2017: " + tablename + '.' + txtExt;
                            if (tablename.Length < 25)
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Длина имени файла составляет менее 25 символов.\nПример верного имени файла: PFR_2017_m_rab20171004_13.txt";
                            }

                            if (txtOspCode != txtRightOspCode)
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Неверный код ОСП в имени файла (фактически: " + txtOspCode + " | должно быть: " + txtRightOspCode + ").";
                            }

                            if ((txtExt.Length != 3) || (txtExt.ToUpper() != "TXT"))
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Неверное расширение в имени файла. Должно быть TXT.";
                            }

                            // отправить сообщение об ошибке в имени реестра если реестр еще не был загружен
                            if (bEmailFilenameErr)
                            {
                                txtMess += " \nФайл загружен по пути: " + txtPath;

                                // записываем чтобы повторно не информировать об ошибке каждый день
                                // pack_status = 2000 когда ошибка в имени файла после 12.11.2015 (до этого была 1000).
                                Logger_ufssprk_tools lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 2000, nPackType, txtAgreementCode, 0, Convert.ToDecimal(iDiv), "Пакет ответов на запрос в ПФР_10 (2017 о месте работы).\n" + txtMess);
                                lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);

                                // отправляем Email
                                ff.SendEmail(txtMess, txtSubj, txtAdminEmail, txtAdminEmail, txtMailServ, "");
                            }
                        }

                        // если это наш файл
                        if ((!alLoadedReestrs.Contains(tablename + '.' + txtExt))
                        && (txtExt.Length == 3) && (txtExt.ToUpper() == "TXT")
                        && (tablename.Length == 25) && tablename.ToUpper().StartsWith("PFR_2017_M_RAB")
                        && (txtOspCode == txtRightOspCode))
                        {
                            // получить каталог
                            txtFileDir = ff.GetFileDir(txtPath, 4);
                            Logger_ufssprk_tools lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 1, nPackType, txtAgreementCode, 0, Convert.ToDecimal(iDiv), "Пакет ответов на запрос в ПФР_10 (2017 о месте работы).");

                            // искать родительский файл-реестр
                            // decimal nParent_ID = lLogger2.GetLogByFileName(nPackType, txtAgreementCode, tablename + '.' + txtExt, -12);
                            decimal nParent_ID = lLogger2.GetLogByFileName(1, txtAgreementCode, tablename + '.' + "txt", -12);
                            if (nParent_ID > 0) lLogger2.UpdateLLogParent(nParent_ID);

                            // записать в лог пакета дату и начало обработки
                            // а в какой лог? в лог автозагрузки или в лог пакета с квитанциями?
                            lLogger.WriteLLog(DateTime.Now + " начало обработки пакета.\n");
                            lLogger.WriteLLog("Обрабатывается файл: " + txtPath + "\n");


                            // прочитать все строки из файла кодировка UTF-8 в соотв-ии с соглашением
                            Strings = ff.ReadPaths(txtPath, Encoding.GetEncoding(1251), lLogger2);
                            // сделать таблицу для ответа
                            dtData = this.GetPfr2017OtvetTable();

                            string txtResp = "";
                            decimal nId = 0;
                            string txtId = "";
                            string txtListID = "";
                            // ПФР_10 - все 3 одинаковые
                            string txtAgentCode = txtAgreementCode; // тут все должно быть одинаковым - и соглашение контрагент и подразделение 
                            string txtAgentDeptCode = txtAgreementCode; // тут все должно быть одинаковым - и соглашение контрагент и подразделение 
                            string txtEntityName = "ПФР_10";
                            decimal nStatus = 19; // ответ получен
                            string txtAnswerType = "2";
                            decimal newID = 0;
                            DateTime dtDatOtv = DateTime.Today; // ПФР_10 не передает дату ответа - будет дата загрузки
                            String[] Zapros_list;

                            // заполнить dtData
                            foreach (string txtLine in Strings)
                            {
                                Zapros_list = txtLine.Split(';');
                                DataRow row = dtData.NewRow();

                                for(int j=0; j< Zapros_list.Length; j++){
                                
                                    string txtValue = "";
                                    decimal nValue = 0;
                                    txtValue = Convert.ToString(Zapros_list[j]).Trim();
                                    string txtColumnName = dtData.Columns[j].ColumnName.Trim();
                                    if (txtColumnName.Equals("id"))
                                    {
                                        Decimal.TryParse(txtValue, out nValue);
                                        row[txtColumnName] = nValue;
                                    }
                                    else
                                    {
                                        row[txtColumnName] = txtValue;
                                    }
                                    
                                }
                                dtData.Rows.Add(row);// добавить сформированную строку в таблицу
                                
                                // заполнить ответ и сразу вставить?
                                // или сделать это в след. цикле - написав обработчик для каждой строки ответа
                                // выбираю варинт 2 и отдельный обработчик
                                /*
                                txtAnswerType = "2";
                                nId = 0;
                                txtId = "";
                                txtResp = "";
                                */ 
                            }


                            string txtAdres = "";
                            string txtNaimOrg = "";
                            string txtOldAdres = "";
                            string txtOldNaimOrg = "";
                            string txtInn = "";
                            string txtKpp = "";
                            string txtOldInn = "";
                            string txtOldKpp = "";
                            // обрабатываем строки таблицы ответов
                            foreach (DataRow oRow in dtData.Rows) {
                                txtAnswerType = "2";
                                nId = 0;
                                txtResp = "";

                                nId = Convert.ToDecimal(oRow["id"]);

                                // если ответ нет данных - сразу вставлять
                                if (oRow["INN"].ToString().Trim().Equals("НЕТ ДАННЫХ"))
                                {
                                    txtAnswerType = "2";
                                    nStatus = 19;
                                    string txtAnswText = "Нет сведений";
                                    newID = InsertResponseIntTable(con, nId, txtAnswText, dtDatOtv, nStatus, lLogger.logID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtAnswerType, lLogger2);

                                    if (newID > 0)
                                        iLCnt++; // все ок - считаем в загруженные
                                    else
                                    {
                                        iECnt++; // ошибка загрузки
                                        lLogger2.MemoryLLog(" .\nОшибка! Не удалось загрузить ответ Id = " + nId.ToString() + ".\n");
                                        lLogger2.ErrMessage += " .\nОшибка! Не удалось загрузить ответ Id = " + nId.ToString() + ".\n";
                                    }
                                }
                                else
                                {
                                    // а для положительного ответа написать отдельную функцию
                                    txtInn = oRow["INN"].ToString().Trim();
                                    txtKpp = oRow["KPP"].ToString().Trim();

                                    //сначала сам ответ
                                    txtAnswerType = "1";
                                    nStatus = 19;
                                    string txtAnswText = "Есть сведения";
                                    // вн ключ этот нужн еще и для вставки доп. сведений и самого ответа
                                    decimal extID = lLogger.GenExtID();
                                    string txtExtID = extID.ToString();

                                    // проверить - загружен ли ответ на запрос
                                    if (!FindWasResponse(con, nId, lLogger2))
                                    {
                                        newID = InsertResponseIntTableExtKey(con, nId, txtAnswText, dtDatOtv, nStatus, lLogger.logID, txtAgentCode, txtAgentDeptCode, txtAgreementCode, txtEntityName, txtAnswerType, txtExtID, lLogger2);

                                        if (newID <= 0)
                                        {
                                            iECnt++; // ошибка загрузки
                                            lLogger2.MemoryLLog(" .\nОшибка! Не удалось загрузить ответ Id = " + nId.ToString() + "(InsertResponseIntTableExtKey).\n");
                                            lLogger2.ErrMessage += " .\nОшибка! Не удалось загрузить ответ Id = " + nId.ToString() + "(InsertResponseIntTableExtKey).\n";
                                        }
                                        else
                                        {
                                            // потом доп.сведения к нему
                                            // EXT_SVED_RAB_DATA

                                            // !!! TODO: получить из РБД если ИНН и КПП новые 
                                            // string txtAdres, string txtNaimOrg, string txtInn, string txtKpp;
                                            // select first 1 egrul.ul_name_namep as name, egrul.ul_address_text as adr from egrul where inn = '1013900113' and egrul.kpp = '' order by egrul.idul desc

                                            DataTable dtEgrul = GetEgrulData(con, conED, txtInn, txtKpp, ref txtOldInn, ref txtOldKpp, txtOldAdres, txtOldNaimOrg, lLogger2);
                                            if (dtEgrul != null && dtEgrul.Rows.Count > 0)
                                            {
                                                txtOldNaimOrg = txtNaimOrg;
                                                txtOldAdres = txtAdres;
                                                txtNaimOrg = Convert.ToString(dtEgrul.Rows[0]["name"]).Trim();
                                                txtAdres = Convert.ToString(dtEgrul.Rows[0]["adr"]).Trim();
                                            }
                                            else
                                            {
                                                // еслм ничего не найдено - то нужно как-то отреагировать
                                                txtOldNaimOrg = txtNaimOrg;
                                                txtOldAdres = txtAdres;
                                                txtNaimOrg = Convert.ToString(oRow["NAMFUL"]).Trim();
                                                txtAdres = "";
                                            }

                                            decimal nSRabId = 0;
                                            if (newID > 0)
                                                nSRabId = InsertIntTableSvedRab(con, dtDatOtv, txtEntityName, "ПФР_10." + txtExtID, txtExtID, txtAdres, txtNaimOrg, txtInn, txtKpp, lLogger2);

                                            if (nSRabId > 0)
                                                iLCnt++; // все ок - считаем в загруженные
                                            else
                                            {
                                                iECnt++; // ошибка загрузки
                                                lLogger2.MemoryLLog(" .\nОшибка! Не удалось загрузить ответ Id = " + nId.ToString() + " (InsertIntTableSvedRab).\n");
                                                lLogger2.ErrMessage += " .\nОшибка! Не удалось загрузить ответ Id = " + nId.ToString() + "(InsertIntTableSvedRab).\n";
                                            }
                                        }
                                    }
                                    else
                                    {
                                        
                                            iECnt++; // ошибка загрузки
                                            lLogger2.MemoryLLog(" .\nОшибка! Ответ уже загружен Id = " + nId.ToString() + "(InsertResponseIntTableExtKey).\n");
                                            
                                        
                                    }
                                }
                            }
                                
                            

                            if (iLCnt > 0)
                            {
                                lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);
                                lLogger2.UpdateLLogStatus(2);
                                lLogger2.UpdateLLogCount(iLCnt);
                                iLogCnt++;
                                // добавить в список alLoadedReestrs
                                alLoadedReestrs.Add(tablename + '.' + txtExt);
                                // string txtMessage = DateTime.Now.ToString() + " Загружено " + iCnt + "\tстрок из реестра квитанций номер: " + tablename + '.' + txtExt;
                                string txtMessage = DateTime.Now.ToString() + " Загружено " + iCnt.ToString() + "; Ошибок загрузки " + iECnt.ToString() + "\tв ответах из файла: " + tablename + '.' + txtExt;

                                // записать в лог автозагрузки сколько строк загружено (txtMessage)
                                lLogger.WriteLLog("\n" + txtMessage);

                                txtMessage += "\n Реестр загружен из файла по пути: " + txtCurrPath;
                                ff.WriteTofile(txtMessage, txtLogFileName);
                                // в ОСП не отправляем
                                // ff.SendEmail(txtMessage, "Загрузка реестра оплаченных штрафов МВД", txtOspEmail, txtAdminEmail, txtMailServ, "");
                                ff.SendEmail(txtMessage, "Загрузка ответов из ПФР_10 из файла " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");

                            }
                            else if (iLCnt == 0 && iECnt > 0)
                            {
                                //если загружено 0, то это Ошибка, надо с ней бороться
                                lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);
                                lLogger2.UpdateLLogStatus(2);
                                lLogger2.UpdateLLogCount(iCnt);
                                iLogCnt++;
                                // добавить в список alLoadedReestrs
                                alLoadedReestrs.Add(tablename + '.' + txtExt);
                                // string txtMessage = DateTime.Now.ToString() + " Загружено " + iCnt.ToString() + "; Ошибок загрузки " + iECnt.ToString() + "\tстрок из пакета ответа из файла: " + tablename + '.' + txtExt;
                                string txtMessage = DateTime.Now.ToString() + " Загружено " + iCnt.ToString() + "; Ошибок загрузки " + iECnt.ToString() + "\tв ответах из файла: " + tablename + '.' + txtExt;
                                // записать в лог автозагрузки сколько строк загружено (txtMessage)
                                lLogger.WriteLLog("\n" + txtMessage);

                                txtMessage += "\n Ответы загружены из файла по пути: " + txtCurrPath;
                                ff.WriteTofile(txtMessage, txtLogFileName);
                                // в ОСП не отправляем
                                // ff.SendEmail(txtMessage, "Загрузка реестра оплаченных штрафов МВД", txtOspEmail, txtAdminEmail, txtMailServ, "");
                                ff.SendEmail(txtMessage, "Загрузка ответов из ПФР_10 из файла " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");

                            }

                            if (lLogger2.ErrMessage.Length > 0)
                            {
                                ff.SendEmail(lLogger2.ErrMessage, "Внимание! Ошибка загрузки ответов из ПФР_10 из файла " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                            }
                            // } end else - который если файл не бинарный, а хороший\

                            // ошибки записать в лог верхнего уровня
                            if (lLogger2.ErrMessage.Length > 0)
                                lLogger.ErrMessage += lLogger2.ErrMessage;

                        } // end если это наш файл
                        else
                        {
                            // если файл не прошел по контролю имени файла или был уже загружен
                            ;
                        }
                    } // end if (txtPath.Length > 0)
                    

                } // end foreach (string txtPath in alFiles)
                con.Dispose();
                ConG.Dispose();
            }
            catch (Exception ex)
            {
                iECnt++;

                lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка приложения (AutoLoad_PFR10_Otvet). Message: " + ex.ToString();

                ff.WriteTofile(DateTime.Now.ToString() + " Ошибка приложения (AutoLoad_PFR10_Otvet). Message: " + ex.ToString(), txtLogFileName);
                string txtMessage = "Возникла ошибка при попытке загрузить ответы ПФР_10 по пути " + txtCurrPath;
                txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка приложения (AutoLoad_PFR10_Otvet). Message: " + ex.ToString();
                ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки ответов из ПФР_10 в ОСП  " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                return iLogCnt;
            }

            return iLogCnt;

        }

        public int AutoLoadPfrRepIn(string constrGIBDD, string constrPKOSP, string txtUploadDir, string txtLogFileName, int iDiv, string txtOspEmail, string txtAdminEmail, Logger_ufssprk_tools lLogger)
        {
            // сначала заведем свой тип для логов - чтобы можно было имя файла потом уникально проверять
            /*INSERT INTO PACK_TYPE (ID, TYPE)
               VALUES (15, 'Автозагрузка отчетов о взятии в обработку постановлений ПИЭВ, направленных в ПФ.');*/

            // в Local_Logs есть поле Filename, среди логов с типом 10 будем искать свой, с нужным именем
            // важно - год, год от года могут повторяться, поэтому нужно смотреть год в поле packdate
            // год брать только и брать только даты не старше чем 6 мес назад?
            // А леше нарезать заявку все что старше чем 6 мес чистить по планировщику.


            OleDbConnection ConG, con;
            Int32 iCnt = 0;
            Int32 iLogCnt = 0;
            Int32 iPercent = 0;
            Int32 iFoundCnt = 0;
            Int32 iSourceID = 0;
            ArrayList alFiles;
            ArrayList alLoadedReestrs;
            string txtCurrPath = "";
            string txtAgreementCode = "ПФР_10_ПИЭВ";
            string txtAgentCode= "ПФР_10";
            string txtAgentDeptCode = "ПФР_10";
            int nPackType = 15; //Автозагрузка отчетов о взятии в обработку постановлений ПИЭВ, направленных в ПФ
            int nMonthPeriod = -12000; // имена уникальные - не нужно ничего чистить 1000 лет

            string txtMailServ = "mail10";

            ArrayList Strings;
            

            File_funcs ff = new File_funcs();
            try
            {
                string txtErrLog = "";
                ConG = new OleDbConnection(constrGIBDD);

                // 1. Получить список реестров

                alFiles = ff.GetReestrs(txtUploadDir, 1, 10, lLogger);

                // 2.1 Получить список уже загруженных файлов с уведомлениями
                //  со временем таких файлов будет очень много, но пока не будем менять количество месяцев поиска
                alLoadedReestrs = GetLoadedFiles(ConG, nMonthPeriod, txtAgreementCode, nPackType, lLogger);
                

                // 2.2 Загрузить файлы из alFiles и обработать их
                // пример имени файла opfr_86011654672069.xml
                foreach (string txtPath in alFiles)
                {
                    DataTable dtData;
                    // файл для загрузки отчетов в Инт. таблицу
                    dtData = this.GetSberReportTable();

                    txtCurrPath = txtPath;
                    // вычленить имя файла
                    if (txtPath.Length > 0)
                    {
                        string tablename = "";
                        string txtExt = "";
                        string txtFileDir = "";
                        string txtOspCode = "";
                        string txtRightOspCode = "opfr_86" + iDiv.ToString().PadLeft(2, '0');
                        string txtRightOspCodeM = "opfrm_86" + iDiv.ToString().PadLeft(2, '0');

                        txtExt = txtPath.Substring(txtPath.LastIndexOf(".") + 1).ToLower();
                        tablename = ff.GetTablename(txtPath, 4).Trim();
                        if (tablename.Length > 8)
                        {
                            txtOspCode = tablename.Substring(0, 9);
                            if ((txtOspCode != txtRightOspCode) && (tablename.Length > 9)) txtOspCode = tablename.Substring(0, 10);
                        }

                        // проверяем только реестры opfr_86*.xml
                        if (!alLoadedReestrs.Contains(tablename + '.' + txtExt)
                        && (txtExt.Length == 3) && (txtExt.ToUpper() == "XML")
                        && (tablename.ToLower().StartsWith("opfr_86")
                        || tablename.ToLower().StartsWith("opfrm_86"))
                        )
                        {
                            // нужно сделать контроль операторов сбера и сдать ошибку на почту если что не так:
                            // у сбербанка беда - некоторые файлы имеют обрезанные имена файлов - по 7 сиволов (не хватает символа месяца)
                            bool bEmailFilenameErr = false;
                            string txtSubj = "";
                            string txtMess = "";
                            txtSubj = "Внимание! Ошибка оператора ОПФР в имени файла с уведомлениями в реестре " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0');
                            txtMess = "Внимание! Ошибка оператора ОПФР в имени файла с уведомлениями обработки ПИЭВ постановлений в ОСП " + iDiv.ToString().PadLeft(2, '0');
                            txtMess += ". \n" + "Имя файла с уведомлениями: " + tablename + '.' + txtExt;
                            if (tablename.Length < 19)
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Длина имени файла составляет менее 19 символов.";
                            }

                            if (txtOspCode != txtRightOspCode)
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Неверный код ОСП в имени файла (фактически: " + txtOspCode + " | должно быть: " + txtRightOspCode + ").";
                            }

                            if ((txtExt.Length != 3) || (txtExt.ToUpper() != "XML"))
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Неверное расширение в имени файла (должно быть XML).";
                            }
                           
                        }


                        // если это наш файл
                        if (!alLoadedReestrs.Contains(tablename + '.' + txtExt)
                        && (txtExt.Length == 3) && (txtExt.ToUpper() == "XML")
                        && (tablename.ToLower().StartsWith("opfr_86")
                        || tablename.ToLower().StartsWith("opfrm_86"))
                        && ((txtOspCode == txtRightOspCode)
                        || (txtOspCode == txtRightOspCodeM))
                        )
                        {
                            con = new OleDbConnection(constrPKOSP);

                            txtFileDir = ff.GetFileDir(txtPath, 4);


                            Logger_ufssprk_tools lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 1, nPackType, txtAgreementCode, lLogger.logID, Convert.ToDecimal(iDiv), "Отчет о взятии в обработку постановлений ПИЭВ, направленных в ПФ.");

                            // записать в лог пакета дату и начало обработки
                            // а в какой лог? в лог автозагрузки или в лог пакета с квитанциями?
                            lLogger.WriteLLog(DateTime.Now + " начало обработки файла.\n");
                            lLogger.WriteLLog("Имя файла: " + txtPath + "\n");
                            // прочитать XML файл
                            // если это opfrm, то нужно сделать эскапирование
                            Encoding enc = Encoding.UTF8;
                            if(tablename.ToLower().StartsWith("opfrm_86")){
                                ff.FileStringReplace(txtPath, txtPath, "<O_IP_ACT_ZP>", "O_IP_ACT_ZP", enc);
                            }
                            DataTable dtXml = null;
                            dtXml = ff.ReadXML(txtPath);
                            
                            // записать информацию в таблицу dtData
                            if(dtXml != null && dtXml.Rows.Count > 0){
                                DataRow row = dtData.NewRow();
                                string txtParamValue = "";

                                decimal IP_ID = 0;
                                decimal nR_id = 0;
                                
                                if (dtXml.Columns.Contains("id"))
                                {
                                    txtParamValue = Convert.ToString(dtXml.Rows[0]["id"]);
                                    row["RESTRICTION_ID"] = Convert.ToDecimal(txtParamValue);

                                    nR_id = Convert.ToDecimal(txtParamValue);
                                    if (nR_id > 0)
                                        IP_ID = FindIP_ID_BY_OIP_ID(con, nR_id, lLogger); // найти по ip_id по id постановления
                                        // IP_ID = FindIP_ID_EXT_INFO_ID(con, nR_id, lLogger);
                                }

                                // <ProcNumberState>Постановление не принято к исполнению</ProcNumberState>
                                if (dtXml.Columns.Contains("ProcNumberState"))
                                {
                                    txtParamValue = Convert.ToString(dtXml.Rows[0]["ProcNumberState"]);
                                    row["INSIDE_INFORMATION"] = Convert.ToString(txtParamValue);
                                }

                                // <execProcNumber>44458/19/10001-ИП</execProcNumber>
                                if (dtXml.Columns.Contains("execProcNumber"))
                                {
                                    txtParamValue = Convert.ToString(dtXml.Rows[0]["execProcNumber"]);
                                    row["COMMENT"] = "Номер ИП: " + Convert.ToString(txtParamValue);

                                    string txtIpNo = txtParamValue.Trim();
                                    // если не нашли по ID счета (ext_information), искать будем по номеру ИП
                                    if (IP_ID == 0)
                                    {
                                        if (txtIpNo.Length > 0) IP_ID = FindIP_IDbyNum_AllStatusValid(con, txtIpNo, lLogger);

                                    }
                                }

                                // <DbtrName>ЛЮТЕНКО ВАЛЕРИЙ НИКОЛАЕВИЧ</DbtrName>
                                if (dtXml.Columns.Contains("DbtrName"))
                                {
                                    txtParamValue = Convert.ToString(dtXml.Rows[0]["DbtrName"]);
                                    row["COMMENT"] += " Должник: " + Convert.ToString(txtParamValue);
                                }


                                // <Status>10</Status>
                                if (dtXml.Columns.Contains("Status"))
                                {
                                    txtParamValue = Convert.ToString(dtXml.Rows[0]["Status"]).Trim();
                                    if(txtParamValue.Length > 0) row["COMMENT"] += " Статус: " + Convert.ToString(txtParamValue);
                                }

                                // <Prim>Прекращено ВЫЕЗД</Prim>
                                if (dtXml.Columns.Contains("Prim"))
                                {
                                    txtParamValue = Convert.ToString(dtXml.Rows[0]["Prim"]).Trim();
                                    if (txtParamValue.Length > 0) row["COMMENT"] += " Примечание: " + Convert.ToString(txtParamValue);
                                }

                                row["LEGAL_IMPOSSIBILITY"] = row["COMMENT"]; // скопировать COMMENT в поле LEGAL_IMPOSSIBILITY

                                row["DOC_DATE"] = DateTime.Today;

                                row["IP_ID"] = IP_ID;

                                // добавить собранную строчку в таблицу
                                dtData.Rows.Add(row);

                                lLogger2.UpdateLLogCount(1);
                                
                                // это делать будем после успешной записи в ИТ
                                //iLogCnt++;

                                // сразу записать здесь в ИТ
                                int iRowsW = -1;
                                //dtExtReport = this.MakeExtReportTable2(con, dtData, out nCancelRows, lLogger);
                                if (dtData != null && dtData.Rows.Count > 0)
                                {
                                    iRowsW = this.WriteExtReport(con, dtData, txtAgreementCode, txtAgentCode, txtAgentDeptCode, lLogger);
                                }
                                con.Dispose();

                                // конец чтения квитанции
                                if (iRowsW >= 0)
                                {
                                    lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);
                                    lLogger2.UpdateLLogStatus(2);
                                    lLogger2.UpdateLLogCount(iRowsW);
                                    iLogCnt++;
                                    // добавить в список alLoadedReestrs
                                    alLoadedReestrs.Add(tablename + '.' + txtExt);
                                    string txtMessage = DateTime.Now.ToString() + " Загружено " + iRowsW + "\tстрок из реестра квитанций c именем: " + tablename + '.' + txtExt;

                                    // записать в лог автозагрузки сколько строк загружено (txtMessage)
                                    lLogger.WriteLLog("\n" + txtMessage);

                                    txtMessage += "\n Реестр загружен из файла по пути: " + txtCurrPath;
                                    ff.WriteTofile(txtMessage, txtLogFileName);
                                    // в ОСП не отправляем
                                    // ff.SendEmail(txtMessage, "Загрузка реестра оплаченных штрафов МВД", txtOspEmail, txtAdminEmail, txtMailServ, "");

                                    // если строк было больше 0, а загружено 0, то написать на email что это ошибка
                                    if ((iRowsW == 0) && (dtData != null) && (dtData.Rows.Count > 0))
                                    {
                                        //если загружено 0, то это Ошибка, надо с ней бороться
                                        txtMessage += " \n Необходимо проверить содержимое файла, т.к. не удалось загрузить ни одной строки!";
                                        ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки квитанций от ПФР из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                    }
                                }
                            }
                            else {
                                lLogger2.UpdateLLogCount(1);
                            }
                            // сохранить сообщение об ощибке
                            if (lLogger2.ErrMessage.Length > 0) lLogger.ErrMessage += lLogger2.ErrMessage;
                        }
                      }
                      else
                      {
                            // если файл не прошел по контролю имени файла или был уже загружен
                            ;
                      }
                } // end foreach 

                // пишем в Лог отчет что все загружено. Сколько всего отработано и письмо в электр. почту
                // все это на уровне выше
                
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.WriteTofile(DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, txtLogFileName);
                    string txtMessage = "Возникла ошибка при попытке загрузить квитанции из Сбербанка по пути " + txtCurrPath;
                    txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки квитанций от ПФР в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                }
                return iLogCnt;
            }
            catch (Exception ex)
            {
                //if (DBFcon != null) DBFcon.Close();
                lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка приложения (AutoLoadPfrRespIn). Message: " + ex.ToString();
                ff.WriteTofile(DateTime.Now.ToString() + " Ошибка приложения (AutoLoadPfrRespIn). Message: " + ex.ToString(), txtLogFileName);
                string txtMessage = "Возникла ошибка при попытке загрузить реестр по пути " + txtCurrPath;
                txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка приложения (AutoLoadPfrRespIn). Message: " + ex.ToString();
                ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки квитанций от ПФР в ОСП  " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                return iLogCnt;
            }

            return iLogCnt;



        }

        public int AutoLoadSberKvit(string constrGIBDD, string constrPKOSP, string txtUploadDir, string txtLogFileName, int iDiv, string txtOspEmail, string txtAdminEmail, Logger_ufssprk_tools lLogger)
        {
            // в Local_Logs есть поле Filename, среди логов с типом 10 будем искать свой, с нужным именем
            // важно - год, год от года могут повторяться, поэтому нужно смотреть год в поле packdate
            // год брать только и брать только даты не старше чем 6 мес назад?
            // А леше нарезать заявку все что старше чем 6 мес чистить по планировщику.


            OleDbConnection ConG, con;
            Int32 iCnt = 0;
            Int32 iLogCnt = 0;
            Int32 iPercent = 0;
            Int32 iFoundCnt = 0;
            Int32 iSourceID = 0;
            ArrayList alFiles;
            ArrayList alLoadedReestrs;
            string txtCurrPath = "";
            string txtAgreementCode = "СБЕР_ЭДО_10";
            int nPackType = 10;
            int nMonthPeriod = -6;

            string txtMailServ = "mail10";
            
            ArrayList Strings;
            DataTable dtData;

            File_funcs ff = new File_funcs();
            try
            {
                string txtErrLog = "";
                ConG = new OleDbConnection(constrGIBDD);

                // 1. Получить список реестров

                alFiles = ff.GetReestrs(txtUploadDir, 1, 10, lLogger);

                // 2.1 Получить список уже загруженных файлов с квитанциями
                alLoadedReestrs = GetLoadedFiles(ConG, nMonthPeriod, txtAgreementCode, nPackType, lLogger);

                // 2.2 Загрузить файлы из alFiles в GIBDD_PLATEZH, 
                foreach (string txtPath in alFiles)
                {
                    txtCurrPath = txtPath;
                    // вычленить имя файла
                    if (txtPath.Length > 0)
                    {
                        string tablename = "";
                        string txtExt = "";
                        string txtFileDir = "";
                        string txtOspCode = "";
                        string txtRightOspCode = "10" + iDiv.ToString().PadLeft(2, '0');

                        txtExt = txtPath.Substring(txtPath.LastIndexOf(".") + 1).ToLower();
                        tablename = ff.GetTablename(txtPath, 4).Trim();
                        if (tablename.Length > 4)
                        {
                            txtOspCode = tablename.Substring(1, 4);
                        }

                        // проверяем только реестры U*.xSS
                        if (!alLoadedReestrs.Contains(tablename + '.' + txtExt)
                        && (txtExt.Length == 3) && (txtExt.Substring(1).ToUpper() == "SS")
                        && tablename.ToUpper().StartsWith("U"))
                        {
                            // нужно сделать контроль операторов сбера и сдать ошибку на почту если что не так:
                            // у сбербанка беда - некоторые файлы имеют обрезанные имена файлов - по 7 сиволов (не хватает символа месяца)
                            bool bEmailFilenameErr = false;
                            string txtSubj = "";
                            string txtMess = "";
                            txtSubj = "Внимание! Ошибка оператора Сбербанка в имени файла квитанций реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0');
                            txtMess = "Внимание! Ошибка оператора Сбербанка в имени файла квитанций реестра в ОСП " + iDiv.ToString().PadLeft(2, '0');
                            txtMess += ". \n" + "Имя файла с квитанциями: " + tablename + '.' + txtExt;
                            if (tablename.Length < 8)
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Длина имени файла составляет менее 8 символов.";
                            }

                            if (txtOspCode != txtRightOspCode)
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Неверный код ОСП в имени файла (фактически: " + txtOspCode + " | должно быть: " + txtRightOspCode + ").";
                            }

                            if ((txtExt.Length != 3) || (txtExt.Substring(1).ToUpper() != "SS"))
                            {
                                bEmailFilenameErr = true;
                                txtMess += " \n" + "Неверное расширение в имени файла.";
                            }

                            // отправить сообщение об ошибке в имени реестра если реестр еще не был загружен
                            if (bEmailFilenameErr)
                            {
                                txtMess += " \nФайл загружен по пути: " + txtPath;

                                // записываем чтобы повторно не информировать об ошибке каждый день
                                // pack_status = 2000 когда ошибка в имени файла после 12.11.2015 (до этого была 1000).
                                // pack_status = 1000 когда файл выглядит бинарным
                                // pack_status = -1000 когда файл был помечен как бинарный или с ошибкой, но потом его сбросили чтобы обработать повторно, т.к. выяснилось что это было некорректно (в части бинарных файлов)
                                // для сброса использовался такой sql:
                                // update local_logs ll set ll.pack_status  = -1000
                                // where ll.pack_type = 10 and ll.conv_code = 'СБЕР_ЭДО_10' and '12.05.2015' < ll.packdate and ll.pack_status = 1000
                                Logger_ufssprk_tools lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 2000, 10, txtAgreementCode, 0, Convert.ToDecimal(iDiv), "Пакет квитанций из Сбербанка о принятии в обработку постановлений.\n" + txtMess);
                                lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);

                                // отправляем Email
                                ff.SendEmail(txtMess, txtSubj, txtAdminEmail, txtAdminEmail, txtMailServ, "");
                            }
                        }




                        // если это наш файл
                        if ((!alLoadedReestrs.Contains(tablename + '.' + txtExt))
                        &&  (txtExt.Length == 3) && (txtExt.Substring(1).ToUpper() == "SS")
                        && (tablename.Length == 8) && tablename.ToUpper().StartsWith("U")
                        && (txtOspCode == txtRightOspCode))
                        {
                            // 20151116 - убрать проверку, т.к. по каки-то причинам она дает неверные срабатывания.
                            /*
                            if (ff.isBinary(txtPath))
                            {
                                // если файл бинарный - надо записать влог его имя, чтобы повторно уже не пытаться обработать, или это бред - старые почистить 1 раз да и ладно?
                                // статус - 1000, это значит что файл бинарный
                                Logger_ufssprk_tools lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 1000, 10, txtAgreementCode, 0, Convert.ToDecimal(iDiv), "Пакет квитанций из Сбербанка о принятии в обработку постановлений. Бинарный файл в обработку не идет, это старый XLS формат.");
                                lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);
                                
                                string txtSubj = "";
                                string txtMess = "";
                                txtSubj = "Внимание! Ошибка данных в реестре квитанций от Сбербанка " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0');
                                txtMess = "Внимание! Ошибка данных в реестре квитанций от Сбербанка в ОСП " + iDiv.ToString().PadLeft(2, '0');
                                txtMess += ". \n" + "Имя файла с квитанциями: " + tablename + '.' + txtExt;
                                txtMess += ". \nФайл загружен по пути: " + txtPath;
                                txtMess += ". \n" + "Файл бинарный";
                                ff.SendEmail(txtMess, txtSubj, txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                
                                // добавить в список alLoadedReestrs - чтобы повторно не обрабатывать если их много таких в папках окажется
                                alLoadedReestrs.Add(tablename + '.' + txtExt);
                            }
                            else
                            {
                            */
                            // получить каталог
                                txtFileDir = ff.GetFileDir(txtPath, 4);


                                Logger_ufssprk_tools lLogger2 = new Logger_ufssprk_tools(constrGIBDD, 1, 10, txtAgreementCode, 0, Convert.ToDecimal(iDiv), "Пакет квитанций из Сбербанка о принятии в обработку постановлений.");

                                // искать родительский файл-реестр
                                decimal nParent_ID = lLogger2.GetLogByFileName(9, "СБЕР_ЭДО_10", 'P' + tablename.Substring(1) + '.' + txtExt, -8);
                                if (nParent_ID > 0) lLogger2.UpdateLLogParent(nParent_ID);

                                // записать в лог пакета дату и начало обработки
                                // а в какой лог? в лог автозагрузки или в лог пакета с квитанциями?
                                lLogger.WriteLLog(DateTime.Now + " начало обработки пакета квитанций.\n");
                                lLogger.WriteLLog("Обрабатывается файл: " + txtPath + "\n");


                                // прочитать все строки из файла кодировка UTF-8 в соотв-ии с соглашением
                                Strings = ff.ReadPaths(txtPath, Encoding.UTF8, lLogger2);
                                dtData = this.GetSberKvitTable();

                                // разбить строку на массив и записать в таблицу dtData
                                // разбить все просто по | не получится
                                // нужно еще учитывать имена параметров
                                // значит в 2 этапа - сначала просто разделитель, потом трансляция имени поля и значения
                                string[] words;
                                for (int j = 0; j <= Strings.Count - 1; j++)
                                {
                                    // если строка по формату является данным, а не ЭП
                                    if (Strings[j].ToString().StartsWith("| id=") && !Strings[j].ToString().StartsWith("| id=null"))
                                    {
                                        DataRow row = dtData.NewRow();
                                        words = Convert.ToString(Strings[j]).Split('|');
                                        for (int wi = 0; wi < words.Length; wi++)
                                        {
                                            string[] subwords = words[wi].Split('=');
                                            if (subwords.Length > 1)
                                            {
                                                string txtParamName = subwords[0].Trim();
                                                string txtParamValue = subwords[1].Trim();
                                                if (dtData.Columns.Contains(txtParamName))
                                                {
                                                    switch (txtParamName)
                                                    {
                                                        case "id": row[txtParamName] = Convert.ToDecimal(txtParamValue); break;
                                                        case "summ": row[txtParamName] = Convert.ToDecimal(txtParamValue.Replace('.', ',')); break;
                                                        case "Status": row[txtParamName] = Convert.ToInt32(txtParamValue); break;
                                                        default: row[txtParamName] = txtParamValue; break;
                                                    }
                                                }
                                            }
                                        }
                                        // добавить собранную строчку в таблицу
                                        dtData.Rows.Add(row);
                                    }
                                }

                                int iRowsW = -1;
                                decimal nTotalRows = 0;
                                decimal nCancelRows = 0;
                                if (dtData != null && dtData.Rows.Count > 0) nTotalRows = dtData.Rows.Count;

                                // в связи с тем, что много отказов и если в постановлении счета 2 раза указываются, то приходит отказ
                                // временно убираю загрузку отказов совсем!
                                // ЛТП 1 № 16021

                                DataTable dtExtReport = null;
                                con = new OleDbConnection(constrPKOSP);
                                dtExtReport = this.MakeExtReportTable2(con, dtData, out nCancelRows, lLogger);
                                if (dtExtReport != null)
                                {
                                    iRowsW = this.WriteExtReport(con, dtExtReport, lLogger);
                                }
                                con.Dispose();


                                // задача проверить, не слишком ли много отказов в файле
                                // считаем так - dtExtReport.Rows.Count - это количество отказов
                                // dtData.Rows.Count - это количество строк всего в файле
                                // если количество отказов больше 70% и строк в файле больше чем 10
                                // или строк 10 и менее и отказов 100% - то написать Email с ошибкой

                                if (nTotalRows > 0)
                                {
                                    if ((nTotalRows > 10 && Convert.ToDouble(nCancelRows / nTotalRows) > 0.7)
                                     || (nTotalRows <= 10 && nTotalRows == nCancelRows))
                                    {
                                        string txtText = "Внимание, слишком много отказов:\n " + nCancelRows.ToString() + " отказов из " + nTotalRows.ToString() + "строк всего.";
                                        ff.SendEmail(txtText, "Внимание! Ошибка: слишком много отказов в квитанциях от Сбербанка из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                    }
                                }


                                // ShowLoggerError(lLogger); // вывод сообщения об ошибке, если она вдруг случилась внутри вызванной функции
                                
                                // 20150312
                                // квитанции больше не грузим
                                //if (dtData != null)
                                //{
                                //    con = new OleDbConnection(constrPKOSP);
                                //    iRowsW = this.WriteExtKvit(con, dtData, lLogger2);
                                //    con.Dispose();
                                //    //if (!ShowLoggerError(lLogger)) // вывод сообщения об ошибке, если она вдруг случилась внутри вызванной функции
                                //    //    MessageBox.Show("Успешно обработано квитанций из Сбербанка о взятии в обработку постановлений СПИ: " + iRowsW.ToString() + ".\n", "Сообщение", MessageBoxButtons.OK);
                                //}

                                // конец чтения квитанции
                                if (iRowsW >= 0)
                                {
                                    lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);
                                    lLogger2.UpdateLLogStatus(2);
                                    lLogger2.UpdateLLogCount(iRowsW);
                                    iLogCnt++;
                                    // добавить в список alLoadedReestrs
                                    alLoadedReestrs.Add(tablename + '.' + txtExt);
                                    string txtMessage = DateTime.Now.ToString() + " Загружено " + iRowsW + "\tстрок из реестра квитанций номер: " + tablename + '.' + txtExt;

                                    // записать в лог автозагрузки сколько строк загружено (txtMessage)
                                    lLogger.WriteLLog("\n" + txtMessage);

                                    txtMessage += "\n Реестр загружен из файла по пути: " + txtCurrPath;
                                    ff.WriteTofile(txtMessage, txtLogFileName);
                                    // в ОСП не отправляем
                                    // ff.SendEmail(txtMessage, "Загрузка реестра оплаченных штрафов МВД", txtOspEmail, txtAdminEmail, txtMailServ, "");
                                    
                                    // если строк было больше 0, а загружено 0, то написать на email что это ошибка
                                    if ((iRowsW == 0) && (dtData != null) && (dtData.Rows.Count > 0))
                                    {
                                        //если загружено 0, то это Ошибка, надо с ней бороться
                                        txtMessage += " \n Необходимо проверить содержимое файла, т.к. не удалось загрузить ни одной строки!";
                                        ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки квитанций от Сбербанка из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                    }
                                    else
                                    {
                                        ff.SendEmail(txtMessage, "Загрузка квитанций от Сбербанка из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                    }
                                }
                                else if (iRowsW == 0)
                                {
                                    //если загружено 0, то это Ошибка, надо с ней бороться
                                    lLogger2.UpdateLLogFileName(tablename + '.' + txtExt);
                                    lLogger2.UpdateLLogStatus(2);
                                    lLogger2.UpdateLLogCount(iRowsW);
                                    iLogCnt++;
                                    // добавить в список alLoadedReestrs
                                    alLoadedReestrs.Add(tablename + '.' + txtExt);
                                    string txtMessage = DateTime.Now.ToString() + " Загружено " + iRowsW + "\tстрок из реестра квитанций номер: " + tablename + '.' + txtExt;
                                    // записать в лог автозагрузки сколько строк загружено (txtMessage)
                                    lLogger.WriteLLog("\n" + txtMessage);

                                    txtMessage += "\n Реестр загружен из файла по пути: " + txtCurrPath;
                                    ff.WriteTofile(txtMessage, txtLogFileName);
                                    // в ОСП не отправляем
                                    // ff.SendEmail(txtMessage, "Загрузка реестра оплаченных штрафов МВД", txtOspEmail, txtAdminEmail, txtMailServ, "");
                                    ff.SendEmail(txtMessage, "Загрузка квитанций от Сбербанка из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");

                                }

                                if (lLogger2.ErrMessage.Length > 0)
                                {
                                    ff.SendEmail(lLogger2.ErrMessage, "Внимание! Ошибка загрузки квитанций от Сбербанка из реестра " + tablename + '.' + txtExt + " в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                }
                            // } end else - который если файл не бинарный, а хороший
                        }
                        else
                        {
                            // если файл не прошел по контролю имени файла или был уже загружен
                            ;
                        }
                    }
                }
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.WriteTofile(DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, txtLogFileName);
                    string txtMessage = "Возникла ошибка при попытке загрузить квитанции из Сбербанка по пути " + txtCurrPath;
                    txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки квитанций от Сбербанка в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                }
                return iLogCnt;
            }
            catch (Exception ex)
            {
                //if (DBFcon != null) DBFcon.Close();
                lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка приложения (AutoLoadSberKvit). Message: " + ex.ToString();
                ff.WriteTofile(DateTime.Now.ToString() + " Ошибка приложения (AutoLoadSberKvit). Message: " + ex.ToString(), txtLogFileName);
                string txtMessage = "Возникла ошибка при попытке загрузить реестр по пути " + txtCurrPath;
                txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка приложения (AutoLoadSberKvit). Message: " + ex.ToString();
                ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки квитанций от Сбербанка в ОСП  " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                return iLogCnt;
            }

            return iLogCnt;
                        

            
        }

        public int AutoLoadGibddReestrs(string constrGIBDD, string txtUploadDirGibdd, string txtLogFileName, int iDiv, string txtOspEmail, string txtAdminEmail, Logger_ufssprk_tools lLogger)
        {
            int iContrSource = 1;// источник - 1 МВД; 2 - РИЦ ЖХ
            decimal nUserID = 8992; // SYSDBA
            decimal nContrID = 0; // код контрагента (МВД, РИЦ ЖХ)

            OleDbConnection ConG, con;
            Int32 iCnt = 0;
            Int32 iLogCnt = 0;
            Int32 iPercent = 0;
            Int32 iFoundCnt = 0;
            Int32 iSourceID = 0;
            ArrayList alFiles;
            ArrayList alLoadedReestrs;
            string txtCurrPath = "";
            string txtMailServ = "mail10";

            File_funcs ff = new File_funcs();
            try
            {
                ConG = new OleDbConnection(constrGIBDD);

                // 1. Получить список реестров
                
                alFiles = ff.GetReestrs(txtUploadDirGibdd, 1, 10, lLogger);

                // 2.1 Получить список уже загруженных реестров ГИБДД
                alLoadedReestrs = GetLoadedReestrs(ConG, iContrSource, lLogger);

                // 2.2 Загрузить файлы из alFiles в GIBDD_PLATEZH, 
                foreach (string txtPath in alFiles)
                {
                    txtCurrPath = txtPath;
                    // вычленить имя файла
                    if (txtPath.Length > 0)
                    {
                        string tablename = "";
                        string txtExt = "";
                        string txtDateIsh = "";
                        DateTime dtDateIsh;
                        string txtFileDir = "";
                        string txtSql = "";


                        txtExt = txtPath.Substring(txtPath.LastIndexOf(".") + 1);
                        // если это dbf
                        if (txtExt.ToUpper().Equals("DBF"))
                        {


                            tablename = ff.GetTablename(txtPath, 4);

                            // вычленить из имени файла дату исх. документа (реестра)
                            // проверить что имя правильной длины
                            tablename = tablename.Trim();
                            dtDateIsh = ff.GetDateFromReverseString(tablename);

                            // получить каталог
                            txtFileDir = ff.GetFileDir(txtPath, 4);

                            // вычленить из имени файла исх номер документа
                            string txtIshNumber = "";
                            //if (tablename.Length > 9)
                            //{
                            //    txtIshNumber = tablename.Substring(9, tablename.Length - 9);
                            //}

                            // новый формат txtIshNumber = дата_старый_исх.номер = tablename
                            txtIshNumber = tablename;

                            txtSql = "SELECT * FROM " + tablename + " WHERE LEN(RTRIM(NUMBER)) > 0";

                            // проверить по имени файла что он не загружен
                            if (!alLoadedReestrs.Contains(txtIshNumber))
                            {
                                // если не загружен то загрузить bp DBF данные 
                                DataTable tblReestr = null;
                                tblReestr = ReadDbfFile(txtPath, 4, txtSql, lLogger);
                                //tblReestr = GetDbfTable(txtSql, "GIBDD_PLATEZH", txtPath, txtFileDir, tablename);

                                // загрузить данные об оплаченном штрафе МВД из DBF в таблицу PLATEZH
                                DataTable dtGibddPlat = FillMvdDataToPlatezhTable(tblReestr, iContrSource, txtIshNumber, dtDateIsh, txtPath, lLogger);

                                // Если данные загружены в шаблонную таблицу, можно их вставить в БД
                                if (dtGibddPlat != null && dtGibddPlat.Rows.Count > 0)
                                {
                                    iCnt = InsertPlatTable(dtGibddPlat, ConG, iContrSource, txtIshNumber, dtDateIsh, lLogger);

                                    if (iCnt >= 0)
                                    {
                                        iLogCnt++;
                                        // добавить в список alLoadedReestrs
                                        alLoadedReestrs.Add(txtIshNumber);
                                        string txtMessage = DateTime.Now.ToString() + " Загружено " + iCnt + "\tстрок реестра номер: " + txtIshNumber;
                                        txtMessage += "\n Реестр загружен из файла по пути: " + txtCurrPath;
                                        ff.WriteTofile(txtMessage, txtLogFileName);
                                        ff.SendEmail(txtMessage, "Загрузка реестра оплаченных штрафов МВД", txtOspEmail, txtAdminEmail, txtMailServ, "");
                                        ff.SendEmail(txtMessage, "Загрузка реестра " + txtIshNumber + " оплаченных штрафов МВД ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                        // необходимо проверить были ли ошибки
                                        // если были - то записать в лог (в б.д.), в файл, отправить e-mail
                                        lLogger.WriteLLog(txtMessage);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.WriteTofile(DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, txtLogFileName);
                    string txtMessage = "Возникла ошибка при попытке загрузить реестр по пути " + txtCurrPath;
                    txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки реестра оплаченных штрафов МВД в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                }
                return iLogCnt;
            }
            catch (Exception ex)
            {
                //if (DBFcon != null) DBFcon.Close();
                lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString();
                ff.WriteTofile(DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString(), txtLogFileName);
                string txtMessage = "Возникла ошибка при попытке загрузить реестр по пути " + txtCurrPath;
                txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString();
                ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки реестра оплаченных штрафов МВД в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                return iLogCnt;
            }

            return iLogCnt;
        }

        public int AutoLoadRicZHReestrs(string constrGIBDD, string txtUploadDirGibdd, string txtLogFileName, int iDiv, string txtOspEmail, string txtAdminEmail, Logger_ufssprk_tools lLogger)
        {
            int iContrSource = 2;// источник - 1 МВД; 2 - РИЦ ЖХ
            decimal nUserID = 8992; // SYSDBA
            decimal nContrID = 0; // код контрагента (МВД, РИЦ ЖХ)

            OleDbConnection ConG, con;
            Int32 iCnt = 0;
            Int32 iLogCnt = 0;
            Int32 iPercent = 0;
            Int32 iFoundCnt = 0;
            Int32 iSourceID = 0;
            ArrayList alFiles;
            ArrayList alLoadedReestrs;
            string txtCurrPath = "";
            string txtMailServ = "mail10";

            File_funcs ff = new File_funcs();
            try
            {
                ConG = new OleDbConnection(constrGIBDD);

                // 1. Получить список реестров

                alFiles = ff.GetReestrs(txtUploadDirGibdd, 1, 10, lLogger);

                // 2.1 Получить список уже загруженных реестров ГИБДД
                alLoadedReestrs = GetLoadedReestrs(ConG, iContrSource, lLogger);

                // 2.2 Загрузить файлы из alFiles в GIBDD_PLATEZH, 
                foreach (string txtPath in alFiles)
                {
                    txtCurrPath = txtPath;
                    // вычленить имя файла
                    if (txtPath.Length > 0)
                    {
                        string tablename = "";
                        string txtExt = "";
                        DateTime dtDateIsh;
                        string txtFileDir = "";
                        string txtSql = "";


                        txtExt = txtPath.Substring(txtPath.LastIndexOf(".") + 1);
                        tablename = ff.GetTablename(txtPath, 4);

                        // если это dbf и он начинается с R
                        if (txtExt.ToUpper().Equals("DBF") && tablename[0].ToString().ToUpper().Equals("R"))
                        {
                            ff.ChangeByte(txtPath, 0x65, 30, lLogger);

                            // вычленить из имени файла дату исх. документа (реестра)
                            // т.к. тут первая буква выпадает, то нужно ее резать.
                            dtDateIsh = ff.GetDateFromReverseString(tablename.Substring(1));

                            // получить каталог
                            txtFileDir = ff.GetFileDir(txtPath, 4);

                            // вычленить из имени файла исх номер документа
                            string txtIshNumber = "";
                            //if (tablename.Length > 9)
                            //{
                            //    txtIshNumber = tablename.Substring(9, tablename.Length - 9);
                            //}

                            // новый формат txtIshNumber = дата_старый_исх.номер = tablename
                            // букву R отрезаем
                            txtIshNumber = tablename.Substring(1);

                            txtSql = "SELECT * FROM " + tablename + " WHERE LEN(RTRIM(NUMBER)) > 0";

                            // проверить по имени файла что он не загружен
                            if (!alLoadedReestrs.Contains(txtIshNumber))
                            {
                                // если не загружен то загрузить bp DBF данные 
                                DataTable tblReestr = null;
                                tblReestr = ReadDbfFile(txtPath, 4, txtSql, lLogger);
                                //tblReestr = GetDbfTable(txtSql, "GIBDD_PLATEZH", txtPath, txtFileDir, tablename);

                                // загрузить данные об оплаченном штрафе МВД из DBF в таблицу PLATEZH
                                DataTable dtGibddPlat = FillMvdDataToPlatezhTable(tblReestr, iContrSource, txtIshNumber, dtDateIsh, txtPath, lLogger);

                                // Если данные загружены в шаблонную таблицу, можно их вставить в БД
                                if (dtGibddPlat != null && dtGibddPlat.Rows.Count > 0)
                                {
                                    iCnt = InsertPlatTable(dtGibddPlat, ConG, iContrSource, txtIshNumber, dtDateIsh, lLogger);

                                    if (iCnt >= 0)
                                    {
                                        iLogCnt++;
                                        // добавить в список alLoadedReestrs
                                        alLoadedReestrs.Add(txtIshNumber);
                                        string txtMessage = DateTime.Now.ToString() + " Загружено " + iCnt + "\tстрок реестра номер: " + txtIshNumber;
                                        txtMessage += "\n Реестр загружен из файла по пути: " + txtCurrPath;
                                        ff.WriteTofile(txtMessage, txtLogFileName);
                                        //ff.SendEmail(txtMessage, "Загрузка реестра оплат РИЦ ЖХ", txtOspEmail, txtAdminEmail, txtMailServ, "");
                                        ff.SendEmail(txtMessage, "Загрузка реестра " + txtIshNumber + " оплат РИЦ ЖХ в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.WriteTofile(DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, txtLogFileName);
                    string txtMessage = "Возникла ошибка при попытке загрузить реестр по пути " + txtCurrPath;
                    txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки реестра оплат РИЦ ЖХ в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                }
                return iLogCnt;
            }
            catch (Exception ex)
            {
                //if (DBFcon != null) DBFcon.Close();
                lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString();
                ff.WriteTofile(DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString(), txtLogFileName);
                string txtMessage = "Возникла ошибка при попытке загрузить реестр по пути " + txtCurrPath;
                txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString();
                ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки реестра оплаченных штрафов МВД в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                return iLogCnt;
            }

            return iLogCnt;
        }

        public int AutoLoadKESKReestrs(string constrGIBDD, string txtUploadDirGibdd, string txtLogFileName, int iDiv, string txtOspEmail, string txtAdminEmail, Logger_ufssprk_tools lLogger)
        {
            int iContrSource = 6;// источник - 1 МВД; 2 - РИЦ ЖХ; 3 - КРЦ; 4 - РИЦ ЖХ ИНН; 5 - ЕИРЦ; 6 - КЭСК
            decimal nUserID = 8992; // SYSDBA
            decimal nContrID = 0; // код контрагента (МВД, РИЦ ЖХ)

            OleDbConnection ConG, con;
            Int32 iCnt = 0;
            Int32 iLogCnt = 0;
            Int32 iPercent = 0;
            Int32 iFoundCnt = 0;
            Int32 iSourceID = 0;
            ArrayList alFiles;
            ArrayList alLoadedReestrs;
            string txtCurrPath = "";
            string txtMailServ = "mail10";

            File_funcs ff = new File_funcs();
            try
            {
                ConG = new OleDbConnection(constrGIBDD);

                // 1. Получить список реестров

                alFiles = ff.GetReestrs(txtUploadDirGibdd, 1, 10, lLogger);

                // 2.1 Получить список уже загруженных реестров ГИБДД
                alLoadedReestrs = GetLoadedReestrs(ConG, iContrSource, lLogger);

                // 2.2 Загрузить файлы из alFiles в GIBDD_PLATEZH, 
                foreach (string txtPath in alFiles)
                {
                    txtCurrPath = txtPath;
                    // вычленить имя файла
                    if (txtPath.Length > 0)
                    {
                        string tablename = "";
                        string txtExt = "";
                        DateTime dtDateIsh;
                        string txtFileDir = "";
                        string txtSql = "";


                        txtExt = txtPath.Substring(txtPath.LastIndexOf(".") + 1);
                        tablename = ff.GetTablename(txtPath, 4);

                        // если это dbf и он начинается с R
                        if (txtExt.ToUpper().Equals("CSV") && tablename.Length > 5 && tablename.Substring(0, 5).ToUpper().Equals("KESK_"))
                        {
                            //ff.ChangeByte(txtPath, 0x65, 30, lLogger);

                            // вычленить из имени файла дату исх. документа (реестра)
                            // т.к. тут первая буква выпадает, то нужно ее резать.
                            dtDateIsh = ff.GetDateFromReverseString(tablename.Substring(5));

                            // получить каталог
                            txtFileDir = ff.GetFileDir(txtPath, 4);

                            // вычленить из имени файла исх номер документа
                            string txtIshNumber = tablename;
                            //if (tablename.Length > 9)
                            //{
                            //    txtIshNumber = tablename.Substring(9, tablename.Length - 9);
                            //}

                            // новый формат txtIshNumber = дата_старый_исх.номер = tablename
                            // букву R отрезаем
                            //txtIshNumber = tablename.Substring(1);
                            // ничего не отрезаем - ни к чему
                            
                            // SQL не нужен
                            //txtSql = "SELECT * FROM " + tablename + " WHERE LEN(RTRIM(NOM_ID)) > 0";

                            // проверить по имени файла что он не загружен
                            if (!alLoadedReestrs.Contains(txtIshNumber))
                            {
                                // если не загружен то загрузить bp DBF данные 
                                DataTable tblReestr = null;
                                // т.к. теперь реестр нельзя прочитать, то нужно его создать и заполнить
                                // это все сделает функция которая заполняет файл

                                // tblReestr = ReadDbfFile(txtPath, 4, txtSql, lLogger);

                                // прочитать туда данные 
                                //tblReestr = GetDbfTable(txtSql, "GIBDD_PLATEZH", txtPath, txtFileDir, tablename);

                                // загрузить данные об оплатах КЭСК из CSV в таблицу PLATEZH
                                //DataTable dtKRCPlat = FillKrcDataToPlatezhTable(tblReestr, iContrSource, txtIshNumber, dtDateIsh, lLogger);
                                DataTable dtKeskPlat = null;
                                dtKeskPlat = FillPlatezhTableFromKeskFile(txtPath, iContrSource, txtIshNumber, dtDateIsh, lLogger);


                                // Если данные загружены в шаблонную таблицу, можно их вставить в БД
                                if (dtKeskPlat != null && dtKeskPlat.Rows.Count > 0)
                                {
                                    iCnt = InsertPlatTable(dtKeskPlat, ConG, iContrSource, txtIshNumber, dtDateIsh, lLogger);

                                    if (iCnt >= 0)
                                    {
                                        iLogCnt++;
                                        // добавить в список alLoadedReestrs
                                        alLoadedReestrs.Add(txtIshNumber);
                                        string txtMessage = DateTime.Now.ToString() + " Загружено " + iCnt + "\tстрок реестра номер: " + txtIshNumber;
                                        txtMessage += "\n Реестр загружен из файла по пути: " + txtCurrPath;
                                        ff.WriteTofile(txtMessage, txtLogFileName);
                                        // пока комментирую на тестировании
                                        //ff.SendEmail(txtMessage, "Загрузка реестра оплат КЭСК", txtOspEmail, txtAdminEmail, txtMailServ, "");
                                        
                                        ff.SendEmail(txtMessage, "Загрузка реестра " + txtIshNumber + " оплат КЭСК в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.WriteTofile(DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, txtLogFileName);
                    string txtMessage = "Возникла ошибка при попытке загрузить реестр по пути " + txtCurrPath;
                    txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки реестра оплат КЭСК в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                }
                return iLogCnt;
            }
            catch (Exception ex)
            {
                //if (DBFcon != null) DBFcon.Close();
                lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString();
                ff.WriteTofile(DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString(), txtLogFileName);
                string txtMessage = "Возникла ошибка при попытке загрузить реестр по пути " + txtCurrPath;
                txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString();
                ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки реестра оплат КЭСК в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                return iLogCnt;
            }

            return iLogCnt;
        }

        public int AutoLoadTGK1Reestrs(string constrGIBDD, string txtUploadDirGibdd, string txtLogFileName, int iDiv, string txtOspEmail, string txtAdminEmail, Logger_ufssprk_tools lLogger)
        {
            int iContrSource = 7;// источник - 1 МВД; 2 - РИЦ ЖХ; 3 - КРЦ; 4 - РИЦ ЖХ ИНН; 5 - ЕИРЦ; 6 - КЭСК; 7 - ТГК1
            decimal nUserID = 8992; // SYSDBA
            decimal nContrID = 0; // код контрагента (МВД, РИЦ ЖХ)

            OleDbConnection ConG, con;
            Int32 iCnt = 0;
            Int32 iLogCnt = 0;
            Int32 iPercent = 0;
            Int32 iFoundCnt = 0;
            Int32 iSourceID = 0;
            ArrayList alFiles;
            ArrayList alLoadedReestrs;
            string txtCurrPath = "";
            string txtMailServ = "mail10";

            File_funcs ff = new File_funcs();
            try
            {
                ConG = new OleDbConnection(constrGIBDD);

                // 1. Получить список реестров

                alFiles = ff.GetReestrs(txtUploadDirGibdd, 1, 10, lLogger);

                // 2.1 Получить список уже загруженных реестров ГИБДД
                alLoadedReestrs = GetLoadedReestrs(ConG, iContrSource, lLogger);

                // 2.2 Загрузить файлы из alFiles в GIBDD_PLATEZH, 
                foreach (string txtPath in alFiles)
                {
                    txtCurrPath = txtPath;
                    // вычленить имя файла
                    if (txtPath.Length > 0)
                    {
                        string tablename = "";
                        string txtExt = "";
                        DateTime dtDateIsh;
                        string txtFileDir = "";
                        string txtSql = "";


                        txtExt = txtPath.Substring(txtPath.LastIndexOf(".") + 1);
                        tablename = ff.GetTablename(txtPath, 4);

                        // если это dbf и он начинается с R
                        if (txtExt.ToUpper().Equals("CSV") && tablename.Length > 5 && tablename.Substring(0, 5).ToUpper().Equals("TGK1_"))
                        {
                            //ff.ChangeByte(txtPath, 0x65, 30, lLogger);

                            // вычленить из имени файла дату исх. документа (реестра)
                            // т.к. тут первая буква выпадает, то нужно ее резать.
                            dtDateIsh = ff.GetDateFromReverseString(tablename.Substring(5));

                            // получить каталог
                            txtFileDir = ff.GetFileDir(txtPath, 4);

                            // вычленить из имени файла исх номер документа
                            string txtIshNumber = tablename;
                            //if (tablename.Length > 9)
                            //{
                            //    txtIshNumber = tablename.Substring(9, tablename.Length - 9);
                            //}

                            // новый формат txtIshNumber = дата_старый_исх.номер = tablename
                            // букву R отрезаем
                            //txtIshNumber = tablename.Substring(1);
                            // ничего не отрезаем - ни к чему

                            // SQL не нужен
                            //txtSql = "SELECT * FROM " + tablename + " WHERE LEN(RTRIM(NOM_ID)) > 0";

                            // проверить по имени файла что он не загружен
                            if (!alLoadedReestrs.Contains(txtIshNumber))
                            {
                                // если не загружен то загрузить bp DBF данные 
                                DataTable tblReestr = null;
                                // т.к. теперь реестр нельзя прочитать, то нужно его создать и заполнить
                                // это все сделает функция которая заполняет файл

                                // tblReestr = ReadDbfFile(txtPath, 4, txtSql, lLogger);

                                // прочитать туда данные 
                                //tblReestr = GetDbfTable(txtSql, "GIBDD_PLATEZH", txtPath, txtFileDir, tablename);

                                // загрузить данные об оплатах КЭСК из CSV в таблицу PLATEZH
                                //DataTable dtKRCPlat = FillKrcDataToPlatezhTable(tblReestr, iContrSource, txtIshNumber, dtDateIsh, lLogger);
                                DataTable dtTGK1Plat = null;
                                // dtKeskPlat = FillPlatezhTableFromKeskFile(txtPath, iContrSource, txtIshNumber, dtDateIsh, lLogger);
                                //dtTGK1Plat = FillPlatezhTableFromTGK1File1(txtPath, iContrSource, txtIshNumber, dtDateIsh, lLogger);
                                
                                 dtTGK1Plat = FillPlatezhTableFromTGK1File(txtPath, iContrSource, txtIshNumber, dtDateIsh, lLogger);
                                


                                // Если данные загружены в шаблонную таблицу, можно их вставить в БД
                                if (dtTGK1Plat != null && dtTGK1Plat.Rows.Count > 0)
                                {
                                    iCnt = InsertPlatTable(dtTGK1Plat, ConG, iContrSource, txtIshNumber, dtDateIsh, lLogger);

                                    if (iCnt >= 0)
                                    {
                                        iLogCnt++;
                                        // добавить в список alLoadedReestrs
                                        alLoadedReestrs.Add(txtIshNumber);
                                        string txtMessage = DateTime.Now.ToString() + " Загружено " + iCnt + "\tстрок реестра номер: " + txtIshNumber;
                                        txtMessage += "\n Реестр загружен из файла по пути: " + txtCurrPath;
                                        ff.WriteTofile(txtMessage, txtLogFileName);
                                        // пока комментирую на тестировании
                                        //ff.SendEmail(txtMessage, "Загрузка реестра оплат КЭСК", txtOspEmail, txtAdminEmail, txtMailServ, "");

                                        ff.SendEmail(txtMessage, "Загрузка реестра " + txtIshNumber + " оплат ТГК-1 в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.WriteTofile(DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, txtLogFileName);
                    string txtMessage = "Возникла ошибка при попытке загрузить реестр по пути " + txtCurrPath;
                    txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки реестра оплат ТГК1 в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                }
                return iLogCnt;
            }
            catch (Exception ex)
            {
                //if (DBFcon != null) DBFcon.Close();
                lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString();
                ff.WriteTofile(DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString(), txtLogFileName);
                string txtMessage = "Возникла ошибка при попытке загрузить реестр по пути " + txtCurrPath;
                txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString();
                ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки реестра оплат ТГК1 в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                return iLogCnt;
            }

            return iLogCnt;
        }
         
        public int AutoLoadKRCReestrs(string constrGIBDD, string txtUploadDirGibdd, string txtLogFileName, int iDiv, string txtOspEmail, string txtAdminEmail, Logger_ufssprk_tools lLogger)
        {
            int iContrSource = 3;// источник - 1 МВД; 2 - РИЦ ЖХ; 3 - КРЦ
            decimal nUserID = 8992; // SYSDBA
            decimal nContrID = 0; // код контрагента (МВД, РИЦ ЖХ)

            OleDbConnection ConG, con;
            Int32 iCnt = 0;
            Int32 iLogCnt = 0;
            Int32 iPercent = 0;
            Int32 iFoundCnt = 0;
            Int32 iSourceID = 0;
            ArrayList alFiles;
            ArrayList alLoadedReestrs;
            string txtCurrPath = "";
            string txtMailServ = "mail10";

            File_funcs ff = new File_funcs();
            try
            {
                ConG = new OleDbConnection(constrGIBDD);

                // 1. Получить список реестров

                alFiles = ff.GetReestrs(txtUploadDirGibdd, 1, 10, lLogger);

                // 2.1 Получить список уже загруженных реестров ГИБДД
                alLoadedReestrs = GetLoadedReestrs(ConG, iContrSource, lLogger);

                // 2.2 Загрузить файлы из alFiles в GIBDD_PLATEZH, 
                foreach (string txtPath in alFiles)
                {
                    txtCurrPath = txtPath;
                    // вычленить имя файла
                    if (txtPath.Length > 0)
                    {
                        string tablename = "";
                        string txtExt = "";
                        DateTime dtDateIsh;
                        string txtFileDir = "";
                        string txtSql = "";


                        txtExt = txtPath.Substring(txtPath.LastIndexOf(".") + 1);
                        tablename = ff.GetTablename(txtPath, 4);

                        // если это dbf и он начинается с R
                        if (txtExt.ToUpper().Equals("DBF") && tablename[0].ToString().ToUpper().Equals("K"))
                        {
                            ff.ChangeByte(txtPath, 0x65, 30, lLogger);

                            // вычленить из имени файла дату исх. документа (реестра)
                            // т.к. тут первая буква выпадает, то нужно ее резать.
                            dtDateIsh = ff.GetDateFromReverseString(tablename.Substring(1));

                            // получить каталог
                            txtFileDir = ff.GetFileDir(txtPath, 4);

                            // вычленить из имени файла исх номер документа
                            string txtIshNumber = "";
                            //if (tablename.Length > 9)
                            //{
                            //    txtIshNumber = tablename.Substring(9, tablename.Length - 9);
                            //}

                            // новый формат txtIshNumber = дата_старый_исх.номер = tablename
                            // букву R отрезаем
                            txtIshNumber = tablename.Substring(1);

                            txtSql = "SELECT * FROM " + tablename + " WHERE LEN(RTRIM(NOM_ID)) > 0";

                            // проверить по имени файла что он не загружен
                            if (!alLoadedReestrs.Contains(txtIshNumber))
                            {
                                // если не загружен то загрузить bp DBF данные 
                                DataTable tblReestr = null;
                                tblReestr = ReadDbfFile(txtPath, 4, txtSql, lLogger);
                                //tblReestr = GetDbfTable(txtSql, "GIBDD_PLATEZH", txtPath, txtFileDir, tablename);

                                // загрузить данные об оплатах КРЦ из DBF в таблицу PLATEZH
                                DataTable dtKRCPlat = FillKrcDataToPlatezhTable(tblReestr, iContrSource, txtIshNumber, dtDateIsh, lLogger);


                                // Если данные загружены в шаблонную таблицу, можно их вставить в БД
                                if (dtKRCPlat != null && dtKRCPlat.Rows.Count > 0)
                                {
                                    iCnt = InsertPlatTable(dtKRCPlat, ConG, iContrSource, txtIshNumber, dtDateIsh, lLogger);

                                    if (iCnt >= 0)
                                    {
                                        iLogCnt++;
                                        // добавить в список alLoadedReestrs
                                        alLoadedReestrs.Add(txtIshNumber);
                                        string txtMessage = DateTime.Now.ToString() + " Загружено " + iCnt + "\tстрок реестра номер: " + txtIshNumber;
                                        txtMessage += "\n Реестр загружен из файла по пути: " + txtCurrPath;
                                        ff.WriteTofile(txtMessage, txtLogFileName);
                                        ff.SendEmail(txtMessage, "Загрузка реестра оплат КРЦ", txtOspEmail, txtAdminEmail, txtMailServ, "");
                                        ff.SendEmail(txtMessage, "Загрузка реестра " + txtIshNumber + " оплат КРЦ ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.WriteTofile(DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, txtLogFileName);
                    string txtMessage = "Возникла ошибка при попытке загрузить реестр по пути " + txtCurrPath;
                    txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка при работе с данными. Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки реестра оплат КРЦ в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                }
                return iLogCnt;
            }
            catch (Exception ex)
            {
                //if (DBFcon != null) DBFcon.Close();
                lLogger.ErrMessage += DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString();
                ff.WriteTofile(DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString(), txtLogFileName);
                string txtMessage = "Возникла ошибка при попытке загрузить реестр по пути " + txtCurrPath;
                txtMessage += "\n" + DateTime.Now.ToString() + " Ошибка приложения. Message: " + ex.ToString();
                ff.SendEmail(txtMessage, "Внимание! Ошибка загрузки оплат КРЦ в ОСП " + iDiv.ToString().PadLeft(2, '0'), txtAdminEmail, txtAdminEmail, txtMailServ, "");
                return iLogCnt;
            }

            return iLogCnt;
        }


        /* функция для выгрузки постановлений в строку */
        /* обычно это делается так - готовится файл с данными DataTable */
        /* если DataTable пока не делать - то пусть будет прямое чтение из б.д. */

        // ПФР Постановление;Номер постановления;Дата постановления;Номер ИД;Дата ИД;Сумма по ИД;ФИО должника;Дата рождения должника;Адрес должника;СНИЛС должника;ИНН Должника;ОГРН должника;Взыскатель;Номер ИП;Дата возбуждения ИП;ФИО СПИ;Отдел СП
        /*
select d.metaobject_caption, d.doc_number, o.out_doc_date, ip.id_docno,
 o_ip.id_date, o_ip.id_debtsum,
 o_ip.id_dbtr_name, o_ip.id_dbtr_born, o_ip.id_dbtr_adr ,o_ip.id_dbtr_snils,
   o_ip.id_dbtr_inn,  o_ip.id_dbtr_ogrn, o_ip.id_crdr_name,
    o_ip.ipno, o_ip.ip_risedate, o_ip.ip_exec_prist_name, o_ip.div_name
      from document d join o_ip on o_ip.id = d.id join o on o.id = d.id
       join doc_ip_doc ip on ip.id = o_ip.ip_id
where d.metaobjectname in ('O_IP_ACT_END_STOP')
 and d.doc_date >= '01.01.2015' and d.doc_date < '01.05.2015'
 and o.out_doc_date >= '01.01.2015' and o.out_doc_date < '01.05.2015'
 and d.docstatusid in (2, 10)
 and ((UPPER(o_ip.id_crdr_name) LIKE '%ПФР%') or (UPPER(o_ip.id_crdr_name) LIKE '%ПЕНСИОН%')  or (UPPER(o_ip.id_crdr_name) LIKE '%ОПФ%') or (UPPER(o_ip.id_crdr_name) LIKE '%УПФ%'))
 order by 2, 3
         */

        /*
        Штрих-код;Постановление;Номер постановления;Дата постановления;Номер ИД;Дата ИД;Сумма по ИД;ФИО должника;Дата рождения должника;Год рождения должника;Адрес должника;СНИЛС должника;ИНН Должника;ОГРН должника;Взыскатель;Номер ИП;Дата возбуждения ИП;ФИО СПИ;Отдел СП 
        select
        sl_d.barcode,
         d.metaobject_caption, d.doc_number, o.out_doc_date, ip.id_docno,
         o_ip.id_date, o_ip.id_debtsum,
         o_ip.id_dbtr_name, o_ip.id_dbtr_born, o_ip.id_dbtr_adr ,o_ip.id_dbtr_snils,
           o_ip.id_dbtr_inn,  o_ip.id_dbtr_ogrn, o_ip.id_crdr_name,
            o_ip.ipno, o_ip.ip_risedate, o_ip.ip_exec_prist_name, o_ip.div_name
              from document d join o_ip on o_ip.id = d.id join o on o.id = d.id
               join doc_ip_doc ip on ip.id = o_ip.ip_id
               left join sendlist sl on sl.sendlist_o_id = d.id
               left join document sl_d on sl_d.id = sl.id
        where d.metaobjectname in ('O_IP_RES_REOPEN', 'O_IP_ACT_END_END')
         and d.doc_date >= '01.01.2015' and d.doc_date < '01.05.2015'
         and o.out_doc_date >= '01.01.2015' and o.out_doc_date < '01.05.2015'
         and d.docstatusid in (2, 10)
         and ((UPPER(o_ip.id_crdr_name) LIKE '%КЭСК%') or (UPPER(o_ip.id_crdr_name) LIKE '%КАРЕЛЬСКАЯ%ЭНЕРГОСБЫТОВАЯ%'))
         and sl.sendlist_contr_type_id = 8 and sl_d.docstatusid > 0
         order by 3, 1
                */
        public Int64 WriteKeskToTxt(DataTable dtKesk, string txtFileName, Encoding enc, Logger_ufssprk_tools lLogger)
        {
            Int64 nRes = 0;
            File_funcs ff = new File_funcs();
            string txtRow = "";

            if (dtKesk != null && dtKesk.Rows.Count > 0)
            {
                ff.WriteTofile("Штрих-код;Постановление;Номер постановления;Дата постановления;Номер ИД;Дата ИД;Сумма по ИД;Должник;Дата рождения должника;Год рождения должника;Адрес должника;СНИЛС должника;ИНН Должника;ОГРН должника;Взыскатель;Номер ИП;Дата возбуждения ИП;ФИО СПИ;Отдел СП", txtFileName, enc);
                foreach (DataRow dr in dtKesk.Rows)
                {
                    txtRow = "";
                    foreach (DataColumn col in dr.Table.Columns)
                    {
                        if (col.ColumnName.ToLower().Equals("out_doc_date")
                        || col.ColumnName.ToLower().Equals("id_date")
                        || col.ColumnName.ToLower().Equals("id_dbtr_born")
                        || col.ColumnName.ToLower().Equals("ip_risedate"))
                        {
                            if (!DBNull.Value.Equals(dr[col.ColumnName]))
                                txtRow += Convert.ToDateTime(dr[col.ColumnName]).ToShortDateString();
                        }
                        else if (col.ColumnName.ToLower().Equals("id_debtsum"))
                        {
                            if (!DBNull.Value.Equals(dr[col.ColumnName]))
                                txtRow += Convert.ToString(dr[col.ColumnName]).Replace(',', '.');
                            else txtRow += "0";
                        }
                        else
                        {
                            if (!DBNull.Value.Equals(dr[col.ColumnName]))
                                txtRow += Convert.ToString(dr[col.ColumnName]);
                        }

                        txtRow += ";"; // закрыть ;
                    }
                    // удалить ; в конце
                    if (txtRow.Length > 0) txtRow = txtRow.Substring(0, txtRow.Length - 1);
                    
                    // записать строчку в файл
                    if((txtRow.Length > 0) && ff.WriteTofile(txtRow, txtFileName, enc)){
                        nRes++;
                    }
                }
            }

            return nRes;
        }

        public int WriteGimsVU(OleDbConnection conGIBDD, DataTable dtData, string txtFileName, DateTime dtDateVH, Logger_ufssprk_tools lLogger)
        {
            int iCnt = 0;
            int iErrCnt = 0;
            int nMaxCount = dtData.Rows.Count;


            // код контрагента - Б_СБЕР_10
            // неплохо бы сделать контрагента какого-то в базе для этих целей
            // и прописать его в конфиге или в options.txt
            string txtAgreementCode = "250";

            decimal nID = 0;
            decimal newID = 0;
            string txtVuNumber = "";

            OleDbTransaction tran = null;
            OleDbCommand m_cmd;
            File_funcs ff = new File_funcs();

            try
            {
                if (dtData != null && dtData.Rows.Count > 0 && dtData.Columns.Contains("F1") && dtData.Columns.Contains("F6"))
                {
                    // проверить подключение - а то может статься что не закрыли
                    if (conGIBDD != null && conGIBDD.State != ConnectionState.Closed) conGIBDD.Close();

                    conGIBDD.Open();
                    tran = conGIBDD.BeginTransaction(IsolationLevel.ReadCommitted);

                    foreach (DataRow row in dtData.Rows)
                    {
                        if (!(Convert.ToString(row["F1"]).Trim().ToUpper().Equals("ФАМИЛИЯ")
                        ))
                        {

                            m_cmd = new OleDbCommand();
                            m_cmd.Connection = conGIBDD;
                            m_cmd.Transaction = tran;

                            // FL_USE = 0 - МВД
                            // FL_USE = 100 - ГИМС
                            m_cmd.CommandText = "INSERT INTO MVD_VOD_PR (VU_YEAR, VU_NUMBER, SURNAME, FIRSTNAME, PATRONYMIC, FIO_D, BORN_D, OUT_D,  FL_USE, DATE_VH, FILENAME)";
                            m_cmd.CommandText += " values (:VU_YEAR, :VU_NUMBER, :SURNAME, :FIRSTNAME, :PATRONYMIC, :FIO_D, :BORN_D, :OUT_D, 100, :DATE_VH, :FILENAME)";


                            string txtSurName = "";
                            if (dtData.Columns.Contains("F1")) txtSurName = Convert.ToString(row["F1"]).Trim().ToUpper();

                            string txtFirstName = "";
                            if (dtData.Columns.Contains("F2")) txtFirstName = Convert.ToString(row["F2"]).Trim().ToUpper().Trim('.');

                            string txtPatronymic = "";
                            if (dtData.Columns.Contains("F3")) txtPatronymic = Convert.ToString(row["F3"]).Trim().ToUpper().Trim('.');

                            string txtFioD = txtSurName + ' ' + txtFirstName + ' ' + txtPatronymic;
                            txtFioD = txtFioD.Trim();

                            string txtBornD = "";
                            DateTime dtBornD = DateTime.MaxValue;
                            if (dtData.Columns.Contains("F4"))
                            {
                                txtBornD = Convert.ToString(row["F4"]).Trim();
                                DateTime.TryParse(txtBornD, out dtBornD);
                            }

                            txtVuNumber = "";
                            if (dtData.Columns.Contains("F5")) txtVuNumber = Convert.ToString(row["F5"]).Trim();
                            if (txtVuNumber != null &&  txtVuNumber.Length > 0 && txtVuNumber[0].Equals('_') && (txtVuNumber.Length > 1)) txtVuNumber = txtVuNumber.Substring(1);


                            string txtOutD = "";
                            DateTime dtOutD = DateTime.MaxValue;
                            if (dtData.Columns.Contains("F6"))
                            {
                                txtOutD = Convert.ToString(row["F6"]).Trim();
                                DateTime.TryParse(txtOutD, out dtOutD);
                            }


                            // DateTime dtVhD = DateTime.Today; - не используется

                            int nVuYear = 0;
                            if (!dtOutD.Equals(DateTime.MaxValue))
                                nVuYear = dtOutD.Year;

                            m_cmd.Parameters.Add(new OleDbParameter(":VU_YEAR", nVuYear));
                            m_cmd.Parameters.Add(new OleDbParameter(":VU_NUMBER", txtVuNumber));

                            m_cmd.Parameters.Add(new OleDbParameter(":SURNAME", txtSurName));
                            m_cmd.Parameters.Add(new OleDbParameter(":FIRSTNAME", txtFirstName));
                            m_cmd.Parameters.Add(new OleDbParameter(":PATRONYMIC", txtPatronymic));
                            m_cmd.Parameters.Add(new OleDbParameter(":FIO_D", txtFioD));
                            if(dtBornD.Equals(DateTime.MaxValue))
                                m_cmd.Parameters.Add(new OleDbParameter(":BORN_D", System.DBNull.Value));
                            else
                                m_cmd.Parameters.Add(new OleDbParameter(":BORN_D", dtBornD));

                            if(dtOutD.Equals(DateTime.MaxValue))
                                m_cmd.Parameters.Add(new OleDbParameter(":OUT_D", System.DBNull.Value));
                            else
                                m_cmd.Parameters.Add(new OleDbParameter(":OUT_D", dtOutD));
                            
                            m_cmd.Parameters.Add(new OleDbParameter(":DATE_VH", dtDateVH));
                            m_cmd.Parameters.Add(new OleDbParameter(":FILENAME", txtFileName));

                            int result = m_cmd.ExecuteNonQuery();

                            if (result != -1)
                            {
                                iCnt++;
                                //prbWritingDBF.PerformStep();
                            }
                        }
                    }
                    tran.Commit();
                }
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Номер строки = " + txtVuNumber + ". Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    //MessageBox.Show("Ошибка при работе с данными. Номер строки = " + txtId + ". Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                }
                if (tran != null)
                {
                    tran.Rollback();
                    iCnt = 0; // т.к. ни одной строки не загрузили
                }
            }
            catch (Exception ex)
            {
                //if (DBFcon != null) DBFcon.Close();
                lLogger.ErrMessage += "Ошибка приложения. Номер строки = " + txtVuNumber + ". Message: " + ex.ToString();
                iCnt = 0; // т.к. ни одной строки не загрузили
                //return false; 
            }

            conGIBDD.Close();
            return iCnt;
        }

        public int WriteMvdVU(OleDbConnection conGIBDD, DataTable dtData, string txtFileName, DateTime dtDateVH, Logger_ufssprk_tools lLogger)
        {
            int iCnt = 0;
            int iErrCnt = 0;
            int nMaxCount = dtData.Rows.Count;


            // код контрагента - Б_СБЕР_10
            // неплохо бы сделать контрагента какого-то в базе для этих целей
            // и прописать его в конфиге или в options.txt
            string txtAgreementCode = "250";

            decimal nID = 0;
            decimal newID = 0;
            string txtVuNumber = "";

            OleDbTransaction tran = null;
            OleDbCommand m_cmd;
            File_funcs ff = new File_funcs();

            try
            {
                if (dtData != null && dtData.Rows.Count > 0 && dtData.Columns.Contains("F1") && dtData.Columns.Contains("F7"))
                {
                    // проверить подключение - а то может статься что не закрыли
                    if (conGIBDD != null && conGIBDD.State != ConnectionState.Closed) conGIBDD.Close();

                    conGIBDD.Open();
                    tran = conGIBDD.BeginTransaction(IsolationLevel.ReadCommitted);

                    foreach (DataRow row in dtData.Rows)
                    {
                        if (!(Convert.ToString(row["F1"]).Trim().ToUpper().Equals("ФАМИЛИЯ")
                        ))
                        {

                            m_cmd = new OleDbCommand();
                            m_cmd.Connection = conGIBDD;
                            m_cmd.Transaction = tran;

                            m_cmd.CommandText = "INSERT INTO MVD_VOD_PR (VU_YEAR, VU_NUMBER, SURNAME, FIRSTNAME, PATRONYMIC, FIO_D, BORN_D, OUT_D, END_D, FL_USE, DATE_VH, FILENAME)";
                            m_cmd.CommandText += " values (:VU_YEAR, :VU_NUMBER, :SURNAME, :FIRSTNAME, :PATRONYMIC, :FIO_D, :BORN_D, :OUT_D, :END_D, 0, :DATE_VH, :FILENAME)";


                            string txtSurName = "";
                            if (dtData.Columns.Contains("F1")) txtSurName = Convert.ToString(row["F1"]).Trim().ToUpper();

                            string txtFirstName = "";
                            if (dtData.Columns.Contains("F2")) txtFirstName = Convert.ToString(row["F2"]).Trim().ToUpper();

                            string txtPatronymic = "";
                            if (dtData.Columns.Contains("F3")) txtPatronymic = Convert.ToString(row["F3"]).Trim().ToUpper();

                            string txtFioD = txtSurName + ' ' + txtFirstName + ' ' + txtPatronymic;
                            txtFioD = txtFioD.Trim();

                            string txtBornD = "";
                            DateTime dtBornD = DateTime.MaxValue;
                            if (dtData.Columns.Contains("F4"))
                            {
                                txtBornD = Convert.ToString(row["F4"]).Trim();
                                DateTime.TryParse(txtBornD, out dtBornD);
                            }

                            txtVuNumber = "";
                            if (dtData.Columns.Contains("F5")) txtVuNumber = Convert.ToString(row["F5"]).Trim();
                            if (txtVuNumber[0].Equals('_') && (txtVuNumber.Length > 1)) txtVuNumber = txtVuNumber.Substring(1);


                            string txtOutD = "";
                            DateTime dtOutD = DateTime.MaxValue;
                            if (dtData.Columns.Contains("F6"))
                            {
                                txtOutD = Convert.ToString(row["F6"]).Trim();
                                DateTime.TryParse(txtOutD, out dtOutD);
                            }

                            string txtEndD = "";
                            DateTime dtEndD = DateTime.MaxValue;
                            if (dtData.Columns.Contains("F7"))
                            {
                                txtEndD = Convert.ToString(row["F7"]).Trim();
                                DateTime.TryParse(txtEndD, out dtEndD);
                            }



                            // DateTime dtVhD = DateTime.Today; - не используется

                            int nVuYear = dtOutD.Year;

                            m_cmd.Parameters.Add(new OleDbParameter(":VU_YEAR", nVuYear));
                            m_cmd.Parameters.Add(new OleDbParameter(":VU_NUMBER", txtVuNumber));

                            m_cmd.Parameters.Add(new OleDbParameter(":SURNAME", txtSurName));
                            m_cmd.Parameters.Add(new OleDbParameter(":FIRSTNAME", txtFirstName));
                            m_cmd.Parameters.Add(new OleDbParameter(":PATRONYMIC", txtPatronymic));
                            m_cmd.Parameters.Add(new OleDbParameter(":FIO_D", txtFioD));
                            m_cmd.Parameters.Add(new OleDbParameter(":BORN_D", dtBornD));
                            m_cmd.Parameters.Add(new OleDbParameter(":OUT_D", dtOutD));
                            m_cmd.Parameters.Add(new OleDbParameter(":END_D", dtEndD));
                            m_cmd.Parameters.Add(new OleDbParameter(":DATE_VH", dtDateVH));
                            m_cmd.Parameters.Add(new OleDbParameter(":FILENAME", txtFileName));

                            int result = m_cmd.ExecuteNonQuery();

                            if (result != -1)
                            {
                                iCnt++;
                                //prbWritingDBF.PerformStep();
                            }
                        }
                    }
                    tran.Commit();
                }
            }
            catch (OleDbException ole_ex)
            {
                foreach (OleDbError err in ole_ex.Errors)
                {
                    lLogger.ErrMessage += "Ошибка при работе с данными. Номер строки = " + txtVuNumber + ". Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState;
                    //MessageBox.Show("Ошибка при работе с данными. Номер строки = " + txtId + ". Message: " + err.Message + "Native Error: " + err.NativeError + "Source: " + err.Source + "SQL State   : " + err.SQLState, "Внимание!", MessageBoxButtons.OK);
                }
                if (tran != null)
                {
                    tran.Rollback();
                    iCnt = 0; // т.к. ни одной строки не загрузили
                }
            }
            catch (Exception ex)
            {
                //if (DBFcon != null) DBFcon.Close();
                lLogger.ErrMessage += "Ошибка приложения. Номер строки = " + txtVuNumber + ". Message: " + ex.ToString();
                iCnt = 0; // т.к. ни одной строки не загрузили
                //return false; 
            }

            conGIBDD.Close();
            return iCnt;
        }

    }
}
